{"/home/travis/build/npmtest/node-npmtest-phantomas/test.js":"/* istanbul instrument in package npmtest_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomas/lib.npmtest_phantomas.js":"/* istanbul instrument in package npmtest_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantomas = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantomas = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomas/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantomas && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantomas\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantomas.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phantomas.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantomas.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phantomas.__dirname + '/lib.npmtest_phantomas.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/index.js":"/**\n * phantomas CommonJS module\n */\n'use strict';\n\nvar debug = require('debug')('phantomas'),\n\temitter = require('events').EventEmitter,\n\tEngines = require('./engines'),\n\tnet = require('net'),\n\tpath = require('path'),\n\tQ = require('q'),\n\tStream = require('stream'),\n\tutil = require('util'),\n\tVERSION = require('./../package').version;\n\n/**\n * Return temporary directory for the current phantomas run\n */\nfunction getTmpDir() {\n\tvar tmpdir = require('os').tmpdir(),\n\t\tuuid = require('node-uuid').v4();\n\n\t// example: /tmp/phantomas/58aea8b5-2c97-48ee-9885-fcd81d38561f/\n\treturn tmpdir + '/phantomas/' + uuid + '/';\n}\n\n/**\n * Main CommonJS module entry point\n *\n * FIXME: split into seperate functions\n */\nfunction phantomas(url, opts, callback) {\n\tvar engineArgs = [],\n\t\tdeferred = Q.defer(),\n\t\tevents = new emitter(),\n\t\tproc,\n\t\tengine,\n\t\tdata = '',\n\t\ttmpDir,\n\t\toptions;\n\n\t// options can be omitted\n\tif (typeof opts === 'function') {\n\t\tcallback = opts;\n\t\topts = {};\n\t}\n\n\tdebug('nodejs %s', process.version);\n\tdebug('phantomas v%s installed in %s', VERSION, phantomas.path);\n\tdebug('URL: <%s>', url);\n\tdebug('Options: %s', JSON.stringify(opts));\n\n\t// options handling\n\toptions = util._extend({}, opts || {}); // use util._extend to avoid #563\n\toptions.url = options.url || url || false;\n\n\t// generate unique temporary directory name\n\t// and pass it to PhantomJS script as an environment variable\n\ttmpDir = getTmpDir();\n\tprocess.env.PHANTOMAS_TMP_DIR = tmpDir;\n\n\t// path to analyze-css main script (#664)\n\tprocess.env.ANALYZE_CSS_BIN = require('analyze-css').pathBin;\n\n\tdebug('Environment: %j', process.env);\n\n\t// select the engine and run phantomas\n\tengine = new Engines(options);\n\tproc = engine.run(phantomas.path + '/scripts/phantomas.js');\n\n\tdebug('Spawned with pid #%d', proc.pid);\n\n\tproc.on('error', function(err) {\n\t\tdebug('Error: %s', err);\n\t});\n\n\t/**\n\t * Set up IPC channel\n\t *\n\t * It will receive JSON-formatted messages from phantomjs / slimerjs process\n\t * (send over stdout stream of spawned process) and emit events\n\t */\n\tvar ipc = new(require('./ipc'))(proc.stdout);\n\tipc.setEventEmitter(events);\n\n\t// pipe log messages to error stream\n\tvar errStream = new Stream.Readable();\n\terrStream._read = function() {\n\t\treturn true;\n\t};\n\n\tipc.on('log', function(msg) {\n\t\terrStream.push(msg + \"\\n\");\n\t});\n\n\t// push raw messages from stderr (PhantomJS run in --debug=true mode) to errStream\n\tproc.stderr.on('data', function(data) {\n\t\tvar msg = data.toString().\n\t\tsplit('[DEBUG]').pop().\n\t\ttrim();\n\n\t\terrStream.push('Debug: ' + msg + \"\\n\");\n\t});\n\n\t// handle loading progress\n\tvar progressDebug = require('debug')('phantomas:progress');\n\n\tipc.on('progress', function(progress, inc) {\n\t\tprogressDebug('%d% (+%d%)', progress, inc);\n\t\tdeferred.notify(progress / 100);\n\t});\n\n\t// handle --socket <UNIX IPC socket> option\n\t// @see http://nodejs.org/api/net.html#net_new_net_socket_options\n\tif (typeof options.socket === 'string') {\n\t\tvar socket,\n\t\t\tsocketName = options.socket;\n\n\t\t// @see http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener\n\t\tdebug('Using UNIX socket for IPC: %s', socketName);\n\n\t\tsocket = new net.Socket();\n\t\tsocket.connect(socketName, function() {\n\t\t\tdebug('Socket connected');\n\t\t});\n\n\t\tsocket.on('error', function(err) {\n\t\t\tdebug('Socket error: %s', err);\n\n\t\t\tthrow 'Socket \"' + socketName + '\" error - ' + err;\n\t\t});\n\n\t\tipc.on('_msg', function(data) {\n\t\t\t// example: [\"metric\",\"bodyHTMLSize\",75193]\n\t\t\tsocket.write(JSON.stringify(data) + \"\\n\");\n\t\t});\n\t}\n\n\t// get JSON results\n\tipc.on('json', function(raw) {\n\t\tdata = raw;\n\t});\n\n\t// failures handling\n\tvar exitCode = 0;\n\tipc.on('exit', function(code, msg) {\n\t\tif ((code > 0) && (typeof msg === 'string')) {\n\t\t\texitCode = code;\n\t\t\terrStream.push('phantomas: (' + code + ') ' + msg + \"\\n\");\n\t\t}\n\t});\n\n\t// process results\n\tproc.on('close', function(code) {\n\t\tvar debug = require('debug')('phantomas:results'),\n\t\t\tjson,\n\t\t\tresults;\n\n\t\t// PhantomJS made a core dump (#382)\n\t\tif (code === null) {\n\t\t\tcode = 255; // EXIT_ERROR\n\t\t\terrStream.push('phantomas: (' + code + ') Engine crashed unexpectedly\\n');\n\t\t}\n\n\t\t// apply the code from 'exit' event\n\t\tcode = code || exitCode;\n\n\t\tdebug('Process returned code #%d', code);\n\n\t\t// (try to) parse to JSON\n\t\ttry {\n\t\t\tjson = JSON.parse(data);\n\t\t} catch (ex) {\n\t\t\tdebug('Error when parsing JSON (%s): \"%s\"', ex, data);\n\t\t\terrStream.push(data);\n\n\t\t\t// Return EXIT_ERROR when JSON can not be parsed (and there was no error earlier)\n\t\t\tif (code < 250) {\n\t\t\t\tcode = 255;\n\t\t\t}\n\n\t\t\terrStream.push('phantomas: (' + code + ') Failed to parse JSON with the results\\n');\n\t\t}\n\n\t\t// finish the readable stream\n\t\terrStream.emit('end');\n\n\t\tif (typeof json !== 'undefined') {\n\t\t\tevents.emit('data', json);\n\n\t\t\t// wrap JSON data into results object\n\t\t\tresults = new(require('../core/results'))(json);\n\t\t\tevents.emit('results', results);\n\t\t}\n\n\t\tif (code > 0) {\n\t\t\tif (events.listeners('error').length > 0) {\n\t\t\t\tevents.emit('error', code);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof callback === 'function') {\n\t\t\tvar err = code === 0 ? null : new Error(code);\n\t\t\tcallback(err, json, results);\n\t\t}\n\n\t\t// either reject or resolve the promise\n\t\tif (code > 250) {\n\t\t\tdebug('Rejecting a promise with %d exit code', code);\n\t\t\tdeferred.reject({\n\t\t\t\tcode: code,\n\t\t\t\tjson: json,\n\t\t\t\tresults: results\n\t\t\t});\n\t\t} else {\n\t\t\tdebug('Resolving a promise with %d exit code', code);\n\t\t\tdeferred.resolve({\n\t\t\t\tcode: code,\n\t\t\t\tjson: json,\n\t\t\t\tresults: results\n\t\t\t});\n\t\t}\n\t});\n\n\tvar promise = deferred.promise;\n\n\tpromise.pid = proc.pid;\n\tpromise.stdout = proc.stdout;\n\tpromise.stderr = errStream;\n\tpromise.on = events.on.bind(events);\n\n\treturn promise;\n}\n\nphantomas.metadata = require(__dirname + '/metadata/metadata.json');\nphantomas.path = path.normalize(__dirname + '/..');\nphantomas.version = VERSION;\n\nmodule.exports = phantomas;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/engines.js":"/**\n * Provides abstractor layer for using different engines to run phantomas\n */\n'use strict';\n\nvar debug = require('debug')('phantomas:engines'),\n\tspawn = require('child_process').spawn,\n\tVERSION = require('../package').version;\n\nfunction engines(options) {\n\t/* jshint validthis: true */\n\tthis.options = options;\n\n\t//--debug can be either 'true' or 'false'\n\tthis.options.debug = (this.options.debug === true) ? 'true' : 'false';\n\n\t// engines storage\n\tthis.engines = {};\n\t[\n\t\t// the first one is a default one\n\t\t'webkit',\n\t\t'gecko'\n\t].forEach(this.registerEngine, this);\n}\n\nengines.prototype.registerEngine = function(engineName) {\n\tvar def;\n\n\ttry {\n\t\tdef = require('./engines/' + engineName);\n\t\tthis.engines[engineName] = def;\n\n\t\tdebug('Engine \"%s\": %s v%s installed in %s', engineName, def.name, def.version, def.path);\n\t} catch (ex) {\n\t\tdebug('Engine \"%s\": failed to import - %s', engineName, ex);\n\t}\n};\n\nengines.prototype.getEngines = function() {\n\treturn Object.keys(this.engines);\n};\n\nengines.prototype.getEngine = function(engine) {\n\treturn this.engines[engine];\n};\n\nengines.prototype.run = function(scriptFile) {\n\t// select the engine\n\tvar engines = this.getEngines(),\n\t\tengine = this.getEngine(engines[0]);\n\n\t// --engine=[gecko|webkit]\n\tif (typeof this.options.engine === 'string') {\n\t\tengine = this.getEngine(this.options.engine);\n\n\t\tif (typeof engine === 'undefined') {\n\t\t\tthrow 'Engine \"' + this.options.engine + '\" not found!';\n\t\t}\n\t}\n\t// PHANTOMAS_ENGINE=gecko phantomas \"http://example.com\"\n\telse if (typeof process.env.PHANTOMAS_ENGINE === 'string') {\n\t\tengine = this.getEngine(process.env.PHANTOMAS_ENGINE);\n\n\t\tif (typeof engine === 'undefined') {\n\t\t\tthrow 'Engine \"' + process.env.PHANTOMAS_ENGINE + '\" not found!';\n\t\t}\n\t}\n\t// --gecko / --webkit\n\telse {\n\t\tengines.forEach(function(key) {\n\t\t\tif (this.options[key] === true) {\n\t\t\t\tengine = this.getEngine(key);\n\t\t\t}\n\t\t}, this);\n\t}\n\n\t// customize user agent\n\tif (typeof this.options['user-agent'] === 'undefined') {\n\t\tthis.options['user-agent'] = \"phantomas/\" + VERSION + \" (\" + engine.getUserAgent() + \"; \" + process.platform + \" \" + process.arch + \")\";\n\t}\n\n\t// build engine specific command-line arguments\n\tvar engineArgs = [];\n\n\tObject.keys(this.options).forEach(function(key) {\n\t\tvar val = this.options[key],\n\t\t\tnativeOptions = [\n\t\t\t\t'cookies-file',\n\t\t\t\t'debug',\n\t\t\t\t'ignore-ssl-errors',\n\t\t\t\t'ssl-protocol',\n\t\t\t\t'proxy',\n\t\t\t\t'proxy-auth',\n\t\t\t\t'proxy-type'\n\t\t\t];\n\n\t\tif (val === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// handle native PhantomJS options (#163)\n\t\t// @see http://phantomjs.org/api/command-line.html\n\t\tif (nativeOptions.indexOf(key) > -1) {\n\t\t\tengineArgs.push('--' + key + '=' + val);\n\t\t}\n\t}, this);\n\n\tdebug('Running %s (using %s)', scriptFile, engine.name);\n\tdebug('Passing phantomas options: %j', this.options);\n\tdebug('Passing engine options: %j', engineArgs);\n\n\t// add a script to run\n\tengineArgs.push(scriptFile);\n\n\t// pass JSON encoded options\n\tengineArgs.push(JSON.stringify(this.options));\n\n\t// spawn the process\n\tvar proc;\n\n\tif (typeof engine.spawn === 'function') {\n\t\tdebug('Using custom spawn function');\n\t\tproc = engine.spawn(engine.path, engineArgs);\n\t} else {\n\t\tproc = spawn(engine.path, engineArgs, {\n\t\t\tenv: process.env\n\t\t});\n\t}\n\n\treturn proc;\n};\n\n// public API\nmodule.exports = engines;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/bin/phantomas.js":"#!/usr/bin/env node\n\n/**\n * PhantomJS-based web performance metrics collector\n *\n * Run \"node phantomas.js\" to get help\n *\n * @see https://github.com/macbre/phantomas\n */\n'use strict';\n\nvar phantomas = require('..'),\n\tasync = require('async'),\n\tdebug = require('debug')('phantomas:cli'),\n\tprogram = require('../lib/optimist-config-file'),\n\tProgressBar = require('progress'),\n\toptions = {},\n\truns,\n\turl = '';\n\n// parse options\nprogram\n\t.usage('PhantomJS-based web performance metrics collector\\n\\nphantomas <url> [options]')\n\t// mandatory\n\t.header('General options')\n\t.describe('url', 'Set URL to work with').string('url')\n\t// version / help\n\t.describe('version', 'Show version number and quit').boolean('version').alias('version', 'V')\n\t.describe('help', 'This help text').boolean('help').alias('help', 'h')\n\t.describe('verbose', 'print debug messages to the console').boolean('verbose').alias('verbose', 'v')\n\t.describe('debug', 'run PhantomJS in debug mode').default('debug')\n\t.describe('modules', 'run selected modules only [moduleOne],[moduleTwo],...')\n\t.describe('include-dirs', 'load modules from specified directories [dirOne],[dirTwo],...')\n\t.describe('skip-modules', 'skip selected modules [moduleOne],[moduleTwo],...')\n\t.describe('config', 'uses JSON or YAML-formatted config file to set parameters').string('config')\n\t// optional params\n\t.header('Client options')\n\t// --engine=[webkit|gecko]\n\t.describe('engine', '[experimental] select engine used to run the phantomas [webkit|gecko]').string('engine')\n\t.describe('phone', 'force viewport and user agent of a mobile phone')\n\t.describe('tablet', 'force viewport and user agent of a tablet')\n\t.describe('viewport', 'phantomJS viewport dimensions [width]x[height [default: 1280x1024]')\n\t.describe('user-agent', 'provide a custom user agent')\n\t.header('HTTP options')\n\t.describe('auth-user', 'sets the user name used for HTTP authentication')\n\t.describe('auth-pass', 'sets the password used for HTTP authentication')\n\t.describe('cookie', 'document.cookie formatted string for setting a single cookie (e.g. \"bar=foo;domain=url\")')\n\t.describe('cookies-file', 'specifies the file name to store the persistent Cookies')\n\t.describe('ignore-ssl-errors', 'ignores SSL errors, such as expired or self-signed certificate errors')\n\t.describe('proxy', 'specifies the proxy server to use (e.g. --proxy=192.168.1.42:8080)')\n\t.describe('proxy-auth', 'specifies the authentication information for the proxy (e.g. --proxy-auth=username:password)')\n\t.describe('proxy-type', 'specifies the type of the proxy server [http|socks5|none]')\n\t.describe('ssl-protocol', 'sets the SSL protocol for secure connections [sslv3|sslv2|tlsv1|any]').default('ssl-protocol', 'any')\n\t.header('Runtime options')\n\t.describe('allow-domain', 'allow requests to given domain(s) - aka whitelist [domain],[domain],...')\n\t.describe('block-domain', 'disallow requests to given domain(s) - aka blacklist [domain],[domain],...')\n\t.describe('disable-js', 'disable JavaScript on the page that will be loaded').boolean('disable-js')\n\t.describe('no-externals', 'block requests to 3rd party domains').boolean('no-externals')\n\t.describe('post-load-delay', 'wait X seconds before generating a report')\n\t.describe('runs', 'number of runs to perform')\n\t.describe('scroll', 'scroll down the page when it\\'s loaded').boolean('scroll')\n\t.describe('spy-eval', 'report calls to eval()').boolean('spy-eval')\n\t.describe('stop-at-onload', 'stop phantomas immediately after onload event').boolean('stop-at-onload')\n\t.describe('timeout', 'timeout for phantomas run').default('timeout', 15)\n\t.describe('wait-for-event', 'wait for a given phantomas event before generating a report')\n\t.describe('wait-for-selector', 'wait for an element matching given CSS selector before generating a report')\n\t.describe('scroll', 'scroll down the page when it\\'s loaded').boolean('scroll')\n\t.describe('socket', '[experimental] use provided UNIX socket for IPC')\n\t.header('Output and reporting')\n\t.describe('analyze-css', '[experimental] emit in-depth CSS metrics').boolean('analyze-css')\n\t.describe('colors', 'forces ANSI colors even when output is piped').boolean('colors')\n\t.describe('film-strip', 'register film strip when page is loading (a comma separated list of milliseconds can be passed)').boolean('film-strip')\n\t.describe('film-strip-dir', 'folder path to output film strip (default is ./filmstrip directory)')\n\t.describe('har', 'save HAR to a given file')\n\t.describe('log', 'log to a given file')\n\t.describe('page-source', '[experimental] save page source to file').boolean('page-source')\n\t.describe('page-source-dir', '[experimental] folder path to output page source (default is ./html directory)')\n\t.describe('progress', 'shows page loading progress bar (disables verbose mode)').boolean('progress')\n\t.describe('reporter', 'output format / reporter').default('reporter', 'plain').alias('reporter', 'R').alias('reporter', 'format')\n\t.describe('screenshot', 'render fully loaded page to a given file')\n\t.describe('silent', 'don\\'t write anything to the console').boolean('silent');\n\n// handle --config (issue #209)\nprogram.setConfigFile('config');\n\n// parse it\noptions = program.parse(process.argv);\n\n// show version number\nif (options.version === true) {\n\tconsole.log('phantomas v%s', phantomas.version);\n\tprocess.exit(0);\n}\n\n// show help\nif (options.help === true) {\n\tprogram.showHelp();\n\tprocess.exit(0);\n}\n\n// handle URL passed without --url option (#249)\nif (typeof options._[2] === 'string') {\n\toptions.url = options._[2];\n}\n\n// --url is mandatory -> show help\nif (typeof options.url !== 'string' && typeof options.config === 'undefined') {\n\tprogram.showHelp();\n\tprocess.exit(255);\n}\n\nurl = options.url;\nruns = parseInt(options.runs) || 1;\n\ndelete options.url;\ndelete options._;\ndelete options.$0;\n\n// handle --no-foo options\noptions['no-externals'] = options.externals === false;\ndelete options.externals;\n\n// handle --progress option\nvar bar;\n\nif (options.progress === true) {\n\toptions.verbose = false;\n\n\tbar = new ProgressBar('[:bar] :percent :etas', {\n\t\ttotal: 100 * runs,\n\t\twidth: 50\n\t});\n}\n\n// add env variable to turn off ANSI colors when needed (#237)\n// suppress this behaviour by passing --colors option (issue #342)\nif (!process.stdout.isTTY && (options.colors !== true)) {\n\tdebug('ANSI colors turned off');\n\tprocess.env.BW = 1;\n}\n\n// perform a single run\nfunction task(callback) {\n\t// spawn phantomas process\n\tvar child = phantomas(url, options, function(err, data, results) {\n\t\tcallback(\n\t\t\tnull, // pass null even in case of an error to continue async.series processing (issue #380)\n\t\t\t[err, results]\n\t\t);\n\t});\n\n\tchild.on('progress', function(progress, inc) {\n\t\tif (bar) {\n\t\t\tbar.tick(inc);\n\t\t}\n\t});\n\n\t// pipe --verbose messages to stderr\n\tchild.stderr.pipe(process.stderr);\n}\n\n// @see https://github.com/caolan/async#seriestasks-callback\nvar series = [];\n\ndebug('Preparing %d run(s)...', runs);\n\nfor (var r = 0; r < runs; r++) {\n\tseries.push(task);\n}\n\nasync.series(\n\tseries,\n\tfunction(err, results) {\n\t\tvar debug = require('debug')('phantomas:runs'),\n\t\t\tneedDrain,\n\t\t\treporter,\n\t\t\tres;\n\n\t\t// results is a collection of the following entries:\n\t\t// [ Error from the run, Results object]\n\t\tdebug('results [%d]: %j', results.length, results);\n\n\t\tresults = results.map(function(item, idx) {\n\t\t\tvar error = item[0],\n\t\t\t\tresult = item[1];\n\n\t\t\t// detect errors in run results (issue #380)\n\t\t\tif (error instanceof Error) {\n\t\t\t\tdebug('Run #%d did not complete - err #%d', idx + 1, error.message);\n\t\t\t\terr = error.message;\n\t\t\t}\n\n\t\t\t// return results wrapper (if possible) - #528\n\t\t\treturn result;\n\t\t});\n\n\t\t// filter out \"broken\" results (issue #366)\n\t\tresults = results.filter(function(item) {\n\t\t\treturn typeof item !== 'undefined';\n\t\t});\n\n\t\tdebug('err: %j', err);\n\n\t\t// this function is called when phantomas is done with all runs\n\t\tfunction doneFn() {\n\t\t\t// pass error code from PhantomJS process\n\t\t\tdebug('Exiting with code #%d', err || 0);\n\t\t\tprocess.exit(err);\n\t\t}\n\n\t\tif (typeof results[0] !== 'undefined') {\n\t\t\t// we have at least one result - reset the error flag when in multiple runs mode (#380)\n\t\t\tif (err > 250 && runs > 1) {\n\t\t\t\terr = null;\n\t\t\t}\n\n\t\t\t// process JSON results by reporters\n\t\t\tdebug('%d of %d run(s) completed with exit code #%d', results.length, runs, err || 0);\n\n\t\t\t// normalize results in a single run mode\n\t\t\tif (runs === 1) {\n\t\t\t\tresults = results[0];\n\t\t\t}\n\n\t\t\treporter = require('../core/reporter')(results, options);\n\n\t\t\tdebug('Calling a reporter...');\n\n\t\t\t// pass a function that reporter should call once done\n\t\t\tres = reporter.render(doneFn);\n\n\t\t\t// reporter returned results, otherwise wait for doneFn to be called by reporter\n\t\t\tif (typeof res !== 'undefined') {\n\t\t\t\tneedDrain = !process.stdout.write(res);\n\n\t\t\t\t// If a stream.write(chunk) call returns false, then the 'drain' event will indicate when it is appropriate to begin writing more data to the stream.\n\t\t\t\t// @see #596\n\t\t\t\tif (needDrain) {\n\t\t\t\t\tdebug('Need to wait for stdout to be fully flushed...');\n\t\t\t\t\tprocess.stdout.on('drain', doneFn);\n\t\t\t\t} else {\n\t\t\t\t\tdoneFn();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdebug('Waiting for the results...');\n\t\t\t}\n\t\t} else {\n\t\t\tdoneFn();\n\t\t}\n\t}\n);\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/optimist-config-file.js":"/**\n * Extends optimist with support for JSON/YAML config file\n *\n * Pass a path to the config file using --config option\n *\n * @see https://github.com/substack/node-optimist\n * @see https://github.com/substack/minimist\n */\nvar debug = require('debug')('optimist:config'),\n\tfs = require('fs'),\n\toptimist = require('optimist')(process.argv.slice(2)),\n\tansistyles = require('ansistyles'),\n\tyaml = require('js-yaml');\n\nfunction parseConfigFile(configFileName) {\n\tvar raw,\n\t\tconfigMode,\n\t\tconfigParsed;\n\n\tdebug('using \"%s\" config file', configFileName);\n\n\t// check the existance of the config file\n\tif (!fs.existsSync(configFileName)) {\n\t\tthrow 'Config file \"' + configFileName + '\" cannot be found!';\n\t}\n\n\t// JSON or YAML?\n\tconfigMode = /\\.yaml$/.test(configFileName) ? 'YAML' : 'JSON';\n\n\t// parse it\n\ttry {\n\t\traw = fs.readFileSync(configFileName).toString();\n\n\t\tswitch (configMode) {\n\t\t\tcase 'YAML':\n\t\t\t\tconfigParsed = yaml.safeLoad(raw);\n\t\t\t\tbreak;\n\n\t\t\tcase 'JSON':\n\t\t\t\tconfigParsed = JSON.parse(raw);\n\t\t\t\tbreak;\n\t\t}\n\t} catch (e) {\n\t\tdebug('%s config file parsing failed (%s)', configMode, e);\n\t\tthrow configMode + '%s config file parsing failed (' + e + ')';\n\t}\n\n\t// convert nested objects into options\n\t// {'foo':{'bar': 1}} -> --foo--bar 1\n\tObject.keys(configParsed).forEach(function(key) {\n\t\tvar value = configParsed[key];\n\n\t\tif (typeof value === 'object' && !Array.isArray(value)) {\n\t\t\tdelete configParsed[key];\n\n\t\t\t// remove plural suffix\n\t\t\tkey = key.replace(/s$/, '');\n\n\t\t\tdebug('unwrapping --%s-* options...', key);\n\n\t\t\tObject.keys(value).forEach(function(subKey) {\n\t\t\t\tconfigParsed[key + '-' + subKey] = value[subKey];\n\t\t\t});\n\t\t}\n\t});\n\n\tdebug('%s config file parsed: %j', configMode, configParsed);\n\treturn configParsed;\n}\n\n// extend optimist\nvar origParse = optimist.parse;\n\noptimist.parse = function(args) {\n\tvar options = origParse(args);\n\tdebug('parse: %j', args);\n\n\t// check the config file\n\tvar configFileName = this.configFileParam && options[this.configFileParam],\n\t\tconfigParsed;\n\n\t// if --config is not provided, quit\n\tif (!configFileName) {\n\t\tdebug('options: %j', options);\n\t\treturn options;\n\t}\n\n\tconfigParsed = parseConfigFile(configFileName);\n\n\t// apply the rest of the options provided via command line\n\tObject.keys(configParsed).forEach(function(key) {\n\t\t// check if given option was not provided via command line\n\t\tif (args.indexOf('--' + key) > -1) {\n\t\t\tdebug('--%s option provided via command line, will skip the value from config file', key);\n\t\t\treturn;\n\t\t}\n\n\t\toptions[key] = configParsed[key];\n\t});\n\n\t// cleanup\n\tdelete options[this.configFileParam];\n\n\tdebug('options: %j', options);\n\treturn options;\n};\n\noptimist.setConfigFile = function(configFileParam) {\n\tthis.configFileParam = configFileParam;\n\treturn this;\n};\n\nvar _describe = optimist.describe,\n\t_help = optimist.help,\n\theaders = [],\n\tnextHeader;\n\noptimist.header = function(s) {\n\tnextHeader = s;\n\treturn this;\n};\noptimist.describe = function(opt) {\n\tif (nextHeader) {\n\t\theaders.push({\n\t\t\tlabel: nextHeader,\n\t\t\tbefore: opt\n\t\t});\n\t\tnextHeader = null;\n\t}\n\treturn _describe.apply(optimist, arguments);\n};\noptimist.help = function() {\n\tvar text = _help.apply(optimist, arguments),\n\t\ti, s, p, opt_header = \"\\nOptions:\",\n\t\topt_header_len = opt_header.length;\n\t//console.log(text,headers);\n\tfor (i = 0; i < headers.length; i++) {\n\t\ts = \"\\n  --\" + headers[i].before;\n\t\tp = text.indexOf(s);\n\t\tif (p != -1) {\n\t\t\ts = \"\\n\" + ansistyles.bright(headers[i].label) + \":\";\n\t\t\ttext = text.substr(0, p) + s + text.substr(p);\n\t\t\tif (text.substr(p - opt_header_len, opt_header_len) == opt_header) {\n\t\t\t\ttext = text.substr(0, p - opt_header_len) + text.substr(p);\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n};\n\nmodule.exports = optimist;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/engines/webkit.js":"/**\n * Defines PhantomJS 2.x engine\n *\n * @see https://github.com/macbre/phantomas/issues/488\n */\nvar pkg = require('phantomjs-prebuilt');\n\nmodule.exports = {\n\tname: 'PhantomJS',\n\tengine: 'webkit',\n\tpath: pkg.path,\n\tversion: pkg.version,\n\tgetUserAgent: function() {\n\t\treturn 'PhantomJS/' + pkg.version\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/engines/gecko.js":"/**\n * Defines SlimerJS engine\n */\nvar pkg = require('slimerjs'),\n\tdebug = require('debug')('phantomas:slimerjs'),\n\tspawn = require('child_process').spawn;\n\nmodule.exports = {\n\tname: 'SlimerJS',\n\tengine: 'gecko',\n\tpath: pkg.path,\n\tversion: pkg.version,\n\tgetUserAgent: function() {\n\t\treturn 'SlimerJS/' + pkg.version\n\t},\n\tspawn: function(path, engineArgs) {\n\t\t// xvfb arguments\n\t\tvar args = [\n\t\t\t'--auto-servernum',\n\t\t\t'--server-num=1',\n\t\t\t//'--server-args=\\':1 -noreset -screen 1 1600x1200x24\\''\n\t\t];\n\n\t\t// SlimerJS binary\n\t\targs.push(path);\n\n\t\t// filter out --ssl-protocol option\n\t\t// supoorted by PhantomJS, but not by SlimerJS\n\t\tengineArgs = engineArgs.filter(function(opt) {\n\t\t\treturn (opt.indexOf('--ssl-protocol=') === 0) ? false /* remove */ : true;\n\t\t});\n\n\t\t// pass runner and phantomas options\n\t\targs = args.concat(engineArgs);\n\n\t\tdebug('xvfb-run %s', args.join(' '));\n\n\t\t// spawn SlimerJS using xvfb\n\t\t//\n\t\t// sudo aptitude install xvfb libasound2 libgtk2.0-0\n\t\t//\n\t\t// @see https://gist.github.com/macbre/e7e2e35caf9d91af5ecf\n\t\treturn spawn('xvfb-run', args, {\n\t\t\tenv: process.env\n\t\t});\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/ipc.js":"/**\n * Simple IPC implementation using JSON-encoded messages sent over stdout stream\n *\n * Implements consumer of the data (for nodejs environment)\n */\n'use strict';\n\nvar debug = require('debug')('phantomas:ipc'),\n\temitter = require('events').EventEmitter,\n\tSEPARATOR = \"\\xFF\\xFF\";\n\nfunction ipc(stream) {\n\t/* jshint validthis: true */\n\tthis.stream = stream;\n\tthis.events = new emitter();\n\n\tthis.init();\n}\n\nipc.prototype.setEventEmitter = function(emitter) {\n\tthis.events = emitter;\n};\n\nipc.prototype.init = function() {\n\tvar self = this,\n\t\tbuffer = '';\n\n\tthis.stream.on('data', function(data) {\n\t\tbuffer += data.toString().trim();\n\n\t\t// check for the separator at the of the buffer - parse the data\n\t\tif (buffer.substr(-2) === SEPARATOR) {\n\t\t\tself.parse(buffer);\n\t\t\tbuffer = '';\n\t\t}\n\t});\n};\n\nipc.prototype.parse = function(data) {\n\t// split by separator\n\tdata.split(SEPARATOR).forEach(function(msg) {\n\t\tmsg = msg.trim();\n\n\t\tif (msg === '') return;\n\n\t\ttry {\n\t\t\tmsg = JSON.parse(msg);\n\t\t\tdebug('%s: %j', msg.event, msg.data);\n\n\t\t\t// send event name and the rest of the data\n\t\t\tvar args = msg.data;\n\t\t\targs.unshift(msg.event);\n\n\t\t\tthis.events.emit.apply(this.events, args);\n\n\t\t\t// send generic \"_msg\" event for each message received (issue #354)\n\t\t\tthis.events.emit('_msg', args);\n\t\t} catch (e) {\n\t\t\t// send PhantomJS errors to stderr to ease debugging of issues like #302\n\t\t\tdebug('message parsing failed: \"%s\"', msg);\n\t\t\tprocess.stderr.write(msg + \"\\n\");\n\t\t}\n\t}, this);\n};\n\nipc.prototype.on = function(event, fn) {\n\tthis.events.on(event, fn);\n};\n\nmodule.exports = ipc;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/formatter.js":"/**\n * Generic JSON results formatter\n */\n'use strict';\n\nmodule.exports = function(results) {\n\tvar res = {\n\t\tgenerator: results.getGenerator(),\n\t\turl: results.getUrl(),\n\t\tmetrics: results.getMetrics(),\n\t\toffenders: results.getAllOffenders(),\n\t\tasserts: false\n\t};\n\n\t// add asserts\n\tvar asserts = results.getAsserts();\n\n\tif (Object.keys(asserts).length > 0) {\n\t\tres.asserts = asserts;\n\t}\n\n\treturn JSON.stringify(res);\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/ipc.js":"/**\n * Simple IPC implementation using JSON-encoded messages sent over stdout stream\n *\n * Implements producer of the data (for PhantomJS environment)\n */\n'use strict';\n\nvar stream = require('system').stdout,\n\tSEPARATOR = \"\\xFF\\xFF\";\n\nfunction ipc(event) {\n\t/* jshint validthis: true */\n\tthis.event = event;\n}\n\nipc.prototype.push = function() {\n\tstream.writeLine(JSON.stringify({\n\t\tevent: this.event,\n\t\tdata: Array.prototype.slice.apply(arguments)\n\t}));\n\tstream.writeLine(SEPARATOR);\n};\n\nmodule.exports = ipc;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/logger.js":"/**\n * Simple logger (using both file and console)\n */\n'use strict';\n\nmodule.exports = function(logFile, params) {\n\tvar colors = require('../lib/ansicolors'),\n\t\tstyles = require('ansistyles'),\n\t\tfs = require('fs'),\n\t\tipc = new(require('./ipc'))('log'),\n\t\tbeVerbose = params.beVerbose === true,\n\t\tbeSilent = params.beSilent === true,\n\t\tstream;\n\n\tif (logFile !== '') {\n\t\t// use an absolute path\n\t\tlogFile = fs.absolute(logFile);\n\t\tlog(\"Logging to \" + logFile);\n\n\t\t// set up a stream to be used for logging\n\t\tstream = fs.open(logFile, 'w');\n\t}\n\n\tfunction echo(msg) {\n\t\tif (!beSilent) {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\tfunction log(msg) {\n\t\tvar ts = (new Date()).toJSON().substr(11, 12);\n\n\t\t// format a message\n\t\tmsg = (typeof msg === 'object') ? JSON.stringify(msg) : msg.toString().trim();\n\n\t\t// log to the console (--verbose)\n\t\tif (beVerbose) {\n\t\t\tvar consoleMsg = msg;\n\n\t\t\t// error!\n\t\t\tif (/!$/.test(consoleMsg) || /Error:/.test(consoleMsg)) {\n\t\t\t\tconsoleMsg = colors.brightRed(styles.bright(consoleMsg));\n\t\t\t}\n\t\t\t// label: message\n\t\t\telse if (/^(.*): /.test(consoleMsg)) {\n\t\t\t\tvar idx = consoleMsg.indexOf(': ') + 1;\n\t\t\t\tconsoleMsg = colors.brightGreen(consoleMsg.substr(0, idx)) + colors.brightBlack(consoleMsg.substr(idx));\n\t\t\t}\n\t\t\t// the rest\n\t\t\telse {\n\t\t\t\tconsoleMsg = colors.brightBlack(consoleMsg);\n\t\t\t}\n\n\t\t\tif (!beSilent) {\n\t\t\t\tipc.push(ts + ' ' + consoleMsg);\n\t\t\t}\n\t\t}\n\n\t\t// log to the file (--log)\n\t\tif (stream) {\n\t\t\tstream.writeLine(ts + ': ' + msg);\n\t\t\tstream.flush();\n\t\t}\n\t}\n\n\t// public API\n\treturn {\n\t\techo: echo,\n\t\tlog: log\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/pads.js":"/**\n * Helper functions for string formatting\n */\n'use strict';\n\nfunction lpad(str, len) {\n\tvar fill;\n\tstr = typeof str !== 'undefined' ? str : '-';\n\n\tfill = new Array(Math.max(1, len - str.toString().length + 1)).join(' ');\n\treturn fill + str;\n}\n\nfunction rpad(str, len) {\n\tvar fill;\n\tstr = typeof str !== 'undefined' ? str : '-';\n\n\tfill = new Array(Math.max(1, len - str.toString().length + 1)).join(' ');\n\treturn str + fill;\n}\n\nexports.lpad = lpad;\nexports.rpad = rpad;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/reporter.js":"/**\n * Reporters factory\n *\n * All reporters are defined in /reporters directory\n * and are provided with run results and command line options\n */\n'use strict';\n\n//convenience function to hide the dirty import logic\nfunction _requireReporter(reporterName) {\n\tvar reporter,\n\t\treporterPath = 'phantomas-reporter-' + reporterName;\n\n\ttry {\n\t\treporter = require(reporterPath);\n\t} catch (ex) {\n\t\t//external reporter doesn't exist yet, try as a \"local\" reporter\n\t\treporterPath = '../reporters/' + reporterName;\n\t\treporter = require(reporterPath);\n\t}\n\n\treturn reporter;\n}\n\n\nmodule.exports = function(results, options) {\n\tvar debug = require('debug')('phantomas:reporter'),\n\t\treporterName,\n\t\treporterOptions,\n\t\treporter,\n\t\tinMultipleMode = false;\n\n\t// parse reporter options, examples:\n\t// -R plain\n\t// -R csv\n\t// -R csv:no-header:url:timestamp\n\treporterOptions = (options.reporter + '').split(':');\n\treporterName = reporterOptions.shift();\n\n\t// allow access to options via object.key (for non-numeric values)\n\treporterOptions.forEach(function(option) {\n\t\tif (!parseInt(option)) {\n\t\t\treporterOptions[option] = true;\n\t\t}\n\t});\n\n\tdebug('Setting up %s reporter (options: %j)...', reporterName, reporterOptions);\n\n\tif (Array.isArray(results)) {\n\t\tdebug('Multiple runs mode');\n\t\tinMultipleMode = true;\n\t}\n\n\ttry {\n\t\treporter = new(_requireReporter(reporterName))(results, reporterOptions, options);\n\t} catch (ex) {\n\t\tdebug('Failed: %s', ex);\n\t\tthrow new Error('Reporter \"' + reporterName + '\" is not supported!');\n\t}\n\n\t// check handling of multiple runs results\n\tif (inMultipleMode && reporter.handlesMultiple !== true) {\n\t\tthrow 'Reporter \"' + reporterName + '\" does not handle multiple runs!';\n\t}\n\n\tdebug('Done');\n\n\t// public interface\n\treturn {\n\t\trender: function(doneFn) {\n\t\t\treturn reporter.render(doneFn);\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/results.js":"/**\n * Simple results wrapper\n *\n * Will be passed via events and to formatters\n */\n'use strict';\n\nmodule.exports = function(data) {\n\tvar asserts = {},\n\t\tgenerator = '',\n\t\tmetrics = {},\n\t\toffenders = {},\n\t\turl;\n\n\tif (data) {\n\t\tasserts = data.asserts || {};\n\t\tgenerator = data.generator;\n\t\tmetrics = data.metrics;\n\t\toffenders = data.offenders;\n\t\turl = data.url;\n\t}\n\n\t// public API\n\treturn {\n\t\t// metrics\n\t\tsetMetric: function(metricName, value) {\n\t\t\tmetrics[metricName] = value;\n\n\t\t\t// make the order of offenders match the order of metrics\n\t\t\tif (typeof offenders[metricName] === 'undefined') {\n\t\t\t\toffenders[metricName] = undefined;\n\t\t\t}\n\t\t},\n\t\tgetMetric: function(name) {\n\t\t\treturn metrics[name];\n\t\t},\n\t\tgetMetrics: function() {\n\t\t\treturn metrics;\n\t\t},\n\t\tgetMetricsNames: function() {\n\t\t\treturn Object.keys(metrics);\n\t\t},\n\n\t\t// offenders\n\t\taddOffender: function(metricName, msg) {\n\t\t\tif (typeof offenders[metricName] === 'undefined') {\n\t\t\t\toffenders[metricName] = [];\n\t\t\t}\n\n\t\t\toffenders[metricName].push(msg);\n\t\t},\n\n\t\tgetOffenders: function(metricName) {\n\t\t\treturn offenders[metricName];\n\t\t},\n\n\t\tgetAllOffenders: function() {\n\t\t\treturn offenders;\n\t\t},\n\n\t\t// set URL report was generated for\n\t\tsetUrl: function(val) {\n\t\t\turl = val;\n\t\t},\n\t\tgetUrl: function() {\n\t\t\treturn url;\n\t\t},\n\n\t\t// generator - phantomas vX.X.X\n\t\tsetGenerator: function(val) {\n\t\t\tgenerator = val;\n\t\t},\n\t\tgetGenerator: function() {\n\t\t\treturn generator;\n\t\t},\n\n\t\t// asserts handling\n\t\tsetAssert: function(metric, val) {\n\t\t\tasserts[metric] = val;\n\t\t},\n\t\tsetAsserts: function(val) {\n\t\t\tasserts = val || {};\n\t\t},\n\t\tgetAsserts: function() {\n\t\t\treturn asserts;\n\t\t},\n\t\thasAssertion: function(metric) {\n\t\t\treturn typeof asserts[metric] !== 'undefined';\n\t\t},\n\t\tgetAssertion: function(metric) {\n\t\t\treturn asserts[metric];\n\t\t},\n\n\t\t// assertions\n\t\tassert: function(metric) {\n\t\t\tvar expected = this.getAssertion(metric),\n\t\t\t\tval = this.getMetric(metric);\n\n\t\t\tif (!this.hasAssertion(metric) || typeof val === 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn (typeof val === 'number') ? val <= expected : true;\n\t\t},\n\t\tgetFailedAsserts: function() {\n\t\t\treturn this.getMetricsNames().filter(function(metric) {\n\t\t\t\treturn this.assert(metric) === false;\n\t\t\t}, this);\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/scope.js":"/**\n * phantomas browser \"scope\" with helper code\n *\n * Code below is executed in page's \"scope\" (injected by onInitialized() in core/phantomas.js)\n */\n(function(scope) {\n\t'use strict';\n\n\t// create a scope\n\tvar phantomas = (scope.__phantomas = scope.__phantomas || {});\n\n\t// keep the original JSON functions (#482)\n\tphantomas.JSON = {\n\t\tparse: JSON.parse,\n\t\tstringify: JSON.stringify\n\t};\n\n\t// NodeRunner\n\tvar nodeRunner = function() {\n\t\t// \"Beep, Beep\"\n\t};\n\n\tnodeRunner.prototype = {\n\t\t// call callback for each child of node\n\t\twalk: function(node, callback, depth) {\n\t\t\tif (this.isSkipped(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar childNode,\n\t\t\t\tchildNodes = node && node.childNodes || [];\n\n\t\t\tdepth = (depth || 1);\n\n\t\t\tfor (var n = 0, len = childNodes.length; n < len; n++) {\n\t\t\t\tchildNode = childNodes[n];\n\n\t\t\t\t// callback can return false to stop recursive\n\t\t\t\tif (callback(childNode, depth) !== false) {\n\t\t\t\t\tthis.walk(childNode, callback, depth + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// override this function when you create an object of class phantomas.nodeRunner\n\t\t// by default only iterate over HTML elements\n\t\tisSkipped: function(node) {\n\t\t\treturn !node || (node.nodeType !== Node.ELEMENT_NODE);\n\t\t}\n\t};\n\n\t// for backtraces\n\t(function() {\n\t\t// @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\n\t\tfunction getStackFromError(e) {\n\t\t\tvar stack = e.stack.trim().split(\"\\n\").\n\t\t\tmap(function(item) {\n\t\t\t\treturn item.replace(/^(\\s+at\\s|@)/, '').trim();\n\t\t\t}).\n\t\t\tfilter(function(item) {\n\t\t\t\treturn /:\\d+\\)?$/.test(item);\n\t\t\t});\n\n\t\t\t//console.log(stack);\n\t\t\treturn stack;\n\t\t}\n\n\t\tfunction getBacktrace() {\n\t\t\tvar stack = [];\n\n\t\t\ttry {\n\t\t\t\tthrow new Error('backtrace');\n\t\t\t} catch (e) {\n\t\t\t\tstack = getStackFromError(e).slice(3);\n\t\t\t}\n\n\t\t\treturn stack.join(' / ');\n\t\t}\n\n\t\tfunction getCaller(stepBack) {\n\t\t\tvar caller = false;\n\n\t\t\tstepBack = stepBack || 0;\n\n\t\t\ttry {\n\t\t\t\tthrow new Error('backtrace');\n\t\t\t} catch (e) {\n\t\t\t\tcaller = getStackFromError(e)[3 + stepBack];\n\t\t\t}\n\n\t\t\treturn caller;\n\t\t}\n\n\t\tphantomas.getBacktrace = getBacktrace;\n\t\tphantomas.getCaller = getCaller;\n\t})();\n\n\t// communication with phantomas core\n\t(function() {\n\t\tvar stringify = JSON.stringify,\n\t\t\torigConsoleLog = console.log;\n\n\t\t// overrride console.log (issue #69)\n\t\tconsole.log = function() {\n\t\t\t// pass all arguments as an array, let phantomas format them\n\t\t\t// @see https://developer.mozilla.org/en-US/docs/Web/API/console\n\n\t\t\t// avoid 'TypeError: JSON.stringify cannot serialize cyclic structures.'\n\t\t\ttry {\n\t\t\t\torigConsoleLog.call(console, 'log:' + stringify(Array.prototype.slice.call(arguments)));\n\t\t\t} catch (e) {}\n\t\t};\n\n\t\tfunction sendMsg(type, data) {\n\t\t\t// @see https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#oncallback\n\t\t\t// Stability: EXPERIMENTAL - see issue #62\n\t\t\t/**\n\t\t\tif (typeof window.callPhantom === 'function') {\n\t\t\t\twindow.callPhantom({type: type, data: data});\n\t\t\t}\n\t\t\t**/\n\n\t\t\ttry {\n\t\t\t\t// Prototype 1.6 (and Mootools 1.2 too) creates an Array.prototype.toJSON - issue #482\n\t\t\t\t// @see http://stackoverflow.com/questions/710586/json-stringify-array-bizarreness-with-prototype-js\n\t\t\t\tArray.prototype.toJSON = undefined;\n\n\t\t\t\torigConsoleLog.call(console, 'msg:' + stringify({\n\t\t\t\t\ttype: type || false,\n\t\t\t\t\tdata: data || false\n\t\t\t\t}));\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error('phantomas: calling native console.log() failed (\"' + e + '\")!');\n\t\t\t}\n\t\t}\n\n\t\tfunction log() {\n\t\t\tsendMsg('log', Array.prototype.slice.apply(arguments));\n\t\t}\n\n\t\tfunction setMetric(name, value, isFinal) {\n\t\t\tsendMsg('setMetric', {\n\t\t\t\tname: name,\n\t\t\t\tvalue: (typeof value !== 'undefined') ? value : 0,\n\t\t\t\tisFinal: isFinal === true\n\t\t\t});\n\t\t}\n\n\t\tfunction incrMetric(name, incr /* =1 */ ) {\n\t\t\tsendMsg('incrMetric', {\n\t\t\t\tname: name,\n\t\t\t\tincr: incr || 1\n\t\t\t});\n\t\t}\n\n\t\tfunction addToAvgMetric(name, value) {\n\t\t\tsendMsg('addToAvgMetric', {\n\t\t\t\tname: name,\n\t\t\t\tvalue: value\n\t\t\t});\n\t\t}\n\n\t\tfunction setMarkerMetric(name) {\n\t\t\tsendMsg('setMarkerMetric', {\n\t\t\t\tname: name\n\t\t\t});\n\t\t}\n\n\t\tfunction addOffender( /*metricName, msg, ...*/ ) {\n\t\t\tsendMsg('addOffender', Array.prototype.slice.apply(arguments));\n\t\t}\n\n\t\tfunction emit( /* eventName, arg1, arg2, ... */ ) {\n\t\t\tsendMsg('emit', Array.prototype.slice.apply(arguments));\n\t\t}\n\n\t\t// exports\n\t\tphantomas.log = log;\n\t\tphantomas.setMetric = setMetric;\n\t\tphantomas.incrMetric = incrMetric;\n\t\tphantomas.addToAvgMetric = addToAvgMetric;\n\t\tphantomas.setMarkerMetric = setMarkerMetric;\n\t\tphantomas.addOffender = addOffender;\n\t\tphantomas.emit = emit;\n\t})();\n\n\t/**\n\t * Proxy function to be used to track calls to native DOM functions\n\t *\n\t * Callback is provided with arguments original function was called with\n\t *\n\t * Example:\n\t *\n\t *   window.__phantomas.proxy(window.document, 'getElementById', function() {\n\t *     // ...\n\t *   });\n\t */\n\t(function() {\n\t\tvar enabled = true;\n\n\t\t// turn off spying to not include internal phantomas actions\n\t\tfunction spyEnabled(state, reason) {\n\t\t\tenabled = (state === true);\n\n\t\t\tphantomas.log('Spying ' + (enabled ? 'enabled' : 'disabled') + (reason ? ' - ' + reason : ''));\n\t\t}\n\n\t\t// pass reportResults = true to prepend arguments passed to callback\n\t\t// with the result of call to the original function - issue #420\n\t\tfunction spy(obj, fn, callback, reportResults) {\n\t\t\tvar origFn = obj && obj[fn];\n\n\t\t\tif (typeof origFn !== 'function') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tphantomas.log('spy: attaching to \"%s\" function%s', fn, (reportResults ? ' with results reporting' : ''));\n\n\t\t\tobj[fn] = function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments),\n\t\t\t\t\tresults = origFn.apply(this, args);\n\n\t\t\t\tif (enabled && typeof callback === 'function') {\n\t\t\t\t\tcallback.apply(this, (reportResults === true) ? [results].concat(args) : args);\n\t\t\t\t}\n\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// copy custom properties of original function to the mocked one\n\t\t\tObject.keys(origFn).forEach(function(key) {\n\t\t\t\tobj[fn][key] = origFn[key];\n\t\t\t});\n\n\t\t\tobj[fn].prototype = origFn.prototype;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tvar spiedGlobals = {};\n\n\t\t// call given callback when \"varName\" global variable is being defined\n\t\t// used by jQuery module\n\t\tfunction spyGlobalVar(varName, callback) {\n\t\t\tphantomas.log('spy: attaching to %s global variable', varName);\n\n\t\t\twindow.__defineSetter__(varName, function(val) {\n\t\t\t\tphantomas.log('spy: %s global variable has been defined', varName);\n\n\t\t\t\tspiedGlobals[varName] = val;\n\t\t\t\tcallback(val);\n\t\t\t});\n\n\t\t\twindow.__defineGetter__(varName, function() {\n\t\t\t\treturn spiedGlobals[varName];\n\t\t\t});\n\n\t\t}\n\n\t\t// exports\n\t\tphantomas.spy = spy;\n\t\tphantomas.spyGlobalVar = spyGlobalVar;\n\t\tphantomas.spyEnabled = spyEnabled;\n\t})();\n\n\t/**\n\t * Returns \"DOM path\" to a given node (starting from <body> down to the node)\n\t *\n\t * Example: body.logged_out.vis-public.env-production > div > div\n\t */\n\tfunction getDOMPath(node, dontGoUpTheDom /* = false */ ) {\n\t\tvar path = [],\n\t\t\tentry = '';\n\n\t\tif (node === window) {\n\t\t\treturn 'window';\n\t\t}\n\n\t\twhile (node instanceof Node) {\n\t\t\t// div\n\t\t\tentry = node.nodeName.toLowerCase();\n\n\t\t\t// shorten the path a bit\n\t\t\tif (['body', 'head', 'html'].indexOf(entry) > -1) {\n\t\t\t\tpath.push(entry);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (node instanceof DocumentFragment) {\n\t\t\t\tentry = 'DocumentFragment';\n\t\t\t}\n\n\t\t\t// div#foo\n\t\t\tif (node.id && node.id !== '') {\n\t\t\t\tentry += '#' + node.id;\n\t\t\t}\n\t\t\t// div#foo.bar.test\n\t\t\telse if (typeof node.className === 'string' && node.className !== '') {\n\t\t\t\tentry += '.' + node.className.trim().replace(/\\s+/g, '.');\n\t\t\t}\n\t\t\t// div[0] <- index of child node\n\t\t\telse if (node.parentNode instanceof Node) {\n\t\t\t\tentry += '[' + Math.max(0, Array.prototype.indexOf.call(node.parentNode.children || node.parentNode.childNodes, node)) + ']';\n\t\t\t}\n\n\t\t\tpath.push(entry);\n\n\t\t\tif (dontGoUpTheDom === true) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// go up the DOM\n\t\t\tnode = node && node.parentNode;\n\t\t}\n\n\t\treturn (path.length > 0) ? path.reverse().join(' > ') : false;\n\t}\n\n\t// exports\n\tphantomas.getDOMPath = getDOMPath;\n\tphantomas.nodeRunner = nodeRunner;\n\n\tphantomas.log('phantomas scope injected');\n})(window);\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/ansicolors.js":"/**\n * A simple wrapper for ansicolors npm module\n *\n * Makes it noop when the stdout is not a TTY\n */\n'use strict';\n\nvar colors = require('ansicolors'),\n\tkeys = Object.keys(colors),\n\tdisableColors;\n\nif (typeof process !== 'undefined' && typeof process.stdout !== 'undefined') {\n\t// nodejs\n\tdisableColors = !!process.env.BW;\n} else {\n\t// PhantomJS\n\tdisableColors = !!(require('system').env.BW);\n}\n\nfunction nop(str) {\n\treturn str;\n}\n\nfunction disable() {\n\tkeys.forEach(function(key) {\n\t\tcolors[key] = nop;\n\t});\n}\n\nif (disableColors) {\n\tdisable();\n}\n\n// expose disable() function\ncolors.disable = disable;\n\nmodule.exports = colors;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/collection.js":"/**\n * Push items and count them\n */\n'use strict';\n\nfunction collection() {\n\t/* jshint validthis: true */\n\tthis.items = {};\n}\n\ncollection.prototype = {\n\tpush: function(item) {\n\t\tif (typeof this.items[item] === 'undefined') {\n\t\t\tthis.items[item] = {\n\t\t\t\tcnt: 1\n\t\t\t};\n\t\t} else {\n\t\t\tthis.items[item].cnt++;\n\t\t}\n\t},\n\n\tsort: function() {\n\t\tvar newItems = {},\n\t\t\tsortedKeys;\n\n\t\t// sort in descending order (by cnt)\n\t\tsortedKeys = Object.keys(this.items).sort((function(a, b) {\n\t\t\treturn this.items[b].cnt - this.items[a].cnt;\n\t\t}).bind(this));\n\n\t\t// build new items dictionary\n\t\tsortedKeys.forEach(function(key) {\n\t\t\tnewItems[key] = this.items[key];\n\t\t}, this);\n\n\t\tthis.items = newItems;\n\t\treturn this;\n\t},\n\n\tforEach: function(callback) {\n\t\tObject.keys(this.items).forEach(function(key) {\n\t\t\tcallback(key, this.items[key].cnt);\n\t\t}, this);\n\t},\n\n\thas: function(item) {\n\t\treturn (typeof this.items[item] !== 'undefined');\n\t},\n\n\tgetLength: function() {\n\t\treturn Object.keys(this.items).length;\n\t}\n};\n\nmodule.exports = collection;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/fast-stats.js":"/* jshint -W004: false, -W014: false, -W041: false */\n/**\n * Taken from https://github.com/bluesmoon/node-faststats\n */\n\n/*\nNote that if your data is too large, there _will_ be overflow.\n*/\n\n\nfunction asc(a, b) {\n\treturn a - b;\n}\n\nvar config_params = {\n\tbucket_precision: function(o, s) {\n\t\tif (typeof s != \"number\" || s <= 0) {\n\t\t\tthrow new Error(\"bucket_precision must be a positive number\");\n\t\t}\n\t\to._config.bucket_precision = s;\n\t\to.buckets = [];\n\t},\n\n\tbuckets: function(o, b) {\n\t\tif (!Array.isArray(b) || b.length == 0) {\n\t\t\tthrow new Error(\"buckets must be an array of bucket limits\");\n\t\t}\n\n\t\to._config.buckets = b;\n\t\to.buckets = [];\n\t},\n\n\tbucket_extension_interval: function(o, s) {\n\t\tif (s === undefined)\n\t\t\treturn;\n\t\tif (typeof s != \"number\" || s <= 0) {\n\t\t\tthrow new Error(\"bucket_extension_interval must be a positive number\");\n\t\t}\n\t\to._config.bucket_extension_interval = s;\n\t},\n\n\tstore_data: function(o, s) {\n\t\tif (typeof s != \"boolean\") {\n\t\t\tthrow new Error(\"store_data must be a true or false\");\n\t\t}\n\t\to._config.store_data = s;\n\t},\n\n\tsampling: function(o, s) {\n\t\tif (typeof s != \"boolean\") {\n\t\t\tthrow new Error(\"sampling must be a true or false\");\n\t\t}\n\t\to._config.sampling = s;\n\t}\n};\n\nfunction Stats(c) {\n\tthis._config = {\n\t\tstore_data: true\n\t};\n\n\tif (c) {\n\t\tfor (var k in config_params) {\n\t\t\tif (c.hasOwnProperty(k)) {\n\t\t\t\tconfig_params[k](this, c[k]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.reset();\n\n\treturn this;\n}\n\nStats.prototype = {\n\n\treset: function() {\n\t\tif (this._config.store_data)\n\t\t\tthis.data = [];\n\n\t\tthis.length = 0;\n\n\t\tthis.sum = 0;\n\t\tthis.sum_of_squares = 0;\n\t\tthis.sum_of_logs = 0;\n\t\tthis.sum_of_square_of_logs = 0;\n\t\tthis.zeroes = 0;\n\t\tthis.max = this.min = null;\n\n\t\tthis._reset_cache();\n\n\t\treturn this;\n\t},\n\n\t_reset_cache: function() {\n\t\tthis._stddev = null;\n\n\t\tif (this._config.store_data)\n\t\t\tthis._data_sorted = null;\n\t},\n\n\t_find_bucket: function(a) {\n\t\tvar b = 0,\n\t\t\te, l;\n\t\tif (this._config.buckets) {\n\t\t\tl = this._config.buckets.length;\n\t\t\tif (this._config.bucket_extension_interval && a >= this._config.buckets[l - 1]) {\n\t\t\t\te = a - this._config.buckets[l - 1];\n\t\t\t\tb = parseInt(e / this._config.bucket_extension_interval) + l;\n\t\t\t\tif (this._config.buckets[b] === undefined)\n\t\t\t\t\tthis._config.buckets[b] = this._config.buckets[l - 1] + (parseInt(e / this._config.bucket_extension_interval) + 1) * this._config.bucket_extension_interval;\n\t\t\t\tif (this._config.buckets[b - 1] === undefined)\n\t\t\t\t\tthis._config.buckets[b - 1] = this._config.buckets[l - 1] + parseInt(e / this._config.bucket_extension_interval) * this._config.bucket_extension_interval;\n\t\t\t}\n\t\t\tfor (; b < l; b++) {\n\t\t\t\tif (a < this._config.buckets[b]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this._config.bucket_precision) {\n\t\t\tb = Math.floor(a / this._config.bucket_precision);\n\t\t}\n\n\t\treturn b;\n\t},\n\n\t_add_cache: function(a) {\n\t\tvar tuple = [1],\n\t\t\ti;\n\t\tif (a instanceof Array) {\n\t\t\ttuple = a;\n\t\t\ta = tuple.shift();\n\t\t}\n\n\t\tthis.sum += a * tuple[0];\n\t\tthis.sum_of_squares += a * a * tuple[0];\n\t\tif (a === 0) {\n\t\t\tthis.zeroes++;\n\t\t} else {\n\t\t\tthis.sum_of_logs += Math.log(a) * tuple[0];\n\t\t\tthis.sum_of_square_of_logs += Math.pow(Math.log(a), 2) * tuple[0];\n\t\t}\n\t\tthis.length += tuple[0];\n\n\t\tif (tuple[0] > 0) {\n\t\t\tif (this.max === null || this.max < a)\n\t\t\t\tthis.max = a;\n\t\t\tif (this.min === null || this.min > a)\n\t\t\t\tthis.min = a;\n\t\t}\n\n\t\tif (this.buckets) {\n\t\t\tvar b = this._find_bucket(a);\n\t\t\tif (!this.buckets[b])\n\t\t\t\tthis.buckets[b] = [0];\n\t\t\tthis.buckets[b][0] += tuple.shift();\n\n\t\t\tfor (i = 0; i < tuple.length; i++)\n\t\t\t\tthis.buckets[b][i + 1] = (this.buckets[b][i + 1] | 0) + (tuple[i] | 0);\n\t\t}\n\n\t\tthis._reset_cache();\n\t},\n\n\t_del_cache: function(a) {\n\t\tvar tuple = [1],\n\t\t\ti;\n\t\tif (a instanceof Array) {\n\t\t\ttuple = a;\n\t\t\ta = tuple.shift();\n\t\t}\n\n\t\tthis.sum -= a * tuple[0];\n\t\tthis.sum_of_squares -= a * a * tuple[0];\n\t\tif (a === 0) {\n\t\t\tthis.zeroes--;\n\t\t} else {\n\t\t\tthis.sum_of_logs -= Math.log(a) * tuple[0];\n\t\t\tthis.sum_of_square_of_logs -= Math.pow(Math.log(a), 2) * tuple[0];\n\t\t}\n\t\tthis.length -= tuple[0];\n\n\t\tif (this._config.store_data) {\n\t\t\tif (this.length === 0) {\n\t\t\t\tthis.max = this.min = null;\n\t\t\t}\n\t\t\tif (this.length === 1) {\n\t\t\t\tthis.max = this.min = this.data[0];\n\t\t\t} else if (tuple[0] > 0 && (this.max === a || this.min === a)) {\n\t\t\t\tvar i = this.length - 1;\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\tthis.max = this.min = this.data[i--];\n\t\t\t\t\twhile (i-- >= 0) {\n\t\t\t\t\t\tif (this.max < this.data[i])\n\t\t\t\t\t\t\tthis.max = this.data[i];\n\t\t\t\t\t\tif (this.min > this.data[i])\n\t\t\t\t\t\t\tthis.min = this.data[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.buckets) {\n\t\t\tvar b = this._find_bucket(a);\n\t\t\tif (this.buckets[b]) {\n\t\t\t\tthis.buckets[b][0] -= tuple.shift();\n\n\t\t\t\tif (this.buckets[b][0] === 0)\n\t\t\t\t\tdelete this.buckets[b];\n\t\t\t\telse\n\t\t\t\t\tfor (i = 0; i < tuple.length; i++)\n\t\t\t\t\t\tthis.buckets[b][i + 1] = (this.buckets[b][i + 1] | 0) - (tuple[i] | 0);\n\t\t\t}\n\t\t}\n\n\t\tthis._reset_cache();\n\t},\n\n\tpush: function() {\n\t\tvar i, a, args = Array.prototype.slice.call(arguments, 0);\n\t\tif (args.length && args[0] instanceof Array)\n\t\t\targs = args[0];\n\t\tfor (i = 0; i < args.length; i++) {\n\t\t\ta = args[i];\n\t\t\tif (this._config.store_data)\n\t\t\t\tthis.data.push(a);\n\t\t\tthis._add_cache(a);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tpush_tuple: function(tuple) {\n\t\tif (!this.buckets) {\n\t\t\tthrow new Error(\"push_tuple is only valid when using buckets\");\n\t\t}\n\t\tthis._add_cache(tuple);\n\t},\n\n\tpop: function() {\n\t\tif (this.length === 0 || this._config.store_data === false)\n\t\t\treturn undefined;\n\n\t\tvar a = this.data.pop();\n\t\tthis._del_cache(a);\n\n\t\treturn a;\n\t},\n\n\tremove_tuple: function(tuple) {\n\t\tif (!this.buckets) {\n\t\t\tthrow new Error(\"remove_tuple is only valid when using buckets\");\n\t\t}\n\t\tthis._del_cache(tuple);\n\t},\n\n\treset_tuples: function(tuple) {\n\t\tvar b, l, t, ts = tuple.length;\n\t\tif (!this.buckets) {\n\t\t\tthrow new Error(\"reset_tuple is only valid when using buckets\");\n\t\t}\n\n\t\tfor (b = 0, l = this.buckets.length; b < l; b++) {\n\t\t\tif (!this.buckets[b] || this.buckets[b].length <= 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (t = 0; t < ts; t++) {\n\t\t\t\tif (typeof tuple[t] !== 'undefined') {\n\t\t\t\t\tthis.buckets[b][t] = tuple[t];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tunshift: function() {\n\t\tvar i, a, args = Array.prototype.slice.call(arguments, 0);\n\t\tif (args.length && args[0] instanceof Array)\n\t\t\targs = args[0];\n\t\ti = args.length;\n\t\twhile (i--) {\n\t\t\ta = args[i];\n\t\t\tif (this._config.store_data)\n\t\t\t\tthis.data.unshift(a);\n\t\t\tthis._add_cache(a);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tshift: function() {\n\t\tif (this.length === 0 || this._config.store_data === false)\n\t\t\treturn undefined;\n\n\t\tvar a = this.data.shift();\n\t\tthis._del_cache(a);\n\n\t\treturn a;\n\t},\n\n\tamean: function() {\n\t\tif (this.length === 0)\n\t\t\treturn NaN;\n\t\treturn this.sum / this.length;\n\t},\n\n\tgmean: function() {\n\t\tif (this.length === 0)\n\t\t\treturn NaN;\n\t\tif (this.zeroes > 0)\n\t\t\treturn NaN;\n\t\treturn Math.exp(this.sum_of_logs / this.length);\n\t},\n\n\tstddev: function() {\n\t\tif (this.length === 0)\n\t\t\treturn NaN;\n\t\tvar n = this.length;\n\t\tif (this._config.sampling)\n\t\t\tn--;\n\t\tif (this._stddev === null)\n\t\t\tthis._stddev = Math.sqrt((this.length * this.sum_of_squares - this.sum * this.sum) / (this.length * n));\n\n\t\treturn this._stddev;\n\t},\n\n\tgstddev: function() {\n\t\tif (this.length === 0)\n\t\t\treturn NaN;\n\t\tif (this.zeroes > 0)\n\t\t\treturn NaN;\n\t\tvar n = this.length;\n\t\tif (this._config.sampling)\n\t\t\tn--;\n\t\treturn Math.exp(Math.sqrt((this.length * this.sum_of_square_of_logs - this.sum_of_logs * this.sum_of_logs) / (this.length * n)));\n\t},\n\n\tmoe: function() {\n\t\tif (this.length === 0)\n\t\t\treturn NaN;\n\t\t// see http://en.wikipedia.org/wiki/Standard_error_%28statistics%29\n\t\treturn 1.96 * this.stddev() / Math.sqrt(this.length);\n\t},\n\n\trange: function() {\n\t\tif (this.length === 0)\n\t\t\treturn [NaN, NaN];\n\t\treturn [this.min, this.max];\n\t},\n\n\tdistribution: function() {\n\t\tif (this.length === 0)\n\t\t\treturn [];\n\t\tif (!this.buckets)\n\t\t\tthrow new Error(\"bucket_precision or buckets not configured.\");\n\n\t\tvar d = [],\n\t\t\ti, j, k, l;\n\n\t\tif (this._config.buckets) {\n\t\t\tj = this.min;\n\t\t\tl = Math.min(this.buckets.length, this._config.buckets.length);\n\n\t\t\tfor (i = 0; i < l; j = this._config.buckets[i++]) { // this has to be i++ and not ++i\n\t\t\t\tif (this._config.buckets[i] === undefined && this._config.bucket_extension_interval)\n\t\t\t\t\tthis._config.buckets[i] = this._config.buckets[i - 1] + this._config.bucket_extension_interval;\n\t\t\t\tif (this.min > this._config.buckets[i])\n\t\t\t\t\tcontinue;\n\n\t\t\t\td[i] = {\n\t\t\t\t\tbucket: (j + this._config.buckets[i]) / 2,\n\t\t\t\t\trange: [j, this._config.buckets[i]],\n\t\t\t\t\tcount: (this.buckets[i] ? this.buckets[i][0] : 0),\n\t\t\t\t\ttuple: this.buckets[i] ? this.buckets[i].slice(1) : []\n\t\t\t\t};\n\n\t\t\t\tif (this.max < this._config.buckets[i])\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (i == l && this.buckets[i]) {\n\t\t\t\td[i] = {\n\t\t\t\t\tbucket: (j + this.max) / 2,\n\t\t\t\t\trange: [j, this.max],\n\t\t\t\t\tcount: this.buckets[i][0],\n\t\t\t\t\ttuple: this.buckets[i] ? this.buckets[i].slice(1) : []\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (this._config.bucket_precision) {\n\t\t\ti = Math.floor(this.min / this._config.bucket_precision);\n\t\t\tl = Math.floor(this.max / this._config.bucket_precision) + 1;\n\t\t\tfor (j = 0; i < l && i < this.buckets.length; i++, j++) {\n\t\t\t\tif (!this.buckets[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\td[j] = {\n\t\t\t\t\tbucket: (i + 0.5) * this._config.bucket_precision,\n\t\t\t\t\trange: [i * this._config.bucket_precision, (i + 1) * this._config.bucket_precision],\n\t\t\t\t\tcount: this.buckets[i][0],\n\t\t\t\t\ttuple: this.buckets[i] ? this.buckets[i].slice(1) : []\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn d;\n\n\t},\n\n\tpercentile: function(p) {\n\t\tif (this.length === 0 || (!this._config.store_data && !this.buckets))\n\t\t\treturn NaN;\n\n\t\t// If we come here, we either have sorted data or sorted buckets\n\n\t\tvar v;\n\n\t\tif (p <= 0)\n\t\t\tv = 0;\n\t\telse if (p == 25)\n\t\t\tv = [Math.floor((this.length - 1) * 0.25), Math.ceil((this.length - 1) * 0.25)];\n\t\telse if (p == 50)\n\t\t\tv = [Math.floor((this.length - 1) * 0.5), Math.ceil((this.length - 1) * 0.5)];\n\t\telse if (p == 75)\n\t\t\tv = [Math.floor((this.length - 1) * 0.75), Math.ceil((this.length - 1) * 0.75)];\n\t\telse if (p >= 100)\n\t\t\tv = this.length - 1;\n\t\telse\n\t\t\tv = Math.floor(this.length * p / 100);\n\n\t\tif (v === 0)\n\t\t\treturn this.min;\n\t\tif (v === this.length - 1)\n\t\t\treturn this.max;\n\n\t\tif (this._config.store_data) {\n\t\t\tif (this._data_sorted === null)\n\t\t\t\tthis._data_sorted = this.data.slice(0).sort(asc);\n\n\t\t\tif (typeof v == 'number')\n\t\t\t\treturn this._data_sorted[v];\n\t\t\telse\n\t\t\t\treturn (this._data_sorted[v[0]] + this._data_sorted[v[1]]) / 2;\n\t\t} else {\n\t\t\tvar j;\n\t\t\tif (typeof v != 'number')\n\t\t\t\tv = (v[0] + v[1]) / 2;\n\n\t\t\tif (this._config.buckets)\n\t\t\t\tj = 0;\n\t\t\telse if (this._config.bucket_precision)\n\t\t\t\tj = Math.floor(this.min / this._config.bucket_precision);\n\n\t\t\tfor (; j < this.buckets.length; j++) {\n\t\t\t\tif (!this.buckets[j])\n\t\t\t\t\tcontinue;\n\t\t\t\tif (v <= this.buckets[j][0]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tv -= this.buckets[j][0];\n\t\t\t}\n\n\t\t\treturn this._get_nth_in_bucket(v, j);\n\t\t}\n\t},\n\n\t_get_nth_in_bucket: function(n, b) {\n\t\tvar range = [];\n\t\tif (this._config.buckets) {\n\t\t\trange[0] = (b > 0 ? this._config.buckets[b - 1] : this.min);\n\t\t\trange[1] = (b < this._config.buckets.length ? this._config.buckets[b] : this.max);\n\t\t} else if (this._config.bucket_precision) {\n\t\t\trange[0] = Math.max(b * this._config.bucket_precision, this.min);\n\t\t\trange[1] = Math.min((b + 1) * this._config.bucket_precision, this.max);\n\t\t}\n\t\treturn range[0] + (range[1] - range[0]) * n / this.buckets[b][0];\n\t},\n\n\tmedian: function() {\n\t\treturn this.percentile(50);\n\t},\n\n\tiqr: function() {\n\t\tvar q1, q3, fw;\n\n\t\tq1 = this.percentile(25);\n\t\tq3 = this.percentile(75);\n\n\t\tfw = (q3 - q1) * 1.5;\n\n\t\treturn this.band_pass(q1 - fw, q3 + fw, true);\n\t},\n\n\tband_pass: function(low, high, open, config) {\n\t\tvar i, j, b, b_val, i_val;\n\n\t\tif (!config)\n\t\t\tconfig = this._config;\n\n\t\tb = new Stats(config);\n\n\t\tif (this.length === 0)\n\t\t\treturn b;\n\n\t\tif (this._config.store_data) {\n\t\t\tif (this._data_sorted === null)\n\t\t\t\tthis._data_sorted = this.data.slice(0).sort(asc);\n\n\t\t\tfor (i = 0; i < this.length && (this._data_sorted[i] < high || (!open && this._data_sorted[i] === high)); i++) {\n\t\t\t\tif (this._data_sorted[i] > low || (!open && this._data_sorted[i] === low)) {\n\t\t\t\t\tb.push(this._data_sorted[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this._config.buckets) {\n\t\t\tfor (i = 0; i <= this._config.buckets.length; i++) {\n\t\t\t\tif (this._config.buckets[i] < this.min)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tb_val = (i == 0 ? this.min : this._config.buckets[i - 1]);\n\t\t\t\tif (b_val < this.min)\n\t\t\t\t\tb_val = this.min;\n\t\t\t\tif (b_val > this.max)\n\t\t\t\t\tb_val = this.max;\n\n\t\t\t\tif (high < b_val || (open && high === b_val)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (low < b_val || (!open && low === b_val)) {\n\t\t\t\t\tfor (j = 0; j < (this.buckets[i] ? this.buckets[i][0] : 0); j++) {\n\t\t\t\t\t\ti_val = Stats.prototype._get_nth_in_bucket.call(this, j, i);\n\t\t\t\t\t\tif ((i_val > low || (!open && i_val === low)) && (i_val < high || (!open && i_val === high))) {\n\t\t\t\t\t\t\tb.push(i_val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tb.min = Math.max(low, b.min);\n\t\t\tb.max = Math.min(high, b.max);\n\t\t} else if (this._config.bucket_precision) {\n\t\t\tvar low_i = Math.floor(low / this._config.bucket_precision),\n\t\t\t\thigh_i = Math.floor(high / this._config.bucket_precision) + 1;\n\n\t\t\tfor (i = low_i; i < Math.min(this.buckets.length, high_i); i++) {\n\t\t\t\tfor (j = 0; j < (this.buckets[i] ? this.buckets[i][0] : 0); j++) {\n\t\t\t\t\ti_val = Stats.prototype._get_nth_in_bucket.call(this, j, i);\n\t\t\t\t\tif ((i_val > low || (!open && i_val === low)) && (i_val < high || (!open && i_val === high))) {\n\t\t\t\t\t\tb.push(i_val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tb.min = Math.max(low, b.min);\n\t\t\tb.max = Math.min(high, b.max);\n\t\t}\n\n\t\treturn b;\n\t},\n\n\tcopy: function(config) {\n\t\tvar b = Stats.prototype.band_pass.call(this, this.min, this.max, false, config);\n\n\t\tb.sum = this.sum;\n\t\tb.sum_of_squares = this.sum_of_squares;\n\t\tb.sum_of_logs = this.sum_of_logs;\n\t\tb.sum_of_square_of_logs = this.sum_of_square_of_logs;\n\t\tb.zeroes = this.zeroes;\n\n\t\treturn b;\n\t},\n\n\tΣ: function() {\n\t\treturn this.sum;\n\t},\n\n\tΠ: function() {\n\t\treturn this.zeroes > 0 ? 0 : Math.exp(this.sum_of_logs);\n\t}\n};\n\nStats.prototype.σ = Stats.prototype.stddev;\nStats.prototype.μ = Stats.prototype.amean;\n\n\nexports.Stats = Stats;\n\n/**\nif(process.argv[1] && process.argv[1].match(__filename)) {\n\tvar s = new Stats({store_data:false, buckets: [ 1, 5, 10, 15, 20, 25, 30, 35 ]}).push(1, 2, 3);\n\tvar l = process.argv.slice(2);\n\tif(!l.length) l = [10, 11, 15, 8, 13, 12, 19, 32, 17, 16];\n\tl.forEach(function(e, i, a) { a[i] = parseFloat(e, 10); });\n\tStats.prototype.push.apply(s, l);\n\tconsole.log(s.data);\n\tconsole.log(s.amean().toFixed(2), s.μ().toFixed(2), s.stddev().toFixed(2), s.σ().toFixed(2), s.gmean().toFixed(2), s.median().toFixed(2), s.moe().toFixed(2), s.distribution());\n\tvar t=s.copy({buckets: [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 25, 30, 35] });\n\tconsole.log(t.amean().toFixed(2), t.μ().toFixed(2), t.stddev().toFixed(2), t.σ().toFixed(2), t.gmean().toFixed(2), t.median().toFixed(2), t.moe().toFixed(2), t.distribution());\n\n\ts = new Stats({store_data: false, buckets: [1, 5, 10, 15, 20, 25, 30, 35]});\n\ts.push_tuple([1, 1, 3, 4]);\n\ts.push_tuple([2, 1, 5, 8]);\n\ts.push_tuple([3, 1, 4, 9]);\n\ts.push_tuple([1, 1, 13, 14]);\n\n\tconsole.log(s.amean(), s.median());\n\tconsole.log(s.distribution());\n\n\ts.remove_tuple([1, 1, 3, 4]);\n\ts.push_tuple([4, 1, 3, 3]);\n\tconsole.log(s.amean(), s.median());\n\tconsole.log(s.distribution());\n\n}\n**/\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/simple-queue.js":"'use strict';\n\nfunction queue() {\n\tvar remaining = 0,\n\t\tjobs = 0,\n\t\tdoneFn = [];\n\n\tfunction preCheck() {\n\t\tif (remaining === false) {\n\t\t\tthrow new Error('Can\\'t push jobs to completed queue');\n\t\t}\n\t}\n\n\tfunction postCheck() {\n\t\tif (remaining === 0 && doneFn.length > 0) {\n\t\t\tdoneFn.forEach(function(fn) {\n\t\t\t\tfn(null, {\n\t\t\t\t\tjobs: jobs\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tremaining = false;\n\t\t}\n\t}\n\n\t// public API\n\treturn {\n\t\t// add a job to the queue\n\t\tpush: function(fn) {\n\t\t\tpreCheck();\n\n\t\t\tremaining++;\n\t\t\tjobs++;\n\n\t\t\t// pass an anonymous function to the callback\n\t\t\t// call it to mark a job as done\n\t\t\tvar called = false;\n\t\t\tfn(function() {\n\t\t\t\tif (!called) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tremaining--;\n\t\t\t\t\tpostCheck();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn this;\n\t\t},\n\n\t\t// call given function when all jobs added to the queue are done\n\t\tdone: function(fn, scope) {\n\t\t\tdoneFn.push(fn.bind(scope));\n\t\t\tpostCheck();\n\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nmodule.exports = queue;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/stats.js":"/**\n * Metrics stats implementation to be used by reporters\n * when phantomas is executed in multiple runs mode\n */\n'use strict';\n\nvar Stats = require('./fast-stats').Stats;\n\nfunction stats() {\n\t/* jshint validthis: true */\n\t// use pushMetrics() to add results for each run\n\tthis.metrics = [];\n\tthis.runs = 0;\n\n\t// stats to be calculated\n\t// @see https://github.com/bluesmoon/node-faststats\n\tthis.stats = {\n\t\tmin: function(values) {\n\t\t\treturn values.range()[0];\n\t\t},\n\t\tmax: function(values) {\n\t\t\treturn values.range()[1];\n\t\t},\n\t\taverage: function(values) {\n\t\t\treturn values.amean().toFixed(2);\n\t\t},\n\t\tmedian: function(values) {\n\t\t\treturn values.median().toFixed(2);\n\t\t},\n\t\tstddev: function(values) {\n\t\t\treturn values.stddev().toFixed(2);\n\t\t}\n\t};\n\n\tthis.statsNames = Object.keys(this.stats);\n}\n\n// add key/value collection of metrics values\nstats.prototype.pushMetrics = function(metrics) {\n\tthis.metrics.push(metrics);\n\tthis.runs++;\n};\n\n// get list of metrics name\nstats.prototype.getMetrics = function() {\n\tif (this.runs > 0) {\n\t\treturn Object.keys(this.metrics[0]);\n\t} else {\n\t\treturn [];\n\t}\n};\n\n// get stats for given metric\nstats.prototype.getMetricStats = function(metricName) {\n\tvar i,\n\t\tstats = {},\n\t\tvalue,\n\t\tvalues = new Stats();\n\n\tfor (i = 0; i < this.runs; i++) {\n\t\tvalue = this.metrics[i][metricName];\n\n\t\tif (typeof value === 'number') {\n\t\t\tvalues.push(this.metrics[i][metricName]);\n\t\t}\n\t}\n\n\t// apply stats functions\n\tthis.getAvailableStats().forEach(function(fnName) {\n\t\tstats[fnName] = parseFloat(this.stats[fnName](values));\n\t}, this);\n\n\treturn stats;\n};\n\nstats.prototype.getAvailableStats = function() {\n\treturn this.statsNames;\n};\n\nmodule.exports = stats;\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/reporters/csv.js":"/**\n * Results formatter for -R csv\n *\n * Options:\n *  no-header - omit CSV header\n *  timestamp - add the current timestamp as the first column\n *  url - add the URL as the first column\n *\n * @see https://github.com/touv/node-csv-string\n */\n'use strict';\n\nvar CSV = require('csv-string');\n\nmodule.exports = function(results, reporterOptions) {\n\t// public API\n\treturn {\n\t\trender: function() {\n\t\t\tvar metrics = results.getMetricsNames(),\n\t\t\t\tkeys = [],\n\t\t\t\tvalues = [],\n\t\t\t\tret = [];\n\n\t\t\tmetrics.forEach(function(metric) {\n\t\t\t\tvar value = results.getMetric(metric);\n\n\t\t\t\tkeys.push(metric);\n\t\t\t\tvalues.push(value);\n\t\t\t});\n\n\t\t\t// -R csv:url\n\t\t\tif (reporterOptions.url === true) {\n\t\t\t\tvalues.unshift(results.getUrl());\n\t\t\t\tkeys.unshift('url');\n\t\t\t}\n\n\t\t\t// -R csv:timestamp\n\t\t\tif (reporterOptions.timestamp === true) {\n\t\t\t\tvalues.unshift(new Date().toJSON().substr(0, 19));\n\t\t\t\tkeys.unshift('timestamp');\n\t\t\t}\n\n\t\t\t// -R csv:no-header\n\t\t\tif (reporterOptions['no-header'] !== true) {\n\t\t\t\tret.push(keys);\n\t\t\t}\n\n\t\t\t// add the values\n\t\t\tret.push(values);\n\n\t\t\treturn CSV.stringify(ret);\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/reporters/json.js":"/**\n * Results formatter for -R json\n *\n * Options:\n *  pretty - pretty print the JSON\n */\n'use strict';\n\nmodule.exports = function(results, reporterOptions) {\n\tvar isMultiple = Array.isArray(results);\n\n\tfunction formatSingleRunResults(results) {\n\t\tvar res = {\n\t\t\tgenerator: results.getGenerator(),\n\t\t\turl: results.getUrl(),\n\t\t\tmetrics: results.getMetrics(),\n\t\t\toffenders: results.getAllOffenders(),\n\t\t\tasserts: false\n\t\t};\n\n\t\t// add asserts\n\t\tvar asserts = results.getAsserts(),\n\t\t\tfailedAsserts;\n\n\t\tif (Object.keys(asserts).length > 0) {\n\t\t\tfailedAsserts = results.getFailedAsserts();\n\n\t\t\tres.asserts = {\n\t\t\t\trules: asserts,\n\t\t\t\tfailedCount: failedAsserts.length,\n\t\t\t\tfailedAsserts: failedAsserts,\n\t\t\t};\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t// public API\n\treturn {\n\t\thandlesMultiple: true,\n\t\trender: function() {\n\t\t\tvar res;\n\n\t\t\tif (!isMultiple) {\n\t\t\t\tres = formatSingleRunResults(results);\n\t\t\t} else {\n\t\t\t\tvar stats = new(require('../lib/stats'))();\n\n\t\t\t\tres = {\n\t\t\t\t\truns: results.map(function(run) {\n\t\t\t\t\t\treturn formatSingleRunResults(run);\n\t\t\t\t\t}),\n\t\t\t\t\tstats: {}\n\t\t\t\t};\n\n\t\t\t\t// generate metrics stats (issue #285)\n\t\t\t\tfor (var i = 0, runs = results.length; i < runs; i++) {\n\t\t\t\t\tstats.pushMetrics(results[i].getMetrics());\n\t\t\t\t}\n\n\t\t\t\tstats.getMetrics().forEach(function(metricName) {\n\t\t\t\t\tres.stats[metricName] = stats.getMetricStats(metricName);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// -R json:pretty\n\t\t\tif (reporterOptions.pretty === true) {\n\t\t\t\treturn JSON.stringify(res, null, 2);\n\t\t\t} else {\n\t\t\t\treturn JSON.stringify(res);\n\t\t\t}\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/reporters/plain.js":"/**\n * Results formatter for --format=plain\n *\n * Options:\n *  no-color - disable ANSI colors\n */\n'use strict';\n\nvar colors = require('../lib/ansicolors'),\n\tmetrics = require('../lib/index').metadata.metrics,\n\tfold = require('travis-fold'),\n\trpad = require('../core/pads').rpad,\n\tOK = '✓',\n\tERR = '✗';\n\nfunction getMetricUnit(metricName) {\n\tvar entry = metrics[metricName];\n\treturn (typeof entry !== 'undefined' && entry.unit !== 'number' && entry.unit !== 'string') ? entry.unit : false;\n}\n\nmodule.exports = function(results, reporterOptions) {\n\tvar isMultiple = Array.isArray(results),\n\t\tnoColor = (reporterOptions['no-color'] === true);\n\n\tfunction formatSingleRunResults(results) {\n\t\tvar res = [];\n\n\t\tif (noColor) {\n\t\t\tcolors.disable();\n\t\t}\n\n\t\t// header\n\t\tres.push(results.getGenerator() + ' metrics for <' + results.getUrl() + '>:');\n\t\tres.push('');\n\n\t\t// metrics\n\t\tfold.pushStart(res, 'metrics');\n\n\t\tresults.getMetricsNames().forEach(function(metric) {\n\t\t\tvar line = ' ' + metric + ': ' + results.getMetric(metric),\n\t\t\t\tunit = getMetricUnit(metric);\n\n\t\t\tif (unit !== false) {\n\t\t\t\tline += ' ' + colors.brightBlack(unit);\n\t\t\t}\n\n\t\t\t// check asserts\n\t\t\tif (results.hasAssertion(metric)) {\n\t\t\t\tif (results.assert(metric)) {\n\t\t\t\t\tline = colors.brightGreen(OK + line);\n\t\t\t\t} else {\n\t\t\t\t\tline = rpad(ERR + line, 50) + 'Assertion failed! Expected to be less than or equal: ' + results.getAssertion(metric);\n\t\t\t\t\tline = colors.brightRed(line);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tline = '*' + line;\n\t\t\t}\n\n\t\t\tres.push(line);\n\t\t});\n\n\t\tfold.pushEnd(res, 'metrics');\n\t\tres.push('');\n\n\t\t// offenders\n\t\tvar offenders = results.getAllOffenders();\n\t\tfold.pushStart(res, 'offenders');\n\n\t\tObject.keys(offenders).forEach(function(metric) {\n\t\t\tvar LIMIT = 50,\n\t\t\t\toffenders = results.getOffenders(metric),\n\t\t\t\tlen = offenders.length;\n\n\t\t\tres.push(colors.brightGreen('Offenders for ' + metric + ' (' + results.getMetric(metric) + '):'));\n\n\t\t\t// limit the ammount of offenders emitted\n\t\t\toffenders.slice(0, LIMIT).forEach(function(msg) {\n\t\t\t\tres.push(' * ' + msg);\n\t\t\t});\n\n\t\t\tif (len > LIMIT) {\n\t\t\t\tres.push(colors.brightBlack('(' + (len - LIMIT) + ' more)'));\n\t\t\t}\n\n\t\t\tres.push('');\n\t\t});\n\n\t\tfold.pushEnd(res, 'offenders');\n\n\t\treturn fold.wrap(\n\t\t\tresults.getUrl(),\n\t\t\tres.join('\\n').trim()\n\t\t) + '\\n';\n\t}\n\n\tfunction formatMultipleRunResults(results) {\n\t\tvar AsciiTable = require('ascii-table'),\n\t\t\tformat = require('util').format,\n\t\t\tstats = new(require('../lib/stats'))(),\n\t\t\truns = results.length,\n\t\t\tfields, table;\n\n\t\t// table title and heading\n\t\ttable = new AsciiTable();\n\t\ttable.setTitle(format('Report from %d run(s) for <%s> using %s', runs, results[0].getUrl(), results[0].getGenerator()));\n\t\ttable.setTitleAlignLeft();\n\n\t\tvar heading = [];\n\t\theading.push(AsciiTable.alignCenter('Metric', 30));\n\n\t\tstats.getAvailableStats().forEach(function(name) {\n\t\t\theading.push(AsciiTable.alignCenter(name, 12));\n\t\t});\n\n\t\ttable.setHeading(heading);\n\n\t\t// metrics stats\n\t\tfor (var i = 0; i < runs; i++) {\n\t\t\tstats.pushMetrics(results[i].getMetrics());\n\t\t}\n\n\t\t// generate rows (one for each metric)\n\t\tstats.getMetrics().forEach(function(metricName) {\n\t\t\tvar row = [],\n\t\t\t\tmetricStats = stats.getMetricStats(metricName),\n\t\t\t\tunit = getMetricUnit(metricName),\n\t\t\t\theading = metricName;\n\n\t\t\tif (unit !== false) {\n\t\t\t\theading += ' [' + unit + ']';\n\t\t\t}\n\n\t\t\trow.push(heading);\n\n\t\t\tObject.keys(metricStats).forEach(function(stat) {\n\t\t\t\trow.push(metricStats[stat]);\n\t\t\t});\n\n\t\t\ttable.addRow(row);\n\t\t});\n\n\t\treturn table.toString() + \"\\n\";\n\t}\n\n\t// public API\n\treturn {\n\t\thandlesMultiple: true,\n\t\trender: function() {\n\t\t\tif (!isMultiple) {\n\t\t\t\treturn formatSingleRunResults(results);\n\t\t\t} else {\n\t\t\t\treturn formatMultipleRunResults(results);\n\t\t\t}\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/reporters/statsd.js":"/**\n * Results formatter for --format=statsd\n *\n * --reporter statsd\n * --statsd-host localhost\n * --statsd-port 8125\n * --statsd-prefix \"myapp.frontPage.\"\n *\n * Options:\n *  <host>:<port>:<prefix>\n *\n * @see https://github.com/sivy/node-statsd\n */\n'use strict';\n\nvar StatsD = require('node-statsd').StatsD;\n\nmodule.exports = function(results, reporterOptions, options) {\n\tvar client,\n\t\tdebug = require('debug')('phantomas:reporter:statsd'),\n\t\tparams;\n\n\t// -R statsd:<host>:<port>:<prefix>\n\tif (reporterOptions.length > 0) {\n\t\toptions['statsd-host'] = reporterOptions[0];\n\t\toptions['statsd-port'] = reporterOptions[1];\n\t\toptions['statsd-prefix'] = reporterOptions[2];\n\t}\n\n\tparams = {\n\t\thost: options['statsd-host'] || 'localhost',\n\t\tport: options['statsd-port'] || 8125,\n\t\tprefix: (typeof options['statsd-prefix'] === 'undefined') ? 'phantomas.' : options['statsd-prefix']\n\t};\n\n\tdebug('Patameters: %j', params);\n\n\t// public API\n\treturn {\n\t\trender: function(done) {\n\t\t\tvar client = new StatsD(params),\n\t\t\t\tmetrics = results.getMetricsNames(),\n\t\t\t\tremaining = metrics.length,\n\t\t\t\tbytesSent = 0;\n\n\t\t\tclient.socket.on('error', function(error) {\n\t\t\t\tdebug('Error in socket: %s', error);\n\t\t\t});\n\n\t\t\tmetrics.forEach(function(metric) {\n\t\t\t\tvar value = results.getMetric(metric);\n\n\t\t\t\tif (isNaN(parseFloat(value))) {\n\t\t\t\t\tdebug('Not sending %s as \"%s\" is not a numeric metric', metric, value);\n\t\t\t\t\tremaining--;\n\t\t\t\t} else {\n\t\t\t\t\t//debug('Sending %s = %s...', metric, value);\n\n\t\t\t\t\tclient.gauge(metric, value, function(err, bytes) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tdebug('Error: %s', err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbytesSent += bytes;\n\t\t\t\t\t\t\tremaining--;\n\n\t\t\t\t\t\t\tif (remaining === 0) {\n\t\t\t\t\t\t\t\tdebug('All metrics sent (%d bytes)', bytesSent);\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/reporters/tap.js":"/**\n * Results formatter for --format=tap\n *\n * Options:\n *  no-skip - don't print out metrics that were skipped\n *\n * @see http://podwiki.hexten.net/TAP/TAP.html?page=TAP\n * @see https://github.com/macbre/tap-producer\n */\n'use strict';\n\nvar TapProducer = require('tap-producer-macbre');\n\nmodule.exports = function(results, reporterOptions) {\n\t// public API\n\treturn {\n\t\trender: function() {\n\t\t\tvar metrics = results.getMetricsNames(),\n\t\t\t\tnoSkip = (reporterOptions['no-skip'] === true),\n\t\t\t\tres = [];\n\n\t\t\tres.push(results.getGenerator() + ' results for <' + results.getUrl() + '>');\n\n\t\t\t// metrics\n\t\t\tmetrics.forEach(function(metric) {\n\t\t\t\tvar entry = {\n\t\t\t\t\tok: true,\n\t\t\t\t\tname: metric\n\t\t\t\t};\n\n\t\t\t\t// check asserts\n\t\t\t\tif (results.hasAssertion(metric)) {\n\t\t\t\t\tif (!results.assert(metric)) {\n\t\t\t\t\t\tentry.ok = false;\n\n\t\t\t\t\t\tentry.expected = results.getAssertion(metric);\n\t\t\t\t\t\tentry.actual = results.getMetric(metric);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tentry.value = results.getMetric(metric);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// mark metrics with no assertions as skipped\n\t\t\t\t\tentry.skip = true;\n\t\t\t\t\tentry.value = results.getMetric(metric);\n\t\t\t\t}\n\n\t\t\t\t// add offenders\n\t\t\t\tvar offenders = results.getOffenders(metric);\n\t\t\t\tif (offenders) {\n\t\t\t\t\t// properly encode YAML to make it work in Jenkins\n\t\t\t\t\toffenders = offenders.map(function(entry) {\n\t\t\t\t\t\treturn '\"' + entry.replace(/\"/g, '') + '\"';\n\t\t\t\t\t});\n\n\t\t\t\t\tentry.offenders = offenders;\n\t\t\t\t}\n\n\t\t\t\t// -R tap:no-skip\n\t\t\t\tif (noSkip && entry.skip) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tres.push(entry);\n\t\t\t});\n\n\t\t\treturn TapProducer.encode(res, true /* emit yanlish data in TAP */ );\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/cookies/cookies.js":"/**\n * Support for cookies\n */\n/* global phantom: true */\n'use strict';\n\nexports.version = '1.2';\n\nexports.module = function(phantomas) {\n\n\tvar cookiesJar = phantomas.getParam('cookies', [], 'object'),\n\t\tCOOKIE_SEPARATOR = '|';\n\n\t// setup cookies handling\n\tfunction initCookies() {\n\t\t// cookie handling via command line and config.json\n\t\tphantom.cookiesEnabled = true;\n\n\t\t// handles multiple cookies from config.json, and used for storing\n\t\t// constructed cookies from command line.\n\n\t\t// --cookie='bar=foo;domain=url'\n\t\t// for multiple cookies, please use pipe-separated string (issue #667)\n\t\t// --cookie='foo=42|test=123'\n\t\tvar cookieParam = phantomas.getParam('cookie', false, 'string');\n\n\t\tif (cookieParam !== false) {\n\t\t\tphantomas.log('Cookies: parsing \"cookie\" parameter'); // issue #667\n\n\t\t\tcookieParam.split(COOKIE_SEPARATOR).forEach(function(cookieParam) {\n\t\t\t\t// Parse cookie. at minimum, need a key=value pair, and a domain.\n\t\t\t\t// Domain attr, if unavailble, is created from `phantomas.url` during\n\t\t\t\t//  addition to phantomjs in injectCookies function\n\t\t\t\t// Full JS cookie syntax is supported.\n\t\t\t\tvar cookieComponents = cookieParam.split(';'),\n\t\t\t\t\tcookie = {};\n\n\t\t\t\tfor (var i = 0, len = cookieComponents.length; i < len; i++) {\n\t\t\t\t\tvar frag = cookieComponents[i].split('=');\n\n\t\t\t\t\t// special case: key-value\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcookie.name = frag[0];\n\t\t\t\t\t\tcookie.value = frag[1];\n\n\t\t\t\t\t\t// special case: secure\n\t\t\t\t\t} else if (frag[0] === 'secure') {\n\t\t\t\t\t\tcookie.secure = true;\n\n\t\t\t\t\t\t// everything else\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcookie[frag[0]] = frag[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// see injectCookies for validation\n\t\t\t\tcookiesJar.push(cookie);\n\t\t\t});\n\t\t}\n\t}\n\n\t// add cookies, if any, providing a domain shim\n\tfunction injectCookies() {\n\t\tif (cookiesJar && cookiesJar.length > 0) {\n\t\t\t// @see http://nodejs.org/docs/latest/api/url.html\n\t\t\tvar parseUrl = phantomas.require('url').parse;\n\n\t\t\tcookiesJar.forEach(function(cookie) {\n\t\t\t\t// phantomjs required attrs: *name, *value, *domain\n\t\t\t\tif (!cookie.name || !cookie.value) {\n\t\t\t\t\tthrow 'this cookie is missing a name or value property: ' + JSON.stringify(cookie);\n\t\t\t\t}\n\n\t\t\t\tif (!cookie.domain) {\n\t\t\t\t\tvar parsed = parseUrl(phantomas.url),\n\t\t\t\t\t\troot = (parsed.hostname || '').replace(/^www/, ''); // strip www\n\n\t\t\t\t\tcookie.domain = root;\n\t\t\t\t\tphantomas.log('Cookies: domain fallback applied - %s', root);\n\t\t\t\t}\n\n\t\t\t\tif (!phantom.addCookie(cookie)) {\n\t\t\t\t\t// In PhantomJS 2.1, the addCookie function always returns false (#597).\n\t\t\t\t\t//throw 'PhantomJS could not add cookie: ' + JSON.stringify(cookie);\n\t\t\t\t}\n\n\t\t\t\tphantomas.log('Cookies: set ' + JSON.stringify(cookie));\n\t\t\t});\n\t\t}\n\t}\n\n\tinitCookies();\n\tphantomas.on('pageBeforeOpen', injectCookies);\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/devices/devices.js":"/**\n * Provides --phone and --tabled options to force given device viewport and user agent\n *\n * @see https://github.com/macbre/phantomas/issues/213\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar device,\n\t\t// @see https://developers.google.com/chrome/mobile/docs/user-agent?hl=pl\n\t\t// @see http://viewportsizes.com/\n\t\tdevices = {\n\t\t\t// pretend we're iPhone\n\t\t\tphone: {\n\t\t\t\tviewport: '320x568',\n\t\t\t\t'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_0_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13A452 Safari/601.1'\n\t\t\t},\n\t\t\t// pretend we're iPad\n\t\t\ttablet: {\n\t\t\t\tviewport: '768x1024',\n\t\t\t\t'user-agent': 'Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B5110e Safari/601.1'\n\t\t\t}\n\t\t},\n\t\tavailableDevices = Object.keys(devices);\n\n\t// check if --phone or --tablet option was passed\n\tavailableDevices.forEach(function(item) {\n\t\tif (phantomas.getParam(item) === true) {\n\t\t\tdevice = item;\n\t\t\treturn false;\n\t\t}\n\t});\n\n\t// no profile selected, add a hint to the logs\n\tif (typeof device === 'undefined') {\n\t\tphantomas.log('Devices: no profile selected (available: %s)', availableDevices.join(', '));\n\t\treturn;\n\t}\n\n\t// apply the profile\n\tphantomas.log('Devices: using \"%s\" profile', device);\n\n\tObject.keys(devices[device]).forEach(function(key) {\n\t\tphantomas.setParam(key, devices[device][key]);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/filmStrip/filmStrip.js":"/**\n * Renders a serie of screenshots of page being loaded\n *\n * Please note that rendering each screenshot takes\n * several hundreds ms. Consider increasing default timeout.\n *\n * Run phantomas with --film-strip option to use this module\n *\n * --film-strip-dir folder path to output film strip (default is ./filmstrip directory)\n * --film-strip-prefix film strip files name prefix (defaults to 'screenshot')\n *\n * Youcan pass a comma separated list of milliseconds when to trigger a screenshot.\n * The time will be calculated relative to \"responseEnd\" event (issue #174)\n */\n'use strict';\n\nexports.version = '0.3';\n\nexports.module = function(phantomas) {\n\tif (!phantomas.getParam('film-strip')) {\n\t\tphantomas.log('filmStrip: to enable screenshots of page being loaded run phantomas with --film-strip option');\n\t\treturn;\n\t}\n\n\tvar filmStripOutputDir = phantomas.getParam('film-strip-dir', 'filmstrip', 'string').replace(/\\/+$/, ''),\n\t\tfilmStripPrefix = phantomas.getParam('film-strip-prefix', 'screenshot', 'string').replace(/[^a-z0-9\\-]+/ig, '-');\n\n\tvar zoomFactor = 0.5;\n\tphantomas.setZoom(zoomFactor);\n\n\tphantomas.log('filmStrip: film strip will be stored as %s/%s-*.png files (zoom: %d)', filmStripOutputDir, filmStripPrefix, zoomFactor);\n\n\tvar util = phantomas.require('util'),\n\t\tfs = require('fs'),\n\t\t// throttling\n\t\tSCREENSHOTS_MIN_INTERVAL = 75,\n\t\tlastScreenshot = 0,\n\t\tstart = Date.now(),\n\t\tstartFormatted = (new Date()).toJSON().substr(0, 19).replace(/:/g, '-'), // be M$ Windows compatible (issue #498) (2014-05-18T13:08:13 converts to 2014-05-18T13-08-13)\n\t\t// stats\n\t\ttimeTotal = 0,\n\t\tscreenshots = [];\n\n\tfunction screenshot(ts /* force timestamp in file name */ ) {\n\t\tvar now = Date.now(),\n\t\t\tpath;\n\n\t\t// check when was the last screenshot taken (exclude time it took to render the screenshot)\n\t\tif (now - lastScreenshot < SCREENSHOTS_MIN_INTERVAL) {\n\t\t\t//phantomas.log('Film strip: skipped');\n\t\t\treturn;\n\t\t}\n\n\t\t// time offset excluding time it took to render screenshots\n\t\tts = ts || (now - start - timeTotal);\n\t\tpath = util.format('%s/%s-%s-%d.png', filmStripOutputDir, filmStripPrefix, startFormatted, ts);\n\n\t\tphantomas.render(path);\n\t\tlastScreenshot = Date.now();\n\n\t\t// verify that the screnshot was really taken\n\t\tif (fs.isReadable(path)) {\n\t\t\tphantomas.log('Film strip: rendered to %s in %d ms', path, Date.now() - now);\n\t\t\tphantomas.emit('filmStrip', path, ts);\n\n\t\t\tscreenshots.push({\n\t\t\t\tpath: path,\n\t\t\t\tts: ts\n\t\t\t});\n\n\t\t\t// stats\n\t\t\ttimeTotal += (Date.now() - now);\n\t\t} else {\n\t\t\tphantomas.log('Film strip: rendering to %s failed!', path);\n\t\t}\n\t}\n\n\tif (phantomas.getParam('film-strip', false, 'string')) {\n\t\t// a comma separated list of milliseconds was passed (issue #174)\n\t\tvar timePoints = phantomas.getParam('film-strip').split(',');\n\t\tphantomas.log('Film strip: screenshots will be taken at: %s ms', timePoints.join(', '));\n\n\t\tphantomas.on('responseEnd', function() {\n\t\t\ttimePoints.forEach(function(point) {\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tphantomas.log('Film strip: rendering for %d ms', point);\n\t\t\t\t\tscreenshot(point);\n\t\t\t\t}, point);\n\t\t\t});\n\t\t});\n\t} else {\n\t\t// bind to events to render screenshots on\n\t\t[\n\t\t\t'loadStarted',\n\t\t\t'send',\n\t\t\t'recv',\n\t\t\t'loadFinished',\n\t\t\t'report',\n\t\t].forEach(function(ev) {\n\t\t\tphantomas.on(ev, function() {\n\t\t\t\tscreenshot();\n\t\t\t});\n\t\t});\n\t}\n\n\t// print-out stats\n\tphantomas.on('report', function() {\n\t\tphantomas.log('Film strip: spent %d ms on rendering %d screenshots', timeTotal, screenshots.length);\n\n\t\t// TODO: generate a movie\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/har/har.js":"/**\n * Log requests for build HAR output\n *\n * Depends on windowPerformance module!\n *\n * @see: https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html\n */\n'use strict';\n\nexports.version = '0.1';\n\nvar fs = require('fs');\n\n/**\n * Inspired by phantomHAR\n * @author: Christopher Van (@cvan)\n * @homepage: https://github.com/cvan/phantomHAR\n * @original: https://github.com/cvan/phantomHAR/blob/master/phantomhar.js\n */\n\nfunction createHAR(page, creator) {\n\tvar address = page.address;\n\tvar title = page.title;\n\tvar startTime = page.startTime;\n\tvar resources = page.resources;\n\n\tvar entries = [];\n\n\tresources.forEach(function(resource) {\n\t\tvar request = resource.request;\n\t\tvar response = resource.response;\n\t\tvar entry = resource.entry;\n\n\t\tif (!request || !response || !entry) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Exclude data URIs from the HAR because they aren't\n\t\t// included in the spec.\n\t\tif (request.url.substring(0, 5).toLowerCase() === 'data:') {\n\t\t\treturn;\n\t\t}\n\n\t\tentries.push({\n\t\t\tcache: {},\n\t\t\tpageref: address,\n\t\t\trequest: {\n\t\t\t\t// Accurate bodySize blocked on https://github.com/ariya/phantomjs/pull/11484\n\t\t\t\tbodySize: -1,\n\t\t\t\tcookies: [],\n\t\t\t\theaders: request.headers,\n\t\t\t\t// Accurate headersSize blocked on https://github.com/ariya/phantomjs/pull/11484\n\t\t\t\theadersSize: -1,\n\t\t\t\thttpVersion: 'HTTP/1.1',\n\t\t\t\tmethod: request.method,\n\t\t\t\tqueryString: [],\n\t\t\t\turl: request.url,\n\t\t\t},\n\t\t\tresponse: {\n\t\t\t\tbodySize: entry.contentLength,\n\t\t\t\tcookies: [],\n\t\t\t\theaders: response.headers,\n\t\t\t\theadersSize: -1,\n\t\t\t\thttpVersion: 'HTTP/1.1',\n\t\t\t\tredirectURL: '',\n\t\t\t\tstatus: entry.status,\n\t\t\t\tstatusText: entry.statusText,\n\t\t\t\tcontent: {\n\t\t\t\t\tmimeType: entry.contentType || '',\n\t\t\t\t\tsize: entry.bodySize, // uncompressed\n\t\t\t\t\ttext: entry.content || ''\n\t\t\t\t}\n\t\t\t},\n\t\t\tstartedDateTime: entry.sendTime.toISOString(),\n\t\t\ttime: entry.timeToLastByte,\n\t\t\ttimings: {\n\t\t\t\tblocked: 0,\n\t\t\t\tdns: -1,\n\t\t\t\tconnect: -1,\n\t\t\t\tsend: 0,\n\t\t\t\twait: entry.timeToFirstByte || 0,\n\t\t\t\treceive: entry.receiveTime,\n\t\t\t\tssl: -1\n\t\t\t}\n\t\t});\n\t});\n\n\treturn {\n\t\tlog: {\n\t\t\tcreator: creator,\n\t\t\tentries: entries,\n\t\t\tpages: [\n\t\t\t\t{\n\t\t\t\t\tstartedDateTime: startTime.toISOString(),\n\t\t\t\t\tid: address,\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tpageTimings: {\n\t\t\t\t\t\tonLoad: page.onLoad || -1,\n\t\t\t\t\t\tonContentLoad: page.onContentLoad || -1\n\t\t\t\t\t}\n                }\n            ],\n\t\t\tversion: '1.2',\n\t\t}\n\t};\n}\n/** End **/\n\nexports.module = function(phantomas) {\n\n\tvar param = phantomas.getParam('har'),\n\t\tpath = '',\n\t\ttimeToLastByte = undefined;\n\n\tvar page = {\n\t\torigin: undefined,\n\t\tresources: [],\n\t\ttitle: undefined,\n\t\taddress: undefined,\n\t\tstartTime: undefined,\n\t\tendTime: undefined,\n\t\tonDOMReadyTime: undefined,\n\t\twindowOnLoadTime: undefined,\n\t\ttimeToLastByte: undefined,\n\t\tonLoad: undefined,\n\t\tonContentLoad: undefined\n\t};\n\n\tvar creator = {\n\t\tname: \"Phantomas - (using phantomHAR)\",\n\t\tversion: phantomas.getVersion()\n\t};\n\n\tif (typeof param === 'undefined') {\n\t\tphantomas.log('HAR: no path specified, use --har <path>');\n\t\treturn;\n\t}\n\n\t// --har\n\tif (param === true) {\n\t\t// defaults to \"2013-12-07T20:15:01.521Z.har\"\n\t\tpath = (new Date()).toJSON() + '.har';\n\t}\n\t// --har [file name]\n\telse {\n\t\tpath = param;\n\t}\n\n\tphantomas.log('HAR: will be stored in %s', path);\n\n\tphantomas.on('pageBeforeOpen', function(p) {\n\t\tpage.origin = p;\n\t});\n\n\tphantomas.on('pageOpen', function() {\n\t\tpage.startTime = new Date();\n\t});\n\n\tphantomas.on('loadFinished', function() {\n\t\tpage.endTime = new Date();\n\t});\n\n\tphantomas.on('send', function(entry, res) {\n\t\tpage.resources[res.id] = {\n\t\t\trequest: res,\n\t\t\tresponse: null,\n\t\t\tentry: null\n\t\t};\n\t});\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tpage.resources[res.id].response = res;\n\t\tpage.resources[res.id].entry = entry;\n\t\ttimeToLastByte = entry.timeToLastByte;\n\t});\n\n\tphantomas.on('metric', function(name, value) {\n\t\tswitch (name) {\n\t\t\tcase 'domContentLoaded':\n\t\t\t\tpage.onDOMReadyTime = value;\n\t\t\t\tbreak;\n\t\t\tcase 'domComplete':\n\t\t\t\tpage.windowOnLoadTime = value;\n\t\t\t\tbreak;\n\t\t\tcase 'timeToLastByte':\n\t\t\t\tpage.timeToLastByte = value;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tphantomas.on('report', function() {\n\t\t// Set endTime if page was not finished correctly\n\t\tif (!page.endTime)\n\t\t\tpage.endTime = new Date();\n\n\t\t// If metric 'windowOnLoadTime' hasn't been fired, compute it\n\t\tif (!page.windowOnLoadTime)\n\t\t\tpage.windowOnLoadTime = page.endTime.getTime() - page.startTime.getTime();\n\n\t\t// If metric 'timeToLastByte' hasn't been fired, use last entry\n\t\tif (!page.timeToLastByte)\n\t\t\tpage.timeToLastByte = timeToLastByte;\n\n\t\tpage.address = page.origin.url;\n\t\tpage.title = page.origin.title;\n\n\t\t// Times (windowOnLoadTime, onDOMReadyTime) are relative to responseEnd entry\n\t\t// in NavigationTiming (represented by timeToLastByte metric)\n\t\tpage.onLoad = page.timeToLastByte + page.windowOnLoadTime;\n\t\tpage.onContentLoad = page.timeToLastByte + page.onDOMReadyTime;\n\n\t\tphantomas.log('HAR: generating for <%s> (\"%s\")', page.address, page.title);\n\n\t\tvar har,\n\t\t\tdump;\n\n\t\ttry {\n\t\t\thar = createHAR(page, creator);\n\t\t} catch (e) {\n\t\t\tphantomas.log('HAR: failed to build - %s', e);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tdump = JSON.stringify(har);\n\t\t} catch (e) {\n\t\t\tphantomas.log('HAR: failed to stringify HAR to JSON - %s!', e);\n\t\t\treturn;\n\t\t}\n\n\t\tphantomas.log(\"HAR: saving to '%s',,,\", path);\n\t\ttry {\n\t\t\tfs.write(path, dump);\n\t\t} catch (e) {\n\t\t\tphantomas.log('HAR: failed to save HAR - %s!', e);\n\t\t\treturn;\n\t\t}\n\n\t\tphantomas.log('HAR: done');\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/httpAuth/httpAuth.js":"/**\n * Support for HTTP authentication\n */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tvar userName = phantomas.getParam('auth-user', '', 'string'),\n\t\tpassword = phantomas.getParam('auth-pass', '', 'string');\n\n\tif (userName === '' || password === '') {\n\t\treturn;\n\t}\n\n\tphantomas.on('pageBeforeOpen', function(page) {\n\t\tphantomas.log('Using HTTP auth: %s (pass: %s)', userName, new Array(password.length + 1).join('*'));\n\n\t\tpage.settings.userName = userName;\n\t\tpage.settings.password = password;\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/pageSource/pageSource.js":"/**\n * Saves the souce of page being loaded to a file\n *\n * Please note that saving each file takes a few ms.\n * Consider increasing default timeout.\n *\n * Run phantomas with --page-source option to use this module\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tif (!phantomas.getParam('page-source')) {\n\t\tphantomas.log('To enable page-source of page being loaded run phantomas with --page-source option');\n\t\treturn;\n\t}\n\n\tvar util = phantomas.require('util'),\n\t\tfs = require('fs'),\n\t\tpageSourceOutputDir = 'html';\n\n\t// grab output dir from args\n\tif (phantomas.getParam('page-source-dir')) {\n\t\tpageSourceOutputDir = phantomas.getParam('page-source-dir').replace(/\\/+$/, '');\n\t}\n\n\t// save source data\n\tphantomas.on('report', function() {\n\t\tvar now = Date.now(),\n\t\t\tpath = util.format(pageSourceOutputDir + '/%d.html', now);\n\n\t\tfs.write(path, phantomas.getSource(), 'w');\n\n\t\t// verify that the file was really written\n\t\tif (fs.isReadable(path)) {\n\t\t\tphantomas.log('Page source: saved to %s in %d ms', path, Date.now() - now);\n\t\t} else {\n\t\t\tphantomas.log('Page source: saved to %s failed!', path);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/postLoadDelay/postLoadDelay.js":"/**\n * Delays report generation for a given time\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\t// e.g. --post-load-delay 5\n\tvar delay = parseInt(phantomas.getParam('post-load-delay'), 10);\n\n\tif (!delay) {\n\t\treturn;\n\t}\n\n\tphantomas.log('Post load delay: will wait %d second(s) after onload', delay);\n\n\tphantomas.reportQueuePush(function(done) {\n\t\tphantomas.on('loadFinished', function() {\n\t\t\tsetInterval(done, delay * 1000);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/screenshot/screenshot.js":"/**\n * Renders a screenshot of the page when it's fully loaded\n *\n * @see http://phantomjs.org/api/webpage/method/render.html\n */\n'use strict';\n\nexports.version = '0.2';\n\nexports.module = function(phantomas) {\n\tvar param = phantomas.getParam('screenshot'),\n\t\tpath = '';\n\n\tif (typeof param === 'undefined') {\n\t\tphantomas.log('Screenshot: to enable screenshot of the fully loaded page run phantomas with --screenshot option');\n\t\treturn;\n\t}\n\n\t// --screenshot\n\tif (param === true) {\n\t\t// defaults to \"2013-12-07T20:15:01.521Z.png\"\n\t\tpath = (new Date()).toJSON().\n\t\treplace(/:/g, '-'); // be M$ Windows compatible (issue #454)\n\n\t\tpath += '.png';\n\t}\n\t// --screenshot [file name]\n\telse {\n\t\tpath = param;\n\t}\n\n\tphantomas.on('report', function() {\n\t\tvar then = Date.now(),\n\t\t\ttime;\n\n\t\tphantomas.render(path);\n\n\t\ttime = Date.now() - then;\n\n\t\tphantomas.log('Screenshot: rendered to %s in %d ms', path, time);\n\t\tphantomas.emit('screenshot', path, time);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/scroll/scroll.js":"/**\n * Allow page to be scrolled after it is loaded\n *\n * Pass --scroll as an option in CLI mode\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar scroll = phantomas.getParam('scroll') === true;\n\n\tif (!scroll) {\n\t\tphantomas.log('Scroll: pass --scroll option to scroll down the page when it\\'s loaded');\n\t\treturn;\n\t}\n\n\tphantomas.log('Scroll: the page will be scrolled down when loaded');\n\n\tphantomas.reportQueuePush(function(done) {\n\t\tphantomas.on('loadFinished', function() {\n\t\t\tphantomas.evaluate(function() {\n\t\t\t\t(function(phantomas) {\n\t\t\t\t\tphantomas.log('Scroll: scrolling the page down...');\n\t\t\t\t\tdocument.body.scrollIntoView(false);\n\n\t\t\t\t\tvar offset = document.body.scrollTop;\n\t\t\t\t\tphantomas.log('Scroll: scroll offset is %d px', offset);\n\t\t\t\t})(window.__phantomas);\n\t\t\t});\n\n\t\t\t// wait for lazy loading to do its job\n\t\t\tsetTimeout(done, 250);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/waitForEvent/waitForEvent.js":"/**\n * Delays report generation until given phantomas event is emitted (issue #453)\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\t// e.g. --wait-for-event \"done\"\n\tvar eventName = phantomas.getParam('wait-for-event');\n\n\tif (typeof eventName !== 'string') {\n\t\treturn;\n\t}\n\n\tphantomas.log('Waiting for event: will wait for \"%s\" event', eventName);\n\n\tphantomas.reportQueuePush(function(done) {\n\t\tphantomas.on(eventName, done);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/extensions/waitForSelector/waitForSelector.js":"/**\n * Delays report generation until given CSS selector can be resolved (i.e. given element exists)\n */\n/* global document: true */\n'use strict';\n\nexports.version = '0.2';\n\nfunction checkSelector(phantomas, selector) {\n\tvar res = phantomas.evaluate(function(selector) {\n\t\treturn (function(phantomas) {\n\t\t\ttry {\n\t\t\t\tvar result;\n\n\t\t\t\tphantomas.spyEnabled(false, 'checking the selector');\n\t\t\t\tresult = (document.querySelector(selector) !== null);\n\t\t\t\tphantomas.spyEnabled(true);\n\n\t\t\t\treturn result;\n\t\t\t} catch (ex) {\n\t\t\t\treturn ex.toString();\n\t\t\t}\n\t\t}(window.__phantomas));\n\t}, selector);\n\n\tphantomas.log('Selector: query for \"%s\" returned %j', selector, res);\n\treturn res;\n}\n\nexports.module = function(phantomas) {\n\t// e.g. --wait-for-selector \"body.loaded\"\n\tvar selector = phantomas.getParam('wait-for-selector');\n\n\tif (typeof selector !== 'string') {\n\t\treturn;\n\t}\n\n\tphantomas.log('Selector: will wait for \"%s\" selector', selector);\n\n\tphantomas.reportQueuePush(function(done) {\n\t\tphantomas.on('loadFinished', function() {\n\t\t\tvar intervalId,\n\t\t\t\tpollFn;\n\n\t\t\tphantomas.log('Selector: starting polling of \"%s\" selector', selector);\n\n\t\t\tpollFn = function() {\n\t\t\t\tvar res = checkSelector(phantomas, selector);\n\n\t\t\t\t// complete when selector is found or DOM exception is thrown\n\t\t\t\tif (res === true || typeof res === 'string') {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tintervalId = setInterval(pollFn, 200);\n\t\t\tpollFn();\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/metadata/generate.js":"#!/usr/bin/env node\n\n/*jshint -W083: false */\n\n/**\n * Generates metrics.json file that stores metrics metadata\n */\n'use strict';\n\nvar debug = require('debug')('generate'),\n\tfs = require('fs'),\n\tglob = require('glob'),\n\tphantomas = require('../../'),\n\tutil = require('util'),\n\tmetadata = {\n\t\tmetrics: {},\n\t\tmetricsCount: 0,\n\t\tmodulesCount: 0,\n\t\tversion: phantomas.version\n\t};\n\nfunction getModuleMetadata(moduleFile) {\n\tvar content = fs.readFileSync(moduleFile).toString(),\n\t\tdata = {\n\t\t\tmetrics: {}\n\t\t},\n\t\tmatches,\n\t\tmoduleName,\n\t\tre = /(setMetric|setMetricEvaluate|incrMetric)\\(['\"]([^'\"]+)['\"](\\)|,)(.*@desc.*$)?/mg;\n\n\tmoduleName = moduleFile.split('/').pop().replace(/\\.js$/, '');\n\n\t// scan the source code\n\twhile ((matches = re.exec(content)) !== null) {\n\t\tvar entry = {},\n\t\t\tmetricName = matches[2],\n\t\t\tmetricComment = matches[4],\n\t\t\tmetricUnit = 'ms',\n\t\t\thasDesc = (metricComment && metricComment.indexOf('@desc') > -1);\n\n\t\tif (typeof data.metrics[metricName] !== 'undefined') {\n\t\t\tif (hasDesc) {\n\t\t\t\tdebug('Found duplicated definition of %s metric in %s module', metricName, moduleName);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// parse @desc\n\t\tif (hasDesc) {\n\t\t\tmetricComment = metricComment.split('@desc').pop().trim();\n\t\t\tentry.desc = '';\n\n\t\t\t['unreliable', 'optional', 'offenders', 'gecko'].forEach(function(marker) {\n\t\t\t\tif (metricComment.indexOf('@' + marker) > -1) {\n\t\t\t\t\tentry[marker] = true;\n\t\t\t\t\tmetricComment = metricComment.replace('@' + marker, '').trim();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// detect units (defaults to ms)\n\t\t\tif ((matches = metricComment.match(/\\[([^\\]]+)\\]/)) !== null) {\n\t\t\t\tmetricUnit = matches[1];\n\t\t\t\tmetricComment = metricComment.replace(matches[0], '').trim();\n\t\t\t} else if (/^(number of|total number of|average specificity|total specificity|median of number|maximum number|maximum level)/.test(metricComment)) {\n\t\t\t\tmetricUnit = 'number';\n\t\t\t} else if (/^(the size|size|length|total length) of/.test(metricComment)) {\n\t\t\t\tmetricUnit = 'bytes';\n\t\t\t}\n\n\t\t\t// check if offenders are reported for this metric\n\t\t\tif (content.indexOf('phantomas.addOffender(\\'' + metricName + \"'\") > -1) {\n\t\t\t\tentry.offenders = true;\n\t\t\t}\n\n\t\t\tentry.desc = metricComment;\n\t\t\tentry.unit = metricUnit;\n\t\t} else {\n\t\t\tdebug('Metadata missing for %s metric in %s module', metricName, moduleName);\n\t\t}\n\n\t\tentry.module = moduleName;\n\n\t\t// add a metric\n\t\tdata.metrics[metricName] = entry;\n\t}\n\n\treturn data;\n}\n\n// find all modules\nvar dir = phantomas.path;\ndebug('Looking for modules in %s...', dir);\n\n[].concat(\n\tglob.sync(dir + '/core/modules/**/*.js'),\n\tglob.sync(dir + '/modules/**/*.js')\n).forEach(function(moduleFile) {\n\tvar data = getModuleMetadata(moduleFile);\n\n\tObject.keys(data.metrics).forEach(function(metricName) {\n\t\tmetadata.metricsCount++;\n\t\tmetadata.metrics[metricName] = data.metrics[metricName];\n\t});\n\n\tmetadata.modulesCount++;\n});\n\n// store metadata\nvar filename = __dirname + '/metadata.json',\n\tcontent = JSON.stringify(metadata, null, '  ');\n\ndebug('Storing metadata in %s...', filename);\nfs.writeFile(filename, content, function(err) {\n\tif (err) {\n\t\tdebug('Storing failed: %s', err);\n\t} else {\n\t\tdebug('Done');\n\t}\n});\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/assert.js":"// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// UTILITY\nvar util = require('util');\nvar pSlice = Array.prototype.slice;\n\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n// actual: actual,\n// expected: expected })\n\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.message = options.message;\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  var stackStartFunction = options.stackStartFunction || fail;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  }\n};\nutil.inherits(assert.AssertionError, Error);\n\nfunction replacer(key, value) {\n  if (value === undefined) {\n    return '' + value;\n  }\n  if (typeof value === 'number' && (isNaN(value) || !isFinite(value))) {\n    return value.toString();\n  }\n  if (typeof value === 'function' || value instanceof RegExp) {\n    return value.toString();\n  }\n  return value;\n}\n\nfunction truncate(s, n) {\n  if (typeof s == 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\n\nassert.AssertionError.prototype.toString = function() {\n  if (this.message) {\n    return [this.name + ':', this.message].join(' ');\n  } else {\n    return [\n      this.name + ':',\n      truncate(JSON.stringify(this.actual, replacer), 128),\n      this.operator,\n      truncate(JSON.stringify(this.expected, replacer), 128)\n    ].join(' ');\n  }\n};\n\n// assert.AssertionError instanceof Error\n\nassert.AssertionError.__proto__ = Error.prototype;\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided. All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!!!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {\n    if (actual.length != expected.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] !== expected[i]) return false;\n    }\n\n    return true;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b) {\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  // Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b);\n  }\n  try {\n    var ka = Object.keys(a),\n        kb = Object.keys(b),\n        key, i;\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==. assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (expected instanceof RegExp) {\n    return expected.test(actual);\n  } else if (actual instanceof expected) {\n    return true;\n  } else if (expected.call({}, actual) === true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  try {\n    block();\n  } catch (e) {\n    actual = e;\n  }\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail('Missing expected exception' + message);\n  }\n\n  if (!shouldThrow && expectedException(actual, expected)) {\n    fail('Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\n};\n\nassert.ifError = function(err) { if (err) {throw err;}};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/_coffee-script.js":"require.stub('vm');\nmodule.exports = require('coffee-script');\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/events.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar isArray = Array.isArray;\n\nfunction EventEmitter() { }\nexports.EventEmitter = EventEmitter;\n\n// By default EventEmitters will print a warning if more than\n// 10 listeners are added to it. This is a useful default which\n// helps finding memory leaks.\n//\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nvar defaultMaxListeners = 10;\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!this._events) this._events = {};\n  this._maxListeners = n;\n};\n\n\nEventEmitter.prototype.emit = function() {\n  var type = arguments[0];\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n      return false;\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler == 'function') {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        var l = arguments.length;\n        var args = new Array(l - 1);\n        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var l = arguments.length;\n    var args = new Array(l - 1);\n    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._maxListeners !== undefined) {\n        m = this._maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('.once only takes instances of Function');\n  }\n\n  var self = this;\n  function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  };\n\n  g.listener = listener;\n  self.on(type, g);\n\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var position = -1;\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener))\n      {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0) return this;\n    list.splice(position, 1);\n    if (list.length == 0)\n      delete this._events[type];\n  } else if (list === listener ||\n             (list.listener && list.listener === listener))\n  {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  if (arguments.length === 0) {\n    this._events = {};\n    return this;\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/http.js":"exports.STATUS_CODES = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Moved Temporarily',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '307': 'Temporary Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Time-out',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Request Entity Too Large',\n  '414': 'Request-URI Too Large',\n  '415': 'Unsupported Media Type',\n  '416': 'Requested Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': 'I\\'m a teapot',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Unordered Collection',\n  '426': 'Upgrade Required',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Time-out',\n  '505': 'HTTP Version not supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '509': 'Bandwidth Limit Exceeded',\n  '510': 'Not Extended'\n};\n\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/path.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvar isWindows = process.platform === 'win32';\n\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n\nif (isWindows) {\n  // Regex to split a windows path into three parts: [*, device, slash,\n  // tail] windows-only\n  var splitDeviceRe =\n      /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n  // Regex to split the tail part of the above into [*, dir, basename, ext]\n  var splitTailRe = /^([\\s\\S]+[\\\\\\/](?!$)|[\\\\\\/])?((?:[\\s\\S]+?)?(\\.[^.]*)?)$/;\n\n  // Function to split a filename into [root, dir, basename, ext]\n  // windows version\n  var splitPath = function(filename) {\n    // Separate device+slash from tail\n    var result = splitDeviceRe.exec(filename),\n        device = (result[1] || '') + (result[2] || ''),\n        tail = result[3] || '';\n    // Split the tail into dir, basename and extension\n    var result2 = splitTailRe.exec(tail),\n        dir = result2[1] || '',\n        basename = result2[2] || '',\n        ext = result2[3] || '';\n    return [device, dir, basename, ext];\n  };\n\n  // path.resolve([from ...], to)\n  // windows version\n  exports.resolve = function() {\n    var resolvedDevice = '',\n        resolvedTail = '',\n        resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1; i--) {\n      var path;\n      if (i >= 0) {\n        path = arguments[i];\n      } else if (!resolvedDevice) {\n        path = process.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive. We're sure the device is not\n        // an unc path at this points, because unc paths are always absolute.\n        path = process._cwdForDrive(resolvedDevice[0]);\n      }\n\n      // Skip empty and invalid entries\n      if (typeof path !== 'string' || !path) {\n        continue;\n      }\n\n      var result = splitDeviceRe.exec(path),\n          device = result[1] || '',\n          isUnc = device && device.charAt(1) !== ':',\n          isAbsolute = !!result[2] || isUnc, // UNC paths are always absolute\n          tail = result[3];\n\n      if (device &&\n          resolvedDevice &&\n          device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n        // This path points to another device so it is not applicable\n        continue;\n      }\n\n      if (!resolvedDevice) {\n        resolvedDevice = device;\n      }\n      if (!resolvedAbsolute) {\n        resolvedTail = tail + '\\\\' + resolvedTail;\n        resolvedAbsolute = isAbsolute;\n      }\n\n      if (resolvedDevice && resolvedAbsolute) {\n        break;\n      }\n    }\n\n    // Replace slashes (in UNC share name) by backslashes\n    resolvedDevice = resolvedDevice.replace(/\\//g, '\\\\');\n\n    // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n\n    // Normalize the tail path\n\n    function f(p) {\n      return !!p;\n    }\n\n    resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/).filter(f),\n                                  !resolvedAbsolute).join('\\\\');\n\n    return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n           '.';\n  };\n\n  // windows version\n  exports.normalize = function(path) {\n    var result = splitDeviceRe.exec(path),\n        device = result[1] || '',\n        isUnc = device && device.charAt(1) !== ':',\n        isAbsolute = !!result[2] || isUnc, // UNC paths are always absolute\n        tail = result[3],\n        trailingSlash = /[\\\\\\/]$/.test(tail);\n\n    // Normalize the tail path\n    tail = normalizeArray(tail.split(/[\\\\\\/]+/).filter(function(p) {\n      return !!p;\n    }), !isAbsolute).join('\\\\');\n\n    if (!tail && !isAbsolute) {\n      tail = '.';\n    }\n    if (tail && trailingSlash) {\n      tail += '\\\\';\n    }\n\n    return device + (isAbsolute ? '\\\\' : '') + tail;\n  };\n\n  // windows version\n  exports.join = function() {\n    function f(p) {\n      return p && typeof p === 'string';\n    }\n\n    var paths = Array.prototype.slice.call(arguments, 0).filter(f);\n    var joined = paths.join('\\\\');\n\n    // Make sure that the joined path doesn't start with two slashes\n    // - it will be mistaken for an unc path by normalize() -\n    // unless the paths[0] also starts with two slashes\n    if (/^[\\\\\\/]{2}/.test(joined) && !/^[\\\\\\/]{2}/.test(paths[0])) {\n      joined = joined.slice(1);\n    }\n\n    return exports.normalize(joined);\n  };\n\n  // path.relative(from, to)\n  // it will solve the relative path from 'from' to 'to', for instance:\n  // from = 'C:\\\\orandea\\\\test\\\\aaa'\n  // to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  // windows version\n  exports.relative = function(from, to) {\n    from = exports.resolve(from);\n    to = exports.resolve(to);\n\n    // windows is not case sensitive\n    var lowerFrom = from.toLowerCase();\n    var lowerTo = to.toLowerCase();\n\n    function trim(arr) {\n      var start = 0;\n      for (; start < arr.length; start++) {\n        if (arr[start] !== '') break;\n      }\n\n      var end = arr.length - 1;\n      for (; end >= 0; end--) {\n        if (arr[end] !== '') break;\n      }\n\n      if (start > end) return [];\n      return arr.slice(start, end - start + 1);\n    }\n\n    var fromParts = trim(from.split('\\\\'));\n    var toParts = trim(to.split('\\\\'));\n\n    var lowerFromParts = trim(lowerFrom.split('\\\\'));\n    var lowerToParts = trim(lowerTo.split('\\\\'));\n\n    var length = Math.min(lowerFromParts.length, lowerToParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n      if (lowerFromParts[i] !== lowerToParts[i]) {\n        samePartsLength = i;\n        break;\n      }\n    }\n\n    if (samePartsLength == 0) {\n      return to;\n    }\n\n    var outputParts = [];\n    for (var i = samePartsLength; i < lowerFromParts.length; i++) {\n      outputParts.push('..');\n    }\n\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n    return outputParts.join('\\\\');\n  };\n\n\n} else /* posix */ {\n\n  // Split a filename into [root, dir, basename, ext], unix version\n  // 'root' is just a slash, or nothing.\n  var splitPathRe = /^(\\/?)([\\s\\S]+\\/(?!$)|\\/)?((?:[\\s\\S]+?)?(\\.[^.]*)?)$/;\n  var splitPath = function(filename) {\n    var result = splitPathRe.exec(filename);\n    return [result[1] || '', result[2] || '', result[3] || '', result[4] || ''];\n  };\n\n  // path.resolve([from ...], to)\n  // posix version\n  exports.resolve = function() {\n    var resolvedPath = '',\n        resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path = (i >= 0) ? arguments[i] : process.cwd();\n\n      // Skip empty and invalid entries\n      if (typeof path !== 'string' || !path) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charAt(0) === '/';\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function(p) {\n      return !!p;\n    }), !resolvedAbsolute).join('/');\n\n    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n  };\n\n  // path.normalize(path)\n  // posix version\n  exports.normalize = function(path) {\n    var isAbsolute = path.charAt(0) === '/',\n        trailingSlash = path.slice(-1) === '/';\n\n    // Normalize the path\n    path = normalizeArray(path.split('/').filter(function(p) {\n      return !!p;\n    }), !isAbsolute).join('/');\n\n    if (!path && !isAbsolute) {\n      path = '.';\n    }\n    if (path && trailingSlash) {\n      path += '/';\n    }\n\n    return (isAbsolute ? '/' : '') + path;\n  };\n\n\n  // posix version\n  exports.join = function() {\n    var paths = Array.prototype.slice.call(arguments, 0);\n    return exports.normalize(paths.filter(function(p, index) {\n      return p && typeof p === 'string';\n    }).join('/'));\n  };\n\n\n  // path.relative(from, to)\n  // posix version\n  exports.relative = function(from, to) {\n    from = exports.resolve(from).substr(1);\n    to = exports.resolve(to).substr(1);\n\n    function trim(arr) {\n      var start = 0;\n      for (; start < arr.length; start++) {\n        if (arr[start] !== '') break;\n      }\n\n      var end = arr.length - 1;\n      for (; end >= 0; end--) {\n        if (arr[end] !== '') break;\n      }\n\n      if (start > end) return [];\n      return arr.slice(start, end - start + 1);\n    }\n\n    var fromParts = trim(from.split('/'));\n    var toParts = trim(to.split('/'));\n\n    var length = Math.min(fromParts.length, toParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n      if (fromParts[i] !== toParts[i]) {\n        samePartsLength = i;\n        break;\n      }\n    }\n\n    var outputParts = [];\n    for (var i = samePartsLength; i < fromParts.length; i++) {\n      outputParts.push('..');\n    }\n\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n    return outputParts.join('/');\n  };\n\n}\n\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substring(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\n\nexports.exists = function(path, callback) {\n  process.binding('fs').stat(path, function(err, stats) {\n    if (callback) callback(err ? false : true);\n  });\n};\n\n\nexports.existsSync = function(path) {\n  try {\n    process.binding('fs').stat(path);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n\nexports._makeLong = isWindows ? \n  function(path) {\n    var resolvedPath = exports.resolve(path);\n\n    if (resolvedPath.match(/^[a-zA-Z]\\:\\\\/)) {\n      // path is local filesystem path, which needs to be converted\n      // to long UNC path.\n      return '\\\\\\\\?\\\\' + resolvedPath;\n    } else if (resolvedPath.match(/^\\\\\\\\[^?.]/)) {\n      // path is network UNC path, which needs to be converted\n      // to long UNC path.\n      return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\n    }\n\n    return path;\n  } :\n  function(path) {\n    return path;\n  };\n\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/punycode.js":"/*! http://mths.be/punycode by @mathias */\n;(function(root) {\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Detect free variables `define`, `exports`, `module` and `require` */\n\tfreeDefine = typeof define == 'function' && typeof define.amd == 'object' &&\n\t\tdefine.amd && define,\n\tfreeExports = typeof exports == 'object' && exports,\n\tfreeModule = typeof module == 'object' && module,\n\tfreeRequire = typeof require == 'function' && require,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars\n\tregexPunycode = /^xn--/,\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process.',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\twhile (length--) {\n\t\t\tarray[length] = fn(array[length]);\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings.\n\t * @private\n\t * @param {String} domain The domain name.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar glue = '.';\n\t\treturn map(string.split(glue), fn).join(glue);\n\t}\n\n\t/**\n\t * Creates an array containing the decimal code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif ((value & 0xF800) == 0xD800 && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(value, extra);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of decimal code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of decimal code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic (decimal) code point.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\treturn codePoint - 48 < 10\n\t\t\t? codePoint - 22\n\t\t\t: codePoint - 65 < 26\n\t\t\t\t? codePoint - 65\n\t\t\t\t: codePoint - 97 < 26\n\t\t\t\t\t? codePoint - 97\n\t\t\t\t\t: base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if flag is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a basic code point to lowercase is `flag` is falsy, or to\n\t * uppercase if `flag` is truthy. The code point is unchanged if it's\n\t * caseless. The behavior is undefined if `codePoint` is not a basic code\n\t * point.\n\t * @private\n\t * @param {Number} codePoint The numeric value of a basic code point.\n\t * @returns {Number} The resulting basic code point.\n\t */\n\tfunction encodeBasic(codePoint, flag) {\n\t\tcodePoint -= (codePoint - 97 < 26) << 5;\n\t\treturn codePoint + (!flag && codePoint - 65 < 26) << 5;\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII code points to a string of Unicode\n\t * code points.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII code points.\n\t * @returns {String} The resulting string of Unicode code points.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    length,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode code points to a Punycode string of ASCII\n\t * code points.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode code points.\n\t * @returns {String} The resulting Punycode string of ASCII code points.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name to Unicode. Only the\n\t * Punycoded parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it on a string that has already been converted to\n\t * Unicode.\n\t * @memberOf punycode\n\t * @param {String} domain The Punycode domain name to convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name to Punycode. Only the\n\t * non-ASCII parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it with a domain that's already in ASCII.\n\t * @memberOf punycode\n\t * @param {String} domain The domain name to convert, as a Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name.\n\t */\n\tfunction toASCII(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.1.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to decimal Unicode code points, and back.\n\t\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\tif (freeExports) {\n\t\tif (freeModule && freeModule.exports == freeExports) {\n\t\t\t// in Node.js or Ringo 0.8+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or Ringo 0.7-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else if (freeDefine) {\n\t\t// via curl.js or RequireJS\n\t\tdefine('punycode', punycode);\n\t} else {\n\t\t// in a browser or Rhino\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/querystring.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Query String Utilities\n\nvar QueryString = exports;\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\nfunction charCode(c) {\n  return c.charCodeAt(0);\n}\n\n\n// a safe fast alternative to decodeURIComponent\nQueryString.unescapeBuffer = function(s, decodeSpaces) {\n  var out = new Buffer(s.length);\n  var state = 'CHAR'; // states: CHAR, HEX0, HEX1\n  var n, m, hexchar;\n\n  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {\n    var c = s.charCodeAt(inIndex);\n    switch (state) {\n      case 'CHAR':\n        switch (c) {\n          case charCode('%'):\n            n = 0;\n            m = 0;\n            state = 'HEX0';\n            break;\n          case charCode('+'):\n            if (decodeSpaces) c = charCode(' ');\n            // pass thru\n          default:\n            out[outIndex++] = c;\n            break;\n        }\n        break;\n\n      case 'HEX0':\n        state = 'HEX1';\n        hexchar = c;\n        if (charCode('0') <= c && c <= charCode('9')) {\n          n = c - charCode('0');\n        } else if (charCode('a') <= c && c <= charCode('f')) {\n          n = c - charCode('a') + 10;\n        } else if (charCode('A') <= c && c <= charCode('F')) {\n          n = c - charCode('A') + 10;\n        } else {\n          out[outIndex++] = charCode('%');\n          out[outIndex++] = c;\n          state = 'CHAR';\n          break;\n        }\n        break;\n\n      case 'HEX1':\n        state = 'CHAR';\n        if (charCode('0') <= c && c <= charCode('9')) {\n          m = c - charCode('0');\n        } else if (charCode('a') <= c && c <= charCode('f')) {\n          m = c - charCode('a') + 10;\n        } else if (charCode('A') <= c && c <= charCode('F')) {\n          m = c - charCode('A') + 10;\n        } else {\n          out[outIndex++] = charCode('%');\n          out[outIndex++] = hexchar;\n          out[outIndex++] = c;\n          break;\n        }\n        out[outIndex++] = 16 * n + m;\n        break;\n    }\n  }\n\n  // TODO support returning arbitrary buffers.\n\n  return out.slice(0, outIndex - 1);\n};\n\n\nQueryString.unescape = function(s, decodeSpaces) {\n  return QueryString.unescapeBuffer(s, decodeSpaces).toString();\n};\n\n\nQueryString.escape = function(str) {\n  return encodeURIComponent(str);\n};\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\n\nQueryString.stringify = QueryString.encode = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = QueryString.escape(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + QueryString.escape(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + QueryString.escape(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return QueryString.escape(stringifyPrimitive(name)) + eq +\n         QueryString.escape(stringifyPrimitive(obj));\n};\n\n// Parse a key=val string.\nQueryString.parse = QueryString.decode = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    try {\n      k = decodeURIComponent(kstr);\n      v = decodeURIComponent(vstr);\n    } catch (e) {\n      k = QueryString.unescape(kstr, true);\n      v = QueryString.unescape(vstr, true);\n    }\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/tty.js":"exports.isatty = function(){\n  return true;\n};\n\nexports.getWindowSize = function(){\n  return [window.innerHeight, window.innerWidth];\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/url.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('./punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '~', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(delims),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#']\n      .concat(unwise).concat(autoEscape),\n    nonAuthChars = ['/', '@', '?', '#'].concat(delims),\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-zA-Z0-9][a-z0-9A-Z_-]{0,62}$/,\n    hostnamePartStart = /^([a-zA-Z0-9][a-z0-9A-Z_-]{0,62})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always have a path component.\n    pathedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('./querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof(url) === 'object' && url.href) return url;\n\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var out = {},\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    out.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      out.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    // don't enforce full RFC correctness, just be unstupid about it.\n\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the first @ sign, unless some non-auth character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    var atSign = rest.indexOf('@');\n    if (atSign !== -1) {\n      var auth = rest.slice(0, atSign);\n\n      // there *may be* an auth\n      var hasAuth = true;\n      for (var i = 0, l = nonAuthChars.length; i < l; i++) {\n        if (auth.indexOf(nonAuthChars[i]) !== -1) {\n          // not a valid auth.  Something like http://foo.com/bar@baz/\n          hasAuth = false;\n          break;\n        }\n      }\n\n      if (hasAuth) {\n        // pluck off the auth portion.\n        out.auth = decodeURIComponent(auth);\n        rest = rest.substr(atSign + 1);\n      }\n    }\n\n    var firstNonHost = -1;\n    for (var i = 0, l = nonHostChars.length; i < l; i++) {\n      var index = rest.indexOf(nonHostChars[i]);\n      if (index !== -1 &&\n          (firstNonHost < 0 || index < firstNonHost)) firstNonHost = index;\n    }\n\n    if (firstNonHost !== -1) {\n      out.host = rest.substr(0, firstNonHost);\n      rest = rest.substr(firstNonHost);\n    } else {\n      out.host = rest;\n      rest = '';\n    }\n\n    // pull out port.\n    var p = parseHost(out.host);\n    var keys = Object.keys(p);\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i];\n      out[key] = p[key];\n    }\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    out.hostname = out.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = out.hostname[0] === '[' &&\n        out.hostname[out.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (out.hostname.length > hostnameMaxLen) {\n      out.hostname = '';\n    } else if (!ipv6Hostname) {\n      var hostparts = out.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            out.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    // hostnames are always lower case.\n    out.hostname = out.hostname.toLowerCase();\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = out.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      out.hostname = newOut.join('.');\n    }\n\n    out.host = (out.hostname || '') +\n        ((out.port) ? ':' + out.port : '');\n    out.href += out.host;\n\n    // strip [ and ] from the hostname\n    if (ipv6Hostname) {\n      out.hostname = out.hostname.substr(1, out.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    out.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    out.search = rest.substr(qm);\n    out.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      out.query = querystring.parse(out.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    out.search = '';\n    out.query = {};\n  }\n  if (rest) out.pathname = rest;\n  if (slashedProtocol[proto] &&\n      out.hostname && !out.pathname) {\n    out.pathname = '/';\n  }\n\n  //to support http.request\n  if (out.pathname || out.search) {\n    out.path = (out.pathname ? out.pathname : '') +\n               (out.search ? out.search : '');\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  out.href = urlFormat(out);\n  return out;\n}\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (typeof(obj) === 'string') obj = urlParse(obj);\n\n  var auth = obj.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = obj.protocol || '',\n      pathname = obj.pathname || '',\n      hash = obj.hash || '',\n      host = false,\n      query = '';\n\n  if (obj.host !== undefined) {\n    host = auth + obj.host;\n  } else if (obj.hostname !== undefined) {\n    host = auth + (obj.hostname.indexOf(':') === -1 ?\n        obj.hostname :\n        '[' + obj.hostname + ']');\n    if (obj.port) {\n      host += ':' + obj.port;\n    }\n  }\n\n  if (obj.query && typeof obj.query === 'object' &&\n      Object.keys(obj.query).length) {\n    query = querystring.stringify(obj.query);\n  }\n\n  var search = obj.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (obj.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  return protocol + host + pathname + search + hash;\n}\n\nfunction urlResolve(source, relative) {\n  return urlFormat(urlResolveObject(source, relative));\n}\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n\n  source = urlParse(urlFormat(source), false, true);\n  relative = urlParse(urlFormat(relative), false, true);\n\n  // hash is always overridden, no matter what.\n  source.hash = relative.hash;\n\n  if (relative.href === '') {\n    source.href = urlFormat(source);\n    return source;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    relative.protocol = source.protocol;\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[relative.protocol] &&\n        relative.hostname && !relative.pathname) {\n      relative.path = relative.pathname = '/';\n    }\n    relative.href = urlFormat(relative);\n    return relative;\n  }\n\n  if (relative.protocol && relative.protocol !== source.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      relative.href = urlFormat(relative);\n      return relative;\n    }\n    source.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      relative.pathname = relPath.join('/');\n    }\n    source.pathname = relative.pathname;\n    source.search = relative.search;\n    source.query = relative.query;\n    source.host = relative.host || '';\n    source.auth = relative.auth;\n    source.hostname = relative.hostname || relative.host;\n    source.port = relative.port;\n    //to support http.request\n    if (source.pathname !== undefined || source.search !== undefined) {\n      source.path = (source.pathname ? source.pathname : '') +\n                    (source.search ? source.search : '');\n    }\n    source.slashes = source.slashes || relative.slashes;\n    source.href = urlFormat(source);\n    return source;\n  }\n\n  var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host !== undefined ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (source.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = source.pathname && source.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = source.protocol &&\n          !slashedProtocol[source.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // source.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n\n    delete source.hostname;\n    delete source.port;\n    if (source.host) {\n      if (srcPath[0] === '') srcPath[0] = source.host;\n      else srcPath.unshift(source.host);\n    }\n    delete source.host;\n    if (relative.protocol) {\n      delete relative.hostname;\n      delete relative.port;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      delete relative.host;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    source.host = (relative.host || relative.host === '') ?\n                      relative.host : source.host;\n    source.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : source.hostname;\n    source.search = relative.search;\n    source.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    source.search = relative.search;\n    source.query = relative.query;\n  } else if ('search' in relative) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      source.hostname = source.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = source.host && source.host.indexOf('@') > 0 ?\n                       source.host.split('@') : false;\n      if (authInHost) {\n        source.auth = authInHost.shift();\n        source.host = source.hostname = authInHost.shift();\n      }\n    }\n    source.search = relative.search;\n    source.query = relative.query;\n    //to support http.request\n    if (source.pathname !== undefined || source.search !== undefined) {\n      source.path = (source.pathname ? source.pathname : '') +\n                    (source.search ? source.search : '');\n    }\n    source.href = urlFormat(source);\n    return source;\n  }\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    delete source.pathname;\n    //to support http.request\n    if (!source.search) {\n      source.path = '/' + source.search;\n    } else {\n      delete source.path;\n    }\n    source.href = urlFormat(source);\n    return source;\n  }\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (source.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    source.hostname = source.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = source.host && source.host.indexOf('@') > 0 ?\n                     source.host.split('@') : false;\n    if (authInHost) {\n      source.auth = authInHost.shift();\n      source.host = source.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (source.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  source.pathname = srcPath.join('/');\n  //to support request.http\n  if (source.pathname !== undefined || source.search !== undefined) {\n    source.path = (source.pathname ? source.pathname : '') +\n                  (source.search ? source.search : '');\n  }\n  source.auth = relative.auth || source.auth;\n  source.slashes = source.slashes || relative.slashes;\n  source.href = urlFormat(source);\n  return source;\n}\n\nfunction parseHost(host) {\n  var out = {};\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      out.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) out.hostname = host;\n  return out;\n}\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/lib/modules/util.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j': return JSON.stringify(args[i++]);\n      case '%%': return '%';\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (x === null || typeof x !== 'object') {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\nexports.print = function() {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stdout.write(String(arguments[i]));\n  }\n};\n\n\nexports.puts = function() {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stdout.write(arguments[i] + '\\n');\n  }\n};\n\n\nexports.debug = function(x) {\n  process.stderr.write('DEBUG: ' + x + '\\n');\n};\n\n\nvar error = exports.error = function(x) {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    process.stderr.write(arguments[i] + '\\n');\n  }\n};\n\n\n/**\n* Echos the value of a value. Trys to print the value out\n* in the best way possible given the different types.\n*\n* @param {Object} obj The object to print out.\n* @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n* properties of objects.\n* @param {Number} depth Depth in which to descend in object. Default is 2.\n* @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n* output. Default is false (no coloring).\n*/\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: colors ? stylizeWithColor : stylizeNoColor\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\nvar colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\nvar styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = styles[styleType];\n\n  if (style) {\n    return '\\033[' + colors[style][0] + 'm' + str +\n           '\\033[' + colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value !== exports &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    return value.inspect(recurseTimes);\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = Object.keys(value);\n  var keys = ctx.showHidden ? Object.getOwnPropertyNames(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (typeof value === 'function') {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return ' ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return ' ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\nexports.isArray = isArray;\n\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\nexports.isError = isError;\n\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nvar pWarning;\n\nexports.p = function() {\n  if (!pWarning) {\n    pWarning = 'util.p will be removed in future versions of Node. ' +\n               'Use util.puts(util.inspect()) instead.\\n';\n    exports.error(pWarning);\n  }\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    error(exports.inspect(arguments[i]));\n  }\n};\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\nexports.log = function(msg) {\n  exports.puts(timestamp() + ' - ' + msg.toString());\n};\n\n\nvar execWarning;\nexports.exec = function() {\n  if (!execWarning) {\n    execWarning = 'util.exec has moved to the \"child_process\" module.' +\n                  ' Please update your source code.';\n    error(execWarning);\n  }\n  return require('child_process').exec.apply(this, arguments);\n};\n\n\nexports.pump = function(readStream, writeStream, callback) {\n  var callbackCalled = false;\n\n  function call(a, b, c) {\n    if (callback && !callbackCalled) {\n      callback(a, b, c);\n      callbackCalled = true;\n    }\n  }\n\n  readStream.addListener('data', function(chunk) {\n    if (writeStream.write(chunk) === false) readStream.pause();\n  });\n\n  writeStream.addListener('drain', function() {\n    readStream.resume();\n  });\n\n  readStream.addListener('end', function() {\n    writeStream.end();\n  });\n\n  readStream.addListener('close', function() {\n    call();\n  });\n\n  readStream.addListener('error', function(err) {\n    writeStream.end();\n    call(err);\n  });\n\n  writeStream.addListener('error', function(err) {\n    readStream.destroy();\n    call(err);\n  });\n};\n\n\n/**\n* Inherit the prototype methods from one constructor into another.\n*\n* The Function.prototype.inherits from lang.js rewritten as a standalone\n* function (not on Function.prototype). NOTE: If this file is to be loaded\n* during bootstrapping this function needs to be revritten using some native\n* functions as prototype setup using normal JavaScript does not work as\n* expected during bootstrapping (see mirror.js in r114903).\n*\n* @param {function} ctor Constructor function which needs to inherit the\n* prototype.\n* @param {function} superCtor Constructor function to inherit prototype from.\n*/\nexports.inherits = function(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/ajaxRequests/ajaxRequests.js":"/**\n * Analyzes AJAX requests\n */\n/* global window: true */\n'use strict';\n\nexports.version = '0.2';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('ajaxRequests'); // @desc number of AJAX requests\n\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tphantomas.spy(window.XMLHttpRequest.prototype, 'open', function(result, method, url, async) {\n\t\t\t\t\tphantomas.incrMetric('ajaxRequests');\n\t\t\t\t\tphantomas.addOffender('ajaxRequests', '<%s> [%s]', url, method);\n\t\t\t\t}, true);\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/alerts/alerts.js":"/**\n * Meters number of invocations of window.alert, window.confirm, and\n * window.prompt.\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar alerts = [],\n\t\tconfirms = [],\n\t\tprompts = [];\n\n\tphantomas.on('alert', function(msg) {\n\t\talerts.push(msg);\n\t});\n\n\tphantomas.on('confirm', function(msg) {\n\t\tconfirms.push(msg);\n\t});\n\n\tphantomas.on('prompt', function(msg) {\n\t\tprompts.push(msg);\n\t});\n\n\tphantomas.on('report', function() {\n\t\tphantomas.setMetric('windowAlerts', alerts.length); // @desc number of calls to window.alert\n\t\tphantomas.setMetric('windowConfirms', confirms.length); // @desc number of calls to window.confirm\n\t\tphantomas.setMetric('windowPrompts', prompts.length); // @desc number of calls to window.prompt\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/analyzeCss/analyzeCss.js":"/**\n * Adds CSS related metrics using analyze-css NPM module\n *\n * @see https://github.com/macbre/analyze-css\n *\n * Run phantomas with --analyze-css option to use this module\n *\n * setMetric('cssBase64Length') @desc total length of base64-encoded data in CSS source (will warn about base64-encoded data bigger than 4 kB) @optional @offenders\n * setMetric('cssRedundantBodySelectors') @desc number of redundant body selectors (e.g. body .foo, section body h2, but not body > h1) @optional @offenders\n * setMetric('redundantChildNodesSelectors') @desc number of redundant child nodes selectors @optional @offenders\n * setMetric('cssColors') @desc number of unique colors used in CSS @optional @offenders\n * setMetric('cssComments') @desc number of comments in CSS source @optional @offenders\n * setMetric('cssCommentsLength') @desc length of comments content in CSS source @optional\n * setMetric('cssComplexSelectorsByAttribute') @desc  [number] number of selectors with complex matching by attribute (e.g. [class$=\"foo\"]) @optional @offenders\n * setMetric('cssDuplicatedSelectors') @desc number of CSS selectors defined more than once in CSS source @optional @offenders\n * setMetric('cssDuplicatedProperties') @desc number of CSS property definitions duplicated within a selector @optional @offenders\n * setMetric('cssEmptyRules') @desc number of rules with no properties (e.g. .foo { }) @optional @offenders\n * setMetric('cssExpressions') @desc number of rules with CSS expressions (e.g. expression( document.body.clientWidth > 600 ? \"600px\" : \"auto\" )) @optional @offenders\n * setMetric('cssOldIEFixes') @desc number of fixes for old versions of Internet Explorer (e.g. * html .foo {} and .foo { *zoom: 1 }) @optional @offenders\n * setMetric('cssImports') @desc number of @import rules @optional @offenders\n * setMetric('cssImportants') @desc number of properties with value forced by !important @optional @offenders\n * setMetric('cssMediaQueries') @desc number of media queries (e.g. @media screen and (min-width: 1370px)) @optional @offenders\n * setMetric('cssMultiClassesSelectors') @desc number of selectors with multiple classes (e.g. span.foo.bar) @optional @offenders\n * setMetric('cssOldPropertyPrefixes') @desc number of properties with no longer needed vendor prefix, powered by data provided by autoprefixer (e.g. --moz-border-radius) @optional @offenders\n * setMetric('cssQualifiedSelectors') @desc number of qualified selectors (e.g. header#nav, .foo#bar, h1.title) @optional @offenders\n * setMetric('cssSpecificityIdAvg') @desc average specificity for ID @optional @offenders\n * setMetric('cssSpecificityIdTotal') @desc total specificity for ID @optional\n * setMetric('cssSpecificityClassAvg') @desc average specificity for class, pseudo-class or attribute @optional @offenders\n * setMetric('cssSpecificityClassTotal') @desc total specificity for class, pseudo-class or attribute @optional\n * setMetric('cssSpecificityTagAvg') @desc average specificity for element @optional @offenders\n * setMetric('cssSpecificityTagTotal') @desc total specificity for element @optional\n * setMetric('cssSelectorsByAttribute') @desc [number] number of selectors by attribute (e.g. .foo[value=bar]) @optional\n * setMetric('cssSelectorsByClass') @desc number of selectors by class @optional\n * setMetric('cssSelectorsById') @desc number of selectors by ID @optional\n * setMetric('cssSelectorsByPseudo') @desc number of pseudo-selectors (e,g. :hover) @optional\n * setMetric('cssSelectorsByTag') @desc number of selectors by tag name @optional\n * setMetric('cssLength') @desc length of CSS source (in bytes) @optional @offenders\n * setMetric('cssRules') @desc number of rules (e.g. .foo, .bar { color: red } is counted as one rule) @optional @offenders\n * setMetric('cssSelectors') @desc number of selectors (e.g. .foo, .bar { color: red } is counted as two selectors - .foo and .bar) @optional @offenders\n * setMetric('cssDeclarations') @desc number of declarations (e.g. .foo, .bar { color: red } is counted as one declaration - color: red) @optional @offenders\n * setMetric('cssNotMinified') @desc [number] set to 1 if the provided CSS is not minified @optional @offenders\n * setMetric('cssSelectorLengthAvg') @desc [number] average length of selector (e.g. for ``.foo .bar, #test div > span { color: red }`` will be set as 2.5) @optional @offenders\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '0.6';\n\nexports.module = function(phantomas) {\n\tif (!phantomas.getParam('analyze-css')) {\n\t\tphantomas.log('To enable CSS in-depth metrics please run phantomas with --analyze-css option');\n\t\treturn;\n\t}\n\n\tphantomas.setMetric('cssParsingErrors'); // @desc number of CSS files (or embeded CSS) that failed to be parse by analyze-css @optional\n\tphantomas.setMetric('cssInlineStyles'); // @desc number of inline styles @optional\n\n\tfunction ucfirst(str) {\n\t\t// http://kevin.vanzonneveld.net\n\t\t// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n\t\t// +   bugfixed by: Onno Marsman\n\t\t// +   improved by: Brett Zamir (http://brett-zamir.me)\n\t\t// *     example 1: ucfirst('kevin van zonneveld');\n\t\t// *     returns 1: 'Kevin van zonneveld'\n\t\tstr += '';\n\t\tvar f = str.charAt(0).toUpperCase();\n\t\treturn f + str.substr(1);\n\t}\n\n\t// run analyze-css \"binary\" installed by npm\n\tfunction analyzeCss(options) {\n\t\tvar system = require('system'),\n\t\t\tisWindows = (system.os.name === 'windows'),\n\t\t\tbinary = system.env.ANALYZE_CSS_BIN,\n\t\t\tproxy;\n\n\t\t// force JSON output format\n\t\toptions.push('--json');\n\n\t\t// set basic auth if needed\n\t\tif (phantomas.getParam('auth-user') && phantomas.getParam('auth-pass')) {\n\t\t\toptions.push('--auth-user', phantomas.getParam('auth-user'));\n\t\t\toptions.push('--auth-pass', phantomas.getParam('auth-pass'));\n\t\t}\n\n\t\t// HTTP proxy (#500)\n\t\tproxy = phantomas.getParam('proxy', false, 'string');\n\n\t\tif (proxy !== false) {\n\t\t\tif (proxy.indexOf('http:') < 0) {\n\t\t\t\tproxy = 'http://' + proxy; // http-proxy-agent (used by analyze-css) expects a protocol as well\n\t\t\t}\n\n\t\t\toptions.push('--proxy', proxy);\n\t\t}\n\n\t\tphantomas.runScript(binary, options, function(err, results) {\n\t\t\tvar offenderSrc = (options[0] === '--url') ? '<' + options[1] + '>' : '[inline CSS]';\n\n\t\t\tif (err !== null) {\n\t\t\t\tphantomas.log('analyzeCss: sub-process failed! - %s', err);\n\n\t\t\t\t// report failed CSS parsing (issue #494(\n\t\t\t\tvar offender = offenderSrc;\n\t\t\t\tif (err.message) { // Error object returned\n\t\t\t\t\tif (err.message.indexOf('Unable to parse JSON string') > 0) {\n\t\t\t\t\t\toffender += ' (analyzeCss output error)';\n\t\t\t\t\t}\n\t\t\t\t} else { // Error string returned (stderror)\n\t\t\t\t\tif (err.indexOf('CSS parsing failed') > 0 || err.indexOf('is an invalid expression') > 0) {\n\t\t\t\t\t\toffender += ' (' + err.trim() + ')';\n\t\t\t\t\t} else if (err.indexOf('Empty CSS was provided') > 0) {\n\t\t\t\t\t\toffender += ' (Empty CSS was provided)';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tphantomas.incrMetric('cssParsingErrors');\n\t\t\t\tphantomas.addOffender('cssParsingErrors', offender);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tphantomas.log('analyzeCss: using ' + results.generator);\n\n\t\t\tvar metrics = results.metrics || {},\n\t\t\t\toffenders = results.offenders || {};\n\n\t\t\tObject.keys(metrics).forEach(function(metric) {\n\t\t\t\tvar metricPrefixed = 'css' + ucfirst(metric);\n\n\t\t\t\tif (/Avg$/.test(metricPrefixed)) {\n\t\t\t\t\t// update the average value (see #641)\n\t\t\t\t\tphantomas.addToAvgMetric(metricPrefixed, metrics[metric]);\n\t\t\t\t} else {\n\t\t\t\t\t// increase metrics\n\t\t\t\t\tphantomas.incrMetric(metricPrefixed, metrics[metric]);\n\t\t\t\t}\n\n\t\t\t\t// and add offenders\n\t\t\t\tif (typeof offenders[metric] !== 'undefined') {\n\t\t\t\t\toffenders[metric].forEach(function(msg) {\n\t\t\t\t\t\tvar re = / @ \\d+:\\d+$/;\n\n\t\t\t\t\t\t// add the file name to offenders (issue #442)\n\t\t\t\t\t\t// the message ends with something similar to \" @ 25:1\"\n\t\t\t\t\t\tif (re.test(msg)) {\n\t\t\t\t\t\t\tmsg = msg.replace(re, ' ' + offenderSrc + '$&');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tphantomas.addOffender(metricPrefixed, msg);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// add more offenders (#578)\n\t\t\t\telse {\n\t\t\t\t\tswitch (metricPrefixed) {\n\t\t\t\t\t\tcase 'cssLength':\n\t\t\t\t\t\tcase 'cssRules':\n\t\t\t\t\t\tcase 'cssSelectors':\n\t\t\t\t\t\tcase 'cssDeclarations':\n\t\t\t\t\t\tcase 'cssNotMinified':\n\t\t\t\t\t\tcase 'cssSelectorLengthAvg':\n\t\t\t\t\t\tcase 'cssSpecificityIdAvg':\n\t\t\t\t\t\tcase 'cssSpecificityClassAvg':\n\t\t\t\t\t\tcase 'cssSpecificityTagAvg':\n\t\t\t\t\t\t\tphantomas.addOffender(metricPrefixed, offenderSrc + ': ' + metrics[metric]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tif (entry.isCSS) {\n\t\t\tphantomas.log('CSS: analyzing <%s>...', entry.url);\n\t\t\tanalyzeCss(['--url', entry.url]);\n\t\t}\n\t});\n\n\tphantomas.on('loadFinished', function() {\n\t\tvar fs = require('fs');\n\n\t\t// get the content of inline CSS (issue #397)\n\t\tvar inlineCss = phantomas.evaluate(function() {\n\t\t\treturn (function(phantomas) {\n\t\t\t\tphantomas.spyEnabled(false, 'looking for inline styles');\n\n\t\t\t\tvar styles = document.getElementsByTagName('style'),\n\t\t\t\t\tcontent = [];\n\n\t\t\t\tfor (var i = 0, len = styles.length; i < len; i++) {\n\t\t\t\t\tcontent.push(styles[i].textContent);\n\t\t\t\t}\n\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t\treturn content;\n\t\t\t})(window.__phantomas);\n\t\t});\n\n\t\t// no inline styles found, leave\n\t\tif (inlineCss.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tphantomas.log('analyzeCss: found %d inline styles', inlineCss.length);\n\t\tphantomas.setMetric('cssInlineStyles', inlineCss.length);\n\n\t\t// create the temporary directory\n\t\tfs.makeTree(phantomas.tmpdir());\n\n\t\tinlineCss.forEach(function(cssContent, idx) {\n\t\t\tvar path = phantomas.tmpdir() + 'inline-' + idx + '.css';\n\n\t\t\tphantomas.log('analyzeCss: saving inline CSS #%d to %s (%d bytes)...', (idx + 1), path, cssContent.length);\n\n\t\t\t// save CSS to the file\n\t\t\tfs.write(path, cssContent, 'w');\n\n\t\t\tanalyzeCss(['--file', path]);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/assetsTypes/assetsTypes.js":"/**\n * Analyzes number of requests and sizes of different types of assets\n *\n * setMetric('htmlCount') @desc number of HTML responses @offenders\n * setMetric('htmlSize')  @desc size of HTML responses @unreliable\n * setMetric('cssCount') @desc number of CSS responses @offenders\n * setMetric('cssSize')  @desc size of CSS responses @unreliable\n * setMetric('jsCount') @desc number of JS responses @offenders\n * setMetric('jsSize')  @desc size of JS responses @unreliable\n * setMetric('jsonCount') @desc number of JSON responses @offenders\n * setMetric('jsonSize')  @desc size of JSON responses @unreliable\n * setMetric('imageCount') @desc number of image responses @offenders\n * setMetric('imageSize')  @desc size of image responses @unreliable\n * setMetric('webfontCount') @desc number of web font responses @offenders\n * setMetric('webfontSize')  @desc size of web font responses @unreliable\n * setMetric('videoCount') @desc number of video responses @offenders @gecko\n * setMetric('videoSize')  @desc size of video responses @gecko\n * setMetric('base64Count') @desc number of base64 encoded \"responses\" (no HTTP request was actually made) @offenders\n * setMetric('base64Size')  @desc size of base64 encoded responses @unreliable\n * setMetric('otherCount') @desc number of other responses @offenders\n * setMetric('otherSize')  @desc size of other responses @unreliable\n */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\t['html', 'css', 'js', 'json', 'image', 'video', 'webfont', 'base64', 'other'].forEach(function(key) {\n\t\tphantomas.setMetric(key + 'Count');\n\t\tphantomas.setMetric(key + 'Size');\n\t});\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar size = entry.contentLength;\n\n\t\tphantomas.incrMetric(entry.type + 'Count');\n\t\tphantomas.incrMetric(entry.type + 'Size', size);\n\n\t\tphantomas.addOffender(entry.type + 'Count', entry.url + ' (size: ' + (size / 1024).toFixed(2) + ' kB, latency: ' + entry.timeToFirstByte + ' ms)');\n\t});\n\n\tphantomas.on('base64recv', function(entry, res) {\n\t\tphantomas.incrMetric('base64Count');\n\t\tphantomas.incrMetric('base64Size', entry.contentLength);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/blockDomains/blockDomains.js":"/**\n * Aborts requests to external resources or given domains\n *\n * Does not emit any metrics\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar ourDomain = false,\n\n\t\t// --no-externals\n\t\tnoExternalsMode = (phantomas.getParam('no-externals') === true),\n\t\t// --allow-domain .fastly.net,.googleapis.com\n\t\tallowedDomains = phantomas.getParam('allow-domain'),\n\t\tallowedDomainsRegExp,\n\t\t// --block-domain google-analytics.com\n\t\tblockedDomains = phantomas.getParam('block-domain'),\n\t\tblockedDomainsRegExp;\n\n\tfunction checkBlock(domain) {\n\t\tvar blocked = false;\n\n\t\t// --no-externals\n\t\tif (noExternalsMode && ourDomain !== false && domain !== ourDomain) {\n\t\t\tblocked = true;\n\t\t}\n\n\t\t// match blacklist (--block-domain)\n\t\tif (blockedDomainsRegExp && blockedDomainsRegExp.test(domain)) {\n\t\t\tblocked = true;\n\t\t}\n\n\t\t// match whitelist (--allow-domain)\n\t\tif (allowedDomainsRegExp) {\n\t\t\tif (allowedDomainsRegExp.test(domain) || domain === ourDomain) {\n\t\t\t\tblocked = false;\n\t\t\t} else {\n\t\t\t\tblocked = true;\n\t\t\t}\n\t\t}\n\n\t\treturn blocked;\n\t}\n\n\t// parse settings\n\tfunction parseParameter(value) {\n\t\treturn value.\n\t\tsplit(',').\n\t\tmap(function(item) {\n\t\t\treturn item.trim();\n\t\t});\n\t}\n\n\tallowedDomains = (typeof allowedDomains === 'string') ? parseParameter(allowedDomains) : false;\n\tblockedDomains = (typeof blockedDomains === 'string') ? parseParameter(blockedDomains) : false;\n\n\tif (noExternalsMode) {\n\t\tphantomas.log('Block domains: working in --no-externals mode');\n\t}\n\n\tif (allowedDomains !== false) {\n\t\tphantomas.log('Block domains: whitelist - ' + allowedDomains.join(', '));\n\t\tallowedDomainsRegExp = new RegExp('(' + allowedDomains.join('|') + ')$');\n\t}\n\n\tif (blockedDomains !== false) {\n\t\tphantomas.log('Block domains: blacklist - ' + blockedDomains.join(', '));\n\t\tblockedDomainsRegExp = new RegExp('(' + blockedDomains.join('|') + ')$');\n\t}\n\n\t// get the \"main\" domain from the first request (see issues #197 and #535)\n\tphantomas.on('beforeSend', function(entry) {\n\t\tif (!ourDomain) {\n\t\t\tourDomain = entry.domain;\n\t\t\tphantomas.log('Block domains: assuming \"%s\" to be the main domain (from the first request sent)', ourDomain);\n\t\t}\n\t});\n\n\t// check each request before sending\n\tphantomas.on('beforeSend', function(entry) {\n\t\tif (checkBlock(entry.domain)) {\n\t\t\tentry.block();\n\n\t\t\t// stats\n\t\t\tphantomas.incrMetric('blockedRequests'); // @desc number of requests blocked due to domain filtering @optional\n\t\t\tphantomas.addOffender('blockedRequests', entry.url);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/cacheHits/cacheHits.js":"/**\n * Analyzes Age and X-Cache headers from caching servers like Squid or Varnish\n */\n'use strict';\n\nexports.version = '0.3';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('cacheHits'); // @desc number of cache hits @offenders\n\tphantomas.setMetric('cacheMisses'); // @desc number of cache misses @offenders\n\tphantomas.setMetric('cachePasses'); // @desc number of cache passes @offenders\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar age, xCacheHeader,\n\t\t\tisHit, isMiss, isPass;\n\n\t\t// parser response headers\n\t\t//\n\t\t// X-Cache:HIT, HIT\n\t\t// X-Cache:arsenic miss (0)\n\t\t// Age: 170221\n\t\tage = parseInt(entry.headers.Age, 10);\n\t\txCacheHeader = (entry.headers['X-Cache'] || '').toLowerCase();\n\n\t\tif (xCacheHeader !== '') {\n\t\t\tisHit = xCacheHeader.indexOf('hit') > -1;\n\n\t\t\tif (!isHit) {\n\t\t\t\tisPass = xCacheHeader.indexOf('pass') > -1;\n\t\t\t\tisMiss = xCacheHeader.indexOf('miss') > -1;\n\t\t\t}\n\t\t}\n\t\t// @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.6\n\t\telse if (typeof age === 'number') {\n\t\t\tisHit = age > 0;\n\t\t\t// Varnish sets age to 0 for fresh & not cached objects\n\t\t\tisMiss = age === 0;\n\t\t}\n\n\t\t// now set metrics\n\t\tif (isHit) {\n\t\t\tphantomas.incrMetric('cacheHits');\n\t\t\tphantomas.addOffender('cacheHits', entry.url);\n\t\t} else if (isPass) {\n\t\t\tphantomas.incrMetric('cachePasses');\n\t\t\tphantomas.addOffender('cachePasses', entry.url);\n\t\t} else if (isMiss) {\n\t\t\tphantomas.incrMetric('cacheMisses');\n\t\t\tphantomas.addOffender('cacheMisses', entry.url);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/caching/caching.js":"/**\n * Analyzes HTTP caching headers\n *\n * @see https://developers.google.com/speed/docs/best-practices/caching\n */\n'use strict';\n\nexports.version = '0.2';\n\nexports.module = function(phantomas) {\n\tvar cacheControlRegExp = /max-age=(\\d+)/;\n\n\tfunction getCachingTime(url, headers) {\n\t\t// false means \"no caching\"\n\t\tvar ttl = false,\n\t\t\theaderName,\n\t\t\tnow = new Date(),\n\t\t\theaderDate;\n\n\t\tfor (headerName in headers) {\n\t\t\tvar value = headers[headerName];\n\n\t\t\tswitch (headerName.toLowerCase()) {\n\t\t\t\t// parse max-age=...\n\t\t\t\t//\n\t\t\t\t// max-age=2592000\n\t\t\t\t// public, max-age=300, must-revalidate\n\t\t\t\tcase 'cache-control':\n\t\t\t\t\tvar matches = value.match(cacheControlRegExp);\n\n\t\t\t\t\tif (matches) {\n\t\t\t\t\t\tttl = parseInt(matches[1], 10);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// catch Expires and Pragma headers\n\t\t\t\tcase 'expires':\n\t\t\t\tcase 'pragma':\n\t\t\t\t\t// and Varnish specific headers\n\t\t\t\tcase 'x-pass-expires':\n\t\t\t\tcase 'x-pass-cache-control':\n\t\t\t\t\tphantomas.incrMetric('oldCachingHeaders'); // @desc number of responses with old, HTTP 1.0 caching headers (Expires and Pragma)\n\t\t\t\t\tphantomas.addOffender('oldCachingHeaders', url + ' - ' + headerName + ': ' + value);\n\t\t\t\t\tif (ttl === false) {\n\t\t\t\t\t\theaderDate = Date.parse(value);\n\t\t\t\t\t\tif (headerDate) ttl = Math.round((headerDate - now) / 1000);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//console.log(JSON.stringify(headers)); console.log(\"TTL: \" + ttl + ' s');\n\n\t\treturn ttl;\n\t}\n\n\tphantomas.setMetric('cachingNotSpecified'); // @desc number of responses with no caching header sent (no Cache-Control header)\n\tphantomas.setMetric('cachingTooShort'); // @desc number of responses with too short (less than a week) caching time\n\tphantomas.setMetric('cachingDisabled'); // @desc number of responses with caching disabled (max-age=0)\n\n\tphantomas.setMetric('oldCachingHeaders');\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar ttl = getCachingTime(entry.url, entry.headers);\n\n\t\t// static assets\n\t\tif (entry.isImage || entry.isJS || entry.isCSS) {\n\t\t\tif (ttl === false) {\n\t\t\t\tphantomas.incrMetric('cachingNotSpecified');\n\t\t\t\tphantomas.addOffender('cachingNotSpecified', entry.url);\n\t\t\t} else if (ttl <= 0) {\n\t\t\t\tphantomas.incrMetric('cachingDisabled');\n\t\t\t\tphantomas.addOffender('cachingDisabled', entry.url);\n\t\t\t} else if (ttl < 7 * 86400) {\n\t\t\t\tphantomas.incrMetric('cachingTooShort');\n\t\t\t\tphantomas.addOffender('cachingTooShort', entry.url + ' cached for ' + ttl + ' s');\n\t\t\t}\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/console/console.js":"/**\n * Meters number of console logs\n */\n'use strict';\n\nexports.version = '0.2';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('consoleMessages'); // @desc number of calls to console.* functions\n\n\tphantomas.on('consoleLog', function(msg) {\n\t\tphantomas.incrMetric('consoleMessages');\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/documentHeight/documentHeight.js":"/**\n * Measure document height\n */\n/* global document: true */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('documentHeight'); // @desc the page height [px]\n\n\tphantomas.on('report', function() {\n\t\tphantomas.setMetricEvaluate('documentHeight', function() {\n\t\t\t// @see https://github.com/HTTPArchive/httparchive/blob/master/custom_metrics/document_height.js\n\t\t\tvar doc = document,\n\t\t\t\tbody = doc.body,\n\t\t\t\tdocelem = doc.documentElement;\n\n\t\t\treturn Math.max(body.scrollHeight, body.offsetHeight, docelem.clientHeight, docelem.scrollHeight, docelem.offsetHeight);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/domains/domains.js":"/**\n * Domains monitor\n */\n'use strict';\n\nexports.version = '0.3';\n\nvar Stats = require('../../lib/fast-stats').Stats;\n\nexports.module = function(phantomas) {\n\tvar Collection = require('../../lib/collection'),\n\t\tdomains = new Collection();\n\n\tphantomas.setMetric('domains'); // @desc number of domains used to fetch the page @offenders\n\tphantomas.setMetric('maxRequestsPerDomain'); // @desc maximum number of requests fetched from a single domain\n\tphantomas.setMetric('medianRequestsPerDomain'); // @desc median of number of requests fetched from each domain\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar domain = entry.domain;\n\n\t\tif (domain) {\n\t\t\tdomains.push(domain);\n\t\t}\n\t});\n\n\t// add metrics\n\tphantomas.on('report', function() {\n\t\tvar domainsRequests = new Stats();\n\n\t\tdomains.sort().forEach(function(name, cnt) {\n\t\t\tphantomas.addOffender('domains', '%s: %d request(s)', name, cnt);\n\n\t\t\tdomainsRequests.push(cnt);\n\t\t});\n\n\t\tif (domains.getLength() > 0) {\n\t\t\tphantomas.setMetric('domains', domains.getLength());\n\t\t\tphantomas.setMetric('maxRequestsPerDomain', domainsRequests.range()[1]);\n\t\t\tphantomas.setMetric('medianRequestsPerDomain', domainsRequests.median());\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/domComplexity/domComplexity.js":"/**\n * Analyzes DOM complexity\n */\n/* global document: true, Node: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\n\t// total length of HTML comments (including <!-- --> brackets)\n\tphantomas.setMetric('commentsSize'); // @desc the size of HTML comments on the page @offenders\n\n\t// total length of text nodes with whitespaces only (i.e. pretty formatting of HTML)\n\tphantomas.setMetric('whiteSpacesSize'); // @desc the size of text nodes with whitespaces only\n\n\t// count all tags\n\tphantomas.setMetric('DOMelementsCount'); // @desc total number of HTML element nodes\n\tphantomas.setMetric('DOMelementMaxDepth'); // @desc maximum level on nesting of HTML element node\n\n\t// nodes with inlines CSS (style attribute)\n\tphantomas.setMetric('nodesWithInlineCSS'); // @desc number of nodes with inline CSS styling (with style attribute) @offenders\n\n\t// images\n\t// TODO: move to a separate module\n\tphantomas.setMetric('imagesScaledDown'); // @desc number of <img> nodes that have images scaled down in HTML @offenders\n\tphantomas.setMetric('imagesWithoutDimensions'); // @desc number of <img> nodes without both width and height attribute @offenders\n\n\t// keep the track of SVG graphics (#479)\n\tvar svgResources = [];\n\tphantomas.on('recv', function(entry) {\n\t\tif (entry.isSVG) {\n\t\t\tsvgResources.push(entry.url);\n\t\t\tphantomas.log('imagesScaledDown: will ignore <%s> [%s]', entry.url, entry.contentType);\n\t\t}\n\t});\n\n\t// duplicated ID (issue #392)\n\tphantomas.setMetric('DOMidDuplicated'); // @desc number of duplicated IDs found in DOM\n\n\tvar Collection = require('../../lib/collection'),\n\t\tDOMids = new Collection();\n\n\tphantomas.on('domId', function(id) {\n\t\tDOMids.push(id);\n\t});\n\n\t// HTML size\n\tphantomas.on('report', function() {\n\t\tphantomas.setMetricEvaluate('bodyHTMLSize', function() { // @desc the size of body tag content (document.body.innerHTML.length)\n\t\t\treturn document.body && document.body.innerHTML.length || 0;\n\t\t});\n\n\t\tvar scope = {\n\t\t\tsvgResources: svgResources\n\t\t};\n\n\t\tphantomas.evaluate(function(scope) {\n\t\t\t(function(phantomas) {\n\t\t\t\tvar runner = new phantomas.nodeRunner(),\n\t\t\t\t\twhitespacesRegExp = /^\\s+$/,\n\t\t\t\t\tDOMelementMaxDepth = 0,\n\t\t\t\t\tDOMelementMaxDepthNodes = [], // stores offenders for DOMelementMaxDepth (issue #414)\n\t\t\t\t\tsize = 0;\n\n\t\t\t\trunner.walk(document.body, function(node, depth) {\n\t\t\t\t\tvar path = '';\n\n\t\t\t\t\tswitch (node.nodeType) {\n\t\t\t\t\t\tcase Node.COMMENT_NODE:\n\t\t\t\t\t\t\tsize = node.textContent.length + 7; // '<!--' + '-->'.length\n\t\t\t\t\t\t\tphantomas.incrMetric('commentsSize', size);\n\n\t\t\t\t\t\t\t// log HTML comments bigger than 64 characters\n\t\t\t\t\t\t\tif (size > 64) {\n\t\t\t\t\t\t\t\tphantomas.addOffender('commentsSize', '%s (%d characters)', phantomas.getDOMPath(node), size);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase Node.ELEMENT_NODE:\n\t\t\t\t\t\t\tpath = phantomas.getDOMPath(node);\n\n\t\t\t\t\t\t\tphantomas.incrMetric('DOMelementsCount');\n\n\t\t\t\t\t\t\tif (depth > DOMelementMaxDepth) {\n\t\t\t\t\t\t\t\tDOMelementMaxDepth = depth;\n\t\t\t\t\t\t\t\tDOMelementMaxDepthNodes = [path];\n\t\t\t\t\t\t\t} else if (depth === DOMelementMaxDepth) {\n\t\t\t\t\t\t\t\tDOMelementMaxDepthNodes.push(path);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// report duplicated ID (issue #392)\n\t\t\t\t\t\t\tif (typeof node.id === 'string' && node.id !== '') {\n\t\t\t\t\t\t\t\tphantomas.emit('domId', node.id);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// ignore inline <script> tags\n\t\t\t\t\t\t\tif (node.nodeName === 'SCRIPT') {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// images\n\t\t\t\t\t\t\tif (node.nodeName === 'IMG') {\n\t\t\t\t\t\t\t\tvar imgWidth = node.hasAttribute('width') ? node.getAttribute('width') : false,\n\t\t\t\t\t\t\t\t\timgHeight = node.hasAttribute('height') ? node.getAttribute('height') : false,\n\t\t\t\t\t\t\t\t\tnodeStyle;\n\n\t\t\t\t\t\t\t\t// get dimensions from inline CSS (issue #399)\n\t\t\t\t\t\t\t\tif (imgWidth === false || imgHeight === false) {\n\t\t\t\t\t\t\t\t\tnodeStyle = node.style;\n\n\t\t\t\t\t\t\t\t\timgWidth = parseInt(node.style.width, 10) || false;\n\t\t\t\t\t\t\t\t\timgHeight = parseInt(node.style.height, 10) || false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (imgWidth === false || imgHeight === false) {\n\t\t\t\t\t\t\t\t\tphantomas.incrMetric('imagesWithoutDimensions');\n\t\t\t\t\t\t\t\t\tphantomas.addOffender('imagesWithoutDimensions', '%s <%s>', path, node.src);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (node.naturalHeight && node.naturalWidth && imgHeight && imgWidth) {\n\t\t\t\t\t\t\t\t\tif (node.naturalHeight > imgHeight || node.naturalWidth > imgWidth) {\n\t\t\t\t\t\t\t\t\t\tif (scope.svgResources.indexOf(node.src) === -1) {\n\t\t\t\t\t\t\t\t\t\t\tphantomas.incrMetric('imagesScaledDown');\n\t\t\t\t\t\t\t\t\t\t\tphantomas.addOffender('imagesScaledDown', '%s (%dx%d -> %dx%d)', node.src, node.naturalWidth, node.naturalHeight, imgWidth, imgHeight);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tphantomas.log('imagesScaledDown: ignored <%s> (is SVG)', node.src);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// count nodes with inline CSS\n\t\t\t\t\t\t\tif (node.hasAttribute('style')) {\n\t\t\t\t\t\t\t\tphantomas.incrMetric('nodesWithInlineCSS');\n\t\t\t\t\t\t\t\tphantomas.addOffender('nodesWithInlineCSS', '%s (%s)', path, node.getAttribute('style'));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase Node.TEXT_NODE:\n\t\t\t\t\t\t\tif (whitespacesRegExp.test(node.textContent)) {\n\t\t\t\t\t\t\t\tphantomas.incrMetric('whiteSpacesSize', node.textContent.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tphantomas.setMetric('DOMelementMaxDepth', DOMelementMaxDepth);\n\t\t\t\tDOMelementMaxDepthNodes.forEach(function(path) {\n\t\t\t\t\tphantomas.addOffender('DOMelementMaxDepth', path);\n\t\t\t\t});\n\n\t\t\t\t// count <iframe> tags\n\t\t\t\tphantomas.spyEnabled(false, 'counting iframes');\n\t\t\t\tphantomas.setMetric('iframesCount', document.querySelectorAll('iframe').length); // @desc number of iframe nodes\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t}(window.__phantomas));\n\t\t}, scope);\n\n\t\tDOMids.sort().forEach(function(id, cnt) {\n\t\t\tif (cnt > 1) {\n\t\t\t\tphantomas.incrMetric('DOMidDuplicated');\n\t\t\t\tphantomas.addOffender('DOMidDuplicated', '%s: %d occurrences', id, cnt);\n\t\t\t}\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/domHiddenContent/domHiddenContent.js":"/**\n * Analyzes DOM hidden content\n */\n/* global document: true, Node: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\n\t// total length of HTML of hidden elements (i.e. display: none)\n\tphantomas.setMetric('hiddenContentSize'); // @desc the size of content of hidden elements on the page (with CSS display: none) @offenders\n\tphantomas.setMetric('hiddenImages'); // @desc number of hidden images that can be lazy-loaded @offenders\n\n\t// HTML size\n\tphantomas.on('report', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tvar runner = new phantomas.nodeRunner(),\n\t\t\t\t\tlazyLoadableImages = {};\n\n\t\t\t\tphantomas.spyEnabled(false, 'analyzing hidden content');\n\n\t\t\t\trunner.walk(document.body, function(node, depth) {\n\t\t\t\t\tswitch (node.nodeType) {\n\t\t\t\t\t\tcase Node.ELEMENT_NODE:\n\t\t\t\t\t\t\t// @see https://developer.mozilla.org/en/DOM%3awindow.getComputedStyle\n\t\t\t\t\t\t\tvar styles = window.getComputedStyle(node);\n\n\t\t\t\t\t\t\tif (styles && styles.getPropertyValue('display') === 'none') {\n\t\t\t\t\t\t\t\tif (typeof node.innerHTML === 'string') {\n\t\t\t\t\t\t\t\t\tvar size = node.innerHTML.length;\n\t\t\t\t\t\t\t\t\tphantomas.incrMetric('hiddenContentSize', size);\n\n\t\t\t\t\t\t\t\t\t// log hidden containers bigger than 1 kB\n\t\t\t\t\t\t\t\t\tif (size > 1024) {\n\t\t\t\t\t\t\t\t\t\tphantomas.addOffender('hiddenContentSize', phantomas.getDOMPath(node) + ' (' + size + ' characters)');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// count hidden images that can be lazy loaded (issue #524)\n\t\t\t\t\t\t\t\tvar images = [];\n\t\t\t\t\t\t\t\tif (node.tagName === 'IMG') {\n\t\t\t\t\t\t\t\t\timages = [node];\n\t\t\t\t\t\t\t\t} else if (typeof node.querySelectorAll === 'function') {\n\t\t\t\t\t\t\t\t\timages = node.querySelectorAll('img') || [];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var i = 0, len = images.length; i < len; i++) {\n\t\t\t\t\t\t\t\t\tvar src = images[i].src,\n\t\t\t\t\t\t\t\t\t\tpath;\n\n\t\t\t\t\t\t\t\t\tif (src === '' || src.indexOf('data:image') === 0) continue;\n\n\t\t\t\t\t\t\t\t\tif (!lazyLoadableImages[src]) {\n\t\t\t\t\t\t\t\t\t\tpath = phantomas.getDOMPath(images[i]);\n\n\t\t\t\t\t\t\t\t\t\tlazyLoadableImages[src] = {\n\t\t\t\t\t\t\t\t\t\t\tpath: path\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// don't run for child nodes as they're hidden as well\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tObject.keys(lazyLoadableImages).forEach(function(img) {\n\t\t\t\t\tvar entry = lazyLoadableImages[img];\n\n\t\t\t\t\tphantomas.incrMetric('hiddenImages');\n\t\t\t\t\tphantomas.addOffender('hiddenImages', img);\n\n\t\t\t\t\tphantomas.log('hiddenImages: <%s> image (%s) is hidden and can be lazy-loaded', img, entry.path);\n\t\t\t\t});\n\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t}(window.__phantomas));\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/domMutations/domMutations.js":"/**\n * Analyzes DOM changes via MutationObserver API\n *\n * @see http://dev.opera.com/articles/mutation-observers-tutorial/\n */\n/* global window: true, document: true, MutationObserver: true */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\t// SlimerJS only metrics\n\tphantomas.setMetric('DOMmutationsInserts'); // @desc number of <body> node inserts\n\tphantomas.setMetric('DOMmutationsRemoves'); // @desc number of <body> node removes\n\tphantomas.setMetric('DOMmutationsAttributes'); // @desc number of DOM nodes attributes changes\n\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tif ('MutationObserver' in window) {\n\t\t\t\t\t// wait for DOM ready\n\t\t\t\t\tdocument.addEventListener('readystatechange', function() {\n\t\t\t\t\t\tif (document.readyState !== 'interactive') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tphantomas.log('DOM query: setting up MutationObserver...');\n\n\t\t\t\t\t\tvar observer = new MutationObserver(function(allmutations) {\n\t\t\t\t\t\t\tallmutations.map(function(mutation) {\n\t\t\t\t\t\t\t\t// @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationRecord\n\t\t\t\t\t\t\t\tvar targetPath = phantomas.getDOMPath(mutation.target, true /* dontGoUpTheDom */ );\n\n\t\t\t\t\t\t\t\tswitch (mutation.type) {\n\t\t\t\t\t\t\t\t\tcase 'attributes':\n\t\t\t\t\t\t\t\t\t\tphantomas.log('DOM mutation: \"%s\" attr (was \"%s\") set on %s',\n\t\t\t\t\t\t\t\t\t\t\tmutation.attributeName,\n\t\t\t\t\t\t\t\t\t\t\tmutation.oldValue || '',\n\t\t\t\t\t\t\t\t\t\t\ttargetPath\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tphantomas.incrMetric('DOMmutationsAttributes');\n\t\t\t\t\t\t\t\t\t\tphantomas.addOffender('DOMmutationsAttributes', '\"%s\" attr set on %s', mutation.attributeName, targetPath);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'childList':\n\t\t\t\t\t\t\t\t\t\tvar wereAdded = (mutation.addedNodes.length > 0),\n\t\t\t\t\t\t\t\t\t\t\tnodes = wereAdded ? mutation.addedNodes : mutation.removedNodes,\n\t\t\t\t\t\t\t\t\t\t\tnodePath;\n\n\t\t\t\t\t\t\t\t\t\tfor (var n = 0, nodesLen = nodes.length; n < nodesLen; n++) {\n\t\t\t\t\t\t\t\t\t\t\tnodePath = phantomas.getDOMPath(nodes[n], true /* dontGoUpTheDom */ );\n\n\t\t\t\t\t\t\t\t\t\t\tphantomas.log('DOM mutation: node \"%s\" %s \"%s\"',\n\t\t\t\t\t\t\t\t\t\t\t\tnodePath,\n\t\t\t\t\t\t\t\t\t\t\t\twereAdded ? 'added to' : 'removed from',\n\t\t\t\t\t\t\t\t\t\t\t\ttargetPath\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tif (wereAdded) {\n\t\t\t\t\t\t\t\t\t\t\t\tphantomas.incrMetric('DOMmutationsInserts');\n\t\t\t\t\t\t\t\t\t\t\t\tphantomas.addOffender('DOMmutationsInserts', '\"%s\" added to \"%s\"', nodePath, targetPath);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tphantomas.incrMetric('DOMmutationsRemoves');\n\t\t\t\t\t\t\t\t\t\t\t\tphantomas.addOffender('DOMmutationsRemoves', '\"%s\" removed from \"%s\"', nodePath, targetPath);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tphantomas.log('DOM mutation: %s', mutation.type);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tobserver.observe(document.body, {\n\t\t\t\t\t\t\tchildList: true,\n\t\t\t\t\t\t\tattributes: true,\n\t\t\t\t\t\t\tcharacterData: true,\n\t\t\t\t\t\t\tsubtree: true,\n\t\t\t\t\t\t\tattributeOldValue: true\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tphantomas.log('DOM query: MutationObserver not available!');\n\t\t\t\t}\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/domQueries/domQueries.js":"/**\n * Analyzes DOM queries done via native DOM methods\n */\n/* global Element: true, Document: true, Node: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('DOMqueries'); // @desc number of all DOM queries @offenders\n\tphantomas.setMetric('DOMqueriesWithoutResults'); // @desc number of DOM queries that returned nothing @offenders\n\tphantomas.setMetric('DOMqueriesById'); // @desc number of document.getElementById calls\n\tphantomas.setMetric('DOMqueriesByClassName'); // @desc number of document.getElementsByClassName calls\n\tphantomas.setMetric('DOMqueriesByTagName'); // @desc number of document.getElementsByTagName calls\n\tphantomas.setMetric('DOMqueriesByQuerySelectorAll'); // @desc number of document.querySelector(All) calls\n\tphantomas.setMetric('DOMinserts'); // @desc number of DOM nodes inserts\n\tphantomas.setMetric('DOMqueriesDuplicated'); // @desc number of DOM queries called more than once\n\tphantomas.setMetric('DOMqueriesAvoidable'); // @desc number of repeated uses of a duplicated query \n\n\t// fake native DOM functions\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tfunction querySpy(type, query, fnName, context, hasNoResults) {\n\t\t\t\t\tphantomas.emit('domQuery', type, query, fnName, context, hasNoResults); // @desc DOM query has been made\n\t\t\t\t}\n\n\t\t\t\tphantomas.spy(Document.prototype, 'getElementById', function(results, id) {\n\t\t\t\t\tphantomas.incrMetric('DOMqueriesById');\n\t\t\t\t\tphantomas.addOffender('DOMqueriesById', '#%s (in %s)', id, '#document');\n\t\t\t\t\tquerySpy('id', '#' + id, 'getElementById', '#document', (results === null));\n\t\t\t\t}, true);\n\n\t\t\t\t// selectors by class name\n\t\t\t\tfunction selectorClassNameSpy(results, className) {\n\t\t\t\t\t/* jshint validthis: true */\n\t\t\t\t\tvar context = phantomas.getDOMPath(this);\n\n\t\t\t\t\tphantomas.incrMetric('DOMqueriesByClassName');\n\t\t\t\t\tphantomas.addOffender('DOMqueriesByClassName', '.%s (in %s)', className, context);\n\t\t\t\t\tquerySpy('class', '.' + className, 'getElementsByClassName', context, (results.length === 0));\n\t\t\t\t}\n\n\t\t\t\tphantomas.spy(Document.prototype, 'getElementsByClassName', selectorClassNameSpy, true);\n\t\t\t\tphantomas.spy(Element.prototype, 'getElementsByClassName', selectorClassNameSpy, true);\n\n\t\t\t\t// selectors by tag name\n\t\t\t\tfunction selectorTagNameSpy(results, tagName) {\n\t\t\t\t\t/* jshint validthis: true */\n\t\t\t\t\tvar context = phantomas.getDOMPath(this);\n\n\t\t\t\t\t// querying by BODY and body is the same (issue #419)\n\t\t\t\t\ttagName = tagName.toLowerCase();\n\n\t\t\t\t\tphantomas.incrMetric('DOMqueriesByTagName');\n\t\t\t\t\tphantomas.addOffender('DOMqueriesByTagName', '%s (in %s)', tagName, context);\n\t\t\t\t\tquerySpy('tag name', tagName, 'getElementsByTagName', context, (results.length === 0));\n\t\t\t\t}\n\n\t\t\t\tphantomas.spy(Document.prototype, 'getElementsByTagName', selectorTagNameSpy, true);\n\t\t\t\tphantomas.spy(Element.prototype, 'getElementsByTagName', selectorTagNameSpy, true);\n\n\t\t\t\t// selector queries\n\t\t\t\tfunction selectorQuerySpy(results, selector) {\n\t\t\t\t\t/* jshint validthis: true */\n\t\t\t\t\tvar context = phantomas.getDOMPath(this);\n\n\t\t\t\t\tphantomas.incrMetric('DOMqueriesByQuerySelectorAll');\n\t\t\t\t\tphantomas.addOffender('DOMqueriesByQuerySelectorAll', '%s (in %s)', selector, context);\n\t\t\t\t\tquerySpy('selector', selector, 'querySelectorAll', context, (results === null || results.length === 0));\n\t\t\t\t}\n\n\t\t\t\tphantomas.spy(Document.prototype, 'querySelector', selectorQuerySpy, true);\n\t\t\t\tphantomas.spy(Document.prototype, 'querySelectorAll', selectorQuerySpy, true);\n\t\t\t\tphantomas.spy(Element.prototype, 'querySelector', selectorQuerySpy, true);\n\t\t\t\tphantomas.spy(Element.prototype, 'querySelectorAll', selectorQuerySpy, true);\n\n\t\t\t\t// count DOM inserts\n\t\t\t\tfunction appendSpy(child) {\n\t\t\t\t\t/* jshint validthis: true */\n\t\t\t\t\t// ignore appending to the node that's not yet added to DOM tree\n\t\t\t\t\tif (!this.parentNode) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar destNodePath = phantomas.getDOMPath(this),\n\t\t\t\t\t\tappendedNodePath = phantomas.getDOMPath(child);\n\n\t\t\t\t\t// skip undefined nodes (issue #560)\n\t\t\t\t\tif (destNodePath === false) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// don't count elements added to fragments as a DOM inserts (issue #350)\n\t\t\t\t\t// DocumentFragment > div[0]\n\t\t\t\t\tif (destNodePath.indexOf('DocumentFragment') === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tphantomas.incrMetric('DOMinserts');\n\t\t\t\t\tphantomas.addOffender('DOMinserts', '\"%s\" appended to \"%s\"', appendedNodePath, destNodePath);\n\n\t\t\t\t\tphantomas.log('DOM insert: node \"%s\" appended to \"%s\"', appendedNodePath, destNodePath);\n\t\t\t\t}\n\n\t\t\t\tphantomas.spy(Node.prototype, 'appendChild', appendSpy);\n\t\t\t\tphantomas.spy(Node.prototype, 'insertBefore', appendSpy);\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n\n\t// report DOM queries that return no results (issue #420)\n\tphantomas.on('domQuery', function(type, query, fnName, context, hasNoResults) {\n\t\t// ignore DOM queries within DOM fragments (used internally by jQuery)\n\t\tif (context.indexOf('body') !== 0 && context.indexOf('#document') !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (hasNoResults === true) {\n\t\t\tphantomas.incrMetric('DOMqueriesWithoutResults');\n\t\t\tphantomas.addOffender('DOMqueriesWithoutResults', '%s (in %s) using %s', query, context, fnName);\n\t\t}\n\t});\n\n\t// count DOM queries by either ID, tag name, class name and selector query\n\t// @see https://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-document-doctype\n\tvar Collection = require('../../lib/collection'),\n\t\tDOMqueries = new Collection();\n\n\tphantomas.on('domQuery', function(type, query, fnName, context) {\n\t\tphantomas.log('DOM query: by %s - \"%s\" (using %s) in %s', type, query, fnName, context);\n\t\tphantomas.incrMetric('DOMqueries');\n\n\t\t// Don't count document fragments or not yet inserted elements inside duplicated queries\n\t\tif (context && (\n\t\t\t\tcontext.indexOf('html') === 0 ||\n\t\t\t\tcontext.indexOf('body') === 0 ||\n\t\t\t\tcontext.indexOf('head') === 0 ||\n\t\t\t\tcontext.indexOf('#document') === 0\n\t\t\t)) {\n\t\t\tDOMqueries.push(type + ' \"' + query + '\" (in ' + context + ')');\n\t\t}\n\t});\n\n\tphantomas.on('report', function() {\n\t\tDOMqueries.sort().forEach(function(query, cnt) {\n\t\t\tif (cnt > 1) {\n\t\t\t\tphantomas.incrMetric('DOMqueriesDuplicated');\n\t\t\t\tphantomas.incrMetric('DOMqueriesAvoidable', cnt - 1);\n\t\t\t\tphantomas.addOffender('DOMqueriesDuplicated', '%s: %d queries', query, cnt);\n\t\t\t}\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/globalVariables/globalVariables.js":"/**\n * Counts global JavaScript variables\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '0.3';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('globalVariables'); // @desc number of JS globals variables @offenders\n\tphantomas.setMetric('globalVariablesFalsy'); // @desc number of JS globals variables with falsy value @offenders\n\n\tphantomas.on('report', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tvar globals = [],\n\t\t\t\t\tallowed = ['Components', 'XPCNativeWrapper', 'XPCSafeJSObjectWrapper', 'getInterface', 'netscape', 'GetWeakReference', '_phantom', 'callPhantom', '__phantomas', 'performance'],\n\t\t\t\t\tvarName,\n\t\t\t\t\tiframe,\n\t\t\t\t\tcleanWindow;\n\n\t\t\t\tif (!document.body) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tphantomas.spyEnabled(false, 'counting global variables (injecting an empty iframe)');\n\n\t\t\t\t// create an empty iframe to get the list of core members\n\t\t\t\tiframe = document.createElement('iframe');\n\t\t\t\tiframe.style.display = 'none';\n\t\t\t\tiframe.src = 'about:blank';\n\t\t\t\tdocument.body.appendChild(iframe);\n\n\t\t\t\tcleanWindow = iframe.contentWindow;\n\n\t\t\t\tfor (varName in cleanWindow) {\n\t\t\t\t\tallowed.push(varName);\n\t\t\t\t}\n\n\t\t\t\t// get all members of window and filter them\n\t\t\t\tfor (varName in window) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ((allowed.indexOf(varName) > -1) || (typeof window[varName] === 'undefined') /* ignore variables exposed by window.__defineGetter__ */ ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// filter out 0, 1, 2, ...\n\t\t\t\t\t\tif (/^\\d+$/.test(varName)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tphantomas.incrMetric('globalVariables');\n\t\t\t\t\t\tphantomas.addOffender('globalVariables', varName);\n\n\t\t\t\t\t\tif ([false, null].indexOf(window[varName]) > -1) {\n\t\t\t\t\t\t\tphantomas.incrMetric('globalVariablesFalsy');\n\t\t\t\t\t\t\tphantomas.addOffender('globalVariablesFalsy', '%s = %j', varName, window[varName]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// handle errors (issue #560)\n\t\t\t\t\t\tphantomas.log('globalVariables: error when checking %s - %s!', varName, ex.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// cleanup (issue #297)\n\t\t\t\tdocument.body.removeChild(iframe);\n\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/headers/headers.js":"/**\n * Analyzes HTTP headers in both requests and responses\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('headersCount'); // @desc number of requests and responses headers\n\tphantomas.setMetric('headersSentCount'); // @desc number of headers sent in requests\n\tphantomas.setMetric('headersRecvCount'); // @desc number of headers received in responses\n\n\tphantomas.setMetric('headersSize'); // @desc size of all headers\n\tphantomas.setMetric('headersSentSize'); // @desc size of sent headers\n\tphantomas.setMetric('headersRecvSize'); // @desc size of received headers\n\n\tphantomas.setMetric('headersBiggerThanContent'); // @desc number of responses with headers part bigger than the response body\n\n\tfunction processHeaders(headers) {\n\t\tvar res = {\n\t\t\tcount: 0,\n\t\t\tsize: 0\n\t\t};\n\n\t\tif (headers) {\n\t\t\theaders.forEach(function(header) {\n\t\t\t\tres.count++;\n\t\t\t\tres.size += (header.name + ': ' + header.value + '\\r\\n').length;\n\t\t\t});\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tphantomas.on('send', function(entry, res) {\n\t\tvar headers = processHeaders(res.headers);\n\n\t\tphantomas.incrMetric('headersCount', headers.count);\n\t\tphantomas.incrMetric('headersSize', headers.size);\n\n\t\tphantomas.incrMetric('headersSentCount', headers.count);\n\t\tphantomas.incrMetric('headersSentSize', headers.size);\n\t});\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar headers = processHeaders(res.headers);\n\n\t\tphantomas.incrMetric('headersCount', headers.count);\n\t\tphantomas.incrMetric('headersSize', headers.size);\n\n\t\tphantomas.incrMetric('headersRecvCount', headers.count);\n\t\tphantomas.incrMetric('headersRecvSize', headers.size);\n\n\t\t// skip HTTP 204 No Content responses\n\t\tif ((entry.status !== 204) && (headers.size > entry.contentLength)) {\n\t\t\tphantomas.incrMetric('headersBiggerThanContent');\n\t\t\tphantomas.addOffender('headersBiggerThanContent', '%s (body: %s kB / headers: %s kB)', entry.url, (entry.contentLength / 1024).toFixed(2), (headers.size / 1024).toFixed(2));\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/javaScriptBottlenecks/javaScriptBottlenecks.js":"/**\n * Reports the use of functions known to be serious performance bottlenecks in JS\n *\n * @see http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/\n * @see http://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html\n * @see http://www.stevesouders.com/blog/2012/04/10/dont-docwrite-scripts/\n *\n * Run phantomas with --spy-eval to count eval() calls (see issue #467)\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '0.2';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('documentWriteCalls'); //@desc number of calls to either document.write or document.writeln @offenders\n\tphantomas.setMetric('evalCalls'); // @desc number of calls to eval (either direct or via setTimeout / setInterval) @offenders\n\n\t// spy calls to eval only when requested (issue #467)\n\tvar spyEval = phantomas.getParam('spy-eval') === true;\n\tif (!spyEval) {\n\t\tphantomas.log('javaScriptBottlenecks: to spy calls to eval() run phantomas with --spy-eval option');\n\t}\n\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function(spyEval) {\n\t\t\t(function(phantomas) {\n\t\t\t\tfunction report(msg, caller, backtrace, metric) {\n\t\t\t\t\tphantomas.log(msg + ': from ' + caller + '!');\n\t\t\t\t\tphantomas.log('Backtrace: ' + backtrace);\n\n\t\t\t\t\tphantomas.incrMetric(metric);\n\t\t\t\t\tphantomas.addOffender(metric, \"%s from %s\", msg, caller);\n\t\t\t\t}\n\n\t\t\t\t// spy calls to eval()\n\t\t\t\tif (spyEval) {\n\t\t\t\t\tphantomas.spy(window, 'eval', function(code) {\n\t\t\t\t\t\treport('eval() called directly', phantomas.getCaller(), phantomas.getBacktrace(), 'evalCalls');\n\t\t\t\t\t\tphantomas.log('eval\\'ed code: ' + (code || '').substring(0, 150) + '(...)');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// spy calls to setTimeout / setInterval with string passed instead of a function\n\t\t\t\tphantomas.spy(window, 'setTimeout', function(fn, interval) {\n\t\t\t\t\tif (typeof fn !== 'string') return;\n\n\t\t\t\t\treport('eval() called via setTimeout(\"' + fn + '\")', phantomas.getCaller(), phantomas.getBacktrace(), 'evalCalls');\n\t\t\t\t});\n\n\t\t\t\tphantomas.spy(window, 'setInterval', function(fn, interval) {\n\t\t\t\t\tif (typeof fn !== 'string') return;\n\n\t\t\t\t\treport('eval() called via setInterval(\"' + fn + '\")', phantomas.getCaller(), phantomas.getBacktrace(), 'evalCalls');\n\t\t\t\t});\n\n\t\t\t\t// spy document.write(ln)\n\t\t\t\tphantomas.spy(document, 'write', function(arg) {\n\t\t\t\t\treport('document.write() used', phantomas.getCaller(), phantomas.getBacktrace(), 'documentWriteCalls');\n\t\t\t\t});\n\n\t\t\t\tphantomas.spy(document, 'writeln', function(arg) {\n\t\t\t\t\treport('document.writeln() used', phantomas.getCaller(), phantomas.getBacktrace(), 'documentWriteCalls');\n\t\t\t\t});\n\t\t\t})(window.__phantomas);\n\t\t}, spyEval);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/jQuery/jQuery.js":"/**\n * Analyzes jQuery activity\n *\n * @see http://code.jquery.com/jquery-1.10.2.js\n * @see http://code.jquery.com/jquery-2.1.1.js\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tvar lastUrl;\n\n\tphantomas.setMetric('jQueryVersion', ''); // @desc version of jQuery framework (if loaded) [string]\n\tphantomas.setMetric('jQueryVersionsLoaded'); // @desc number of loaded jQuery \"instances\" (even in the same version)\n\tphantomas.setMetric('jQueryOnDOMReadyFunctions'); // @desc number of functions bound to onDOMReady event\n\tphantomas.setMetric('jQueryWindowOnLoadFunctions'); // @desc number of functions bound to windowOnLoad event\n\tphantomas.setMetric('jQuerySizzleCalls'); // @desc number of calls to Sizzle (including those that will be resolved using querySelectorAll)\n\tphantomas.setMetric('jQueryEventTriggers'); // @desc number of jQuery event triggers\n\tphantomas.setMetric('jQueryDOMReads'); // @desc number of DOM read operations\n\tphantomas.setMetric('jQueryDOMWrites'); // @desc number of DOM write operations\n\tphantomas.setMetric('jQueryDOMWriteReadSwitches'); // @desc number of read operations that follow a series of write operations (will cause repaint and can cause reflow)\n\n\t// spy calls to jQuery functions\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\t// read & write DOM operations (issue #436)\n\t\t\t\tfunction spyReadsAndWrites(jQuery) {\n\t\t\t\t\tvar TYPE_SET = 'write',\n\t\t\t\t\t\tTYPE_GET = 'read';\n\n\t\t\t\t\tfunction report(type, funcName, context, args) {\n\t\t\t\t\t\tvar caller = phantomas.getCaller(1),\n\t\t\t\t\t\t\tcontextPath = phantomas.getDOMPath(context);\n\n\t\t\t\t\t\targs = (typeof args !== 'undefined') ? Array.prototype.slice.apply(args) : undefined;\n\n\t\t\t\t\t\tphantomas.emit('jQueryOp', type, funcName, args, contextPath, caller);\n\t\t\t\t\t}\n\n\t\t\t\t\t// \"complex\" getters and setters\n\t\t\t\t\t[\n\t\t\t\t\t\t'attr',\n\t\t\t\t\t\t'css',\n\t\t\t\t\t\t'prop',\n\t\t\t\t\t].forEach(function(funcName) {\n\t\t\t\t\t\tphantomas.spy(jQuery.fn, funcName, function(propName, val) {\n\t\t\t\t\t\t\t// setter when called with two arguments or provided with key/value set\n\t\t\t\t\t\t\tvar isSet = (typeof val !== 'undefined') || (propName.toString() === '[object Object]');\n\t\t\t\t\t\t\treport(isSet ? TYPE_SET : TYPE_GET, funcName, this[0], arguments);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// simple getters and setters\n\t\t\t\t\t[\n\t\t\t\t\t\t'height',\n\t\t\t\t\t\t'innerHeight',\n\t\t\t\t\t\t'innerWidth',\n\t\t\t\t\t\t'offset',\n\t\t\t\t\t\t'outerHeight',\n\t\t\t\t\t\t'outerWidth',\n\t\t\t\t\t\t'text',\n\t\t\t\t\t\t'width',\n\t\t\t\t\t\t'scrollLeft',\n\t\t\t\t\t\t'scrollTop'\n\t\t\t\t\t].forEach(function(funcName) {\n\t\t\t\t\t\tphantomas.spy(jQuery.fn, funcName, function(val) {\n\t\t\t\t\t\t\t// setter when called with an argument\n\t\t\t\t\t\t\tvar isSet = (typeof val !== 'undefined');\n\t\t\t\t\t\t\treport(isSet ? TYPE_SET : TYPE_GET, funcName, this[0], arguments);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// setters\n\t\t\t\t\t[\n\t\t\t\t\t\t'addClass',\n\t\t\t\t\t\t'removeAttr',\n\t\t\t\t\t\t'removeClass',\n\t\t\t\t\t\t'removeProp',\n\t\t\t\t\t\t'toggleClass',\n\t\t\t\t\t].forEach(function(funcName) {\n\t\t\t\t\t\tphantomas.spy(jQuery.fn, funcName, function(val) {\n\t\t\t\t\t\t\treport(TYPE_SET, funcName, this[0], [val]);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\t// getters\n\t\t\t\t\t[\n\t\t\t\t\t\t'hasClass',\n\t\t\t\t\t\t'position',\n\t\t\t\t\t].forEach(function(funcName) {\n\t\t\t\t\t\tphantomas.spy(jQuery.fn, funcName, function(val) {\n\t\t\t\t\t\t\treport(TYPE_GET, funcName, this[0], arguments);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tphantomas.spyGlobalVar('jQuery', function(jQuery) {\n\t\t\t\t\tvar version;\n\n\t\t\t\t\tif (!jQuery || !jQuery.fn) {\n\t\t\t\t\t\tphantomas.log('jQuery: unable to detect version!');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Tag the current version of jQuery to avoid multiple reports of jQuery being loaded\n\t\t\t\t\t// when it's actually only restored via $.noConflict(true) - see comments in #435\n\t\t\t\t\tif (jQuery.__phantomas === true) {\n\t\t\t\t\t\tphantomas.log('jQuery: this instance has already been seen by phantomas');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery.__phantomas = true;\n\n\t\t\t\t\t// report the version of jQuery\n\t\t\t\t\tversion = jQuery.fn.jquery;\n\t\t\t\t\tphantomas.emit('jQueryLoaded', version);\n\n\t\t\t\t\t// jQuery.ready.promise\n\t\t\t\t\t// works for jQuery 1.8.0+ (released Aug 09 2012)\n\t\t\t\t\tphantomas.spy(jQuery.ready, 'promise', function() {\n\t\t\t\t\t\tphantomas.incrMetric('jQueryOnDOMReadyFunctions');\n\t\t\t\t\t\tphantomas.addOffender('jQueryOnDOMReadyFunctions', phantomas.getCaller(3));\n\t\t\t\t\t}) || phantomas.log('jQuery: can not measure jQueryOnDOMReadyFunctions (jQuery used on the page is too old)!');\n\n\t\t\t\t\t// Sizzle calls - jQuery.find\n\t\t\t\t\t// works for jQuery 1.3+ (released Jan 13 2009)\n\t\t\t\t\tphantomas.spy(jQuery, 'find', function(selector, context) {\n\t\t\t\t\t\tphantomas.incrMetric('jQuerySizzleCalls');\n\t\t\t\t\t\tphantomas.addOffender('jQuerySizzleCalls', '%s (in %s)', selector, (phantomas.getDOMPath(context) || 'unknown'));\n\t\t\t\t\t}) || phantomas.log('jQuery: can not measure jQuerySizzleCalls (jQuery used on the page is too old)!');\n\n\t\t\t\t\t// jQuery events triggers (issue #440)\n\t\t\t\t\tphantomas.spy(jQuery.event, 'trigger', function(ev, data, elem) {\n\t\t\t\t\t\tvar path = phantomas.getDOMPath(elem),\n\t\t\t\t\t\t\ttype = ev.type || ev;\n\n\t\t\t\t\t\tphantomas.log('Event: triggered \"%s\" on \"%s\"', type, path);\n\n\t\t\t\t\t\tphantomas.incrMetric('jQueryEventTriggers');\n\t\t\t\t\t\tphantomas.addOffender('jQueryEventTriggers', '\"%s\" on \"%s\"', type, path);\n\t\t\t\t\t}) || phantomas.log('jQuery: can not measure jQueryEventTriggers (jQuery used on the page is too old)!');\n\n\t\t\t\t\t// jQuery events bound to window' onLoad event (#451)\n\t\t\t\t\tphantomas.spy(jQuery.fn, 'on', function(eventName) {\n\t\t\t\t\t\tif ((eventName === 'load') && (this[0] === window)) {\n\t\t\t\t\t\t\tphantomas.incrMetric('jQueryWindowOnLoadFunctions');\n\t\t\t\t\t\t\tphantomas.addOffender('jQueryWindowOnLoadFunctions', phantomas.getCaller(2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}) || phantomas.log('jQuery: can not measure jQueryWindowOnLoadFunctions (jQuery used on the page is too old)!');\n\n\t\t\t\t\tspyReadsAndWrites(jQuery);\n\t\t\t\t});\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n\n\t// store the last resource that was received\n\t// try to report where given jQuery version was loaded from\n\tphantomas.on('recv', function(entry) {\n\t\tif (entry.isJS) {\n\t\t\tlastUrl = entry.url;\n\t\t}\n\t});\n\n\tphantomas.on('jQueryLoaded', function(version) {\n\t\tphantomas.log('jQuery: loaded v' + version);\n\t\tphantomas.setMetric('jQueryVersion', version);\n\n\t\t// report multiple jQuery \"instances\" (issue #435)\n\t\tphantomas.incrMetric('jQueryVersionsLoaded');\n\t\tphantomas.addOffender('jQueryVersionsLoaded', 'v%s', version);\n\n\t\tphantomas.log('jQuery: v%s (probably loaded from <%s>)', version, lastUrl);\n\t});\n\n\t// jQuery read & write operations (issue #436)\n\tvar lastOp;\n\n\tphantomas.on('jQueryOp', function(type, funcName, args, contextPath, caller) {\n\t\tphantomas.log('jQuery: %s op from $.%s(%j) on \"%s\" - %s', type, funcName, args, contextPath, caller);\n\n\t\tif (type === 'read') {\n\t\t\tphantomas.incrMetric('jQueryDOMReads');\n\t\t\tphantomas.addOffender('jQueryDOMReads', '$.%s(%j) on \"%s\"', funcName, args, contextPath);\n\n\t\t\t// This read operation may follow a write operation\n\t\t\t// In this case browser needs to perform all buffered write operations\n\t\t\t// in order to update the DOM - this can cause repaints and reflows\n\t\t\tif (lastOp === 'write') {\n\t\t\t\tphantomas.incrMetric('jQueryDOMWriteReadSwitches');\n\t\t\t\tphantomas.addOffender('jQueryDOMWriteReadSwitches', 'before $.%s(%j) on \"%s\"', funcName, args, contextPath);\n\t\t\t}\n\t\t} else {\n\t\t\tphantomas.incrMetric('jQueryDOMWrites');\n\t\t\tphantomas.addOffender('jQueryDOMWrites', '$.%s(%j) on \"%s\"', funcName, args, contextPath);\n\t\t}\n\n\t\tlastOp = type;\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/jserrors/jserrors.js":"/**\n * Meters the number of page errors, and provides traces as offenders for \"jsErrors\" metric\n */\n'use strict';\n\nexports.version = '0.3';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('jsErrors'); // @desc number of JavaScript errors\n\n\tfunction formatTrace(trace) {\n\t\tvar ret = [];\n\n\t\tif (Array.isArray(trace)) {\n\t\t\ttrace.forEach(function(entry) {\n\t\t\t\tret.push((entry.function ? entry.function+'(): ' : 'unknown fn: ') + (entry.sourceURL || entry.file) + ' @ ' + entry.line);\n\t\t\t});\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tphantomas.on('jserror', function(msg, trace) {\n\t\ttrace = formatTrace(trace);\n\n\t\tphantomas.log(msg);\n\t\tphantomas.log('Backtrace: ' + trace.join(' / '));\n\n\t\tphantomas.incrMetric('jsErrors');\n\t\tphantomas.addOffender('jsErrors', msg + ' - ' + trace.join(' / '));\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/keepAlive/keepAlive.js":"/**\n * Analyzes if HTTP responses keep the connections alive.\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar closedConnectionHosts = {};\n\n\tphantomas.setMetric('closedConnections'); // @desc number of requests not keeping the connection alive and slowing down the next request\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar connectionHeader = (entry.headers.Connection || '').toLowerCase(),\n\t\t\t// Taking the protocol in account, in case the same domain is called with two different protocols.\n\t\t\thost = entry.protocol + '://' + entry.domain;\n\n\t\tif (connectionHeader.indexOf('close') !== -1) {\n\t\t\t// Don't blame it immediatly, wait to see if the connection is needed a second time.\n\t\t\tclosedConnectionHosts[host] = entry.url;\n\t\t}\n\t});\n\n\tphantomas.on('send', function(entry, res) {\n\t\tvar host = entry.protocol + '://' + entry.domain,\n\t\t\tpreviousClosedConnection = closedConnectionHosts[host];\n\n\t\tif (typeof previousClosedConnection !== 'undefined') {\n\t\t\t// There was a closed connection. We can blame it safely now!\n\t\t\tphantomas.incrMetric('closedConnections');\n\t\t\tphantomas.addOffender('closedConnections', previousClosedConnection);\n\n\t\t\tphantomas.log('keepAlive: connection for <%s> was closed, but the page requested <%s>', host, entry.url);\n\n\t\t\tclosedConnectionHosts[host] = undefined;\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/lazyLoadableImages/lazyLoadableImages.js":"/**\n * Analyzes images and detects which one can be lazy-loaded (are below the fold)\n *\n * @see https://github.com/macbre/phantomas/issues/494\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('lazyLoadableImagesBelowTheFold'); // @desc number of images displayed below the fold that can be lazy-loaded\n\n\tphantomas.on('report', function() {\n\t\tphantomas.log('lazyLoadableImages: analyzing which images can be lazy-loaded...');\n\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tphantomas.spyEnabled(false, 'analyzing which images can be lazy-loaded');\n\n\t\t\t\tvar images = document.body.getElementsByTagName('img'),\n\t\t\t\t\ti,\n\t\t\t\t\tlen = images.length,\n\t\t\t\t\toffset,\n\t\t\t\t\tpath,\n\t\t\t\t\tprocessedImages = {},\n\t\t\t\t\tsrc,\n\t\t\t\t\tviewportHeight = window.innerHeight;\n\n\t\t\t\tphantomas.log('lazyLoadableImages: %d image(s) found, assuming %dpx offset to be the fold', len, viewportHeight);\n\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t// @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n\t\t\t\t\toffset = images[i].getBoundingClientRect().top;\n\t\t\t\t\tsrc = images[i].getAttribute('src');\n\n\t\t\t\t\t// ignore base64-encoded images\n\t\t\t\t\tif (src === null || src === '' || /^data:/.test(src)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tpath = phantomas.getDOMPath(images[i]);\n\n\t\t\t\t\t// get the most top position for a given image (deduplicate by src)\n\t\t\t\t\tif (typeof processedImages[src] === 'undefined') {\n\t\t\t\t\t\tprocessedImages[src] = {\n\t\t\t\t\t\t\toffset: offset,\n\t\t\t\t\t\t\tpath: path\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// maybe there's the same image loaded above the fold?\n\t\t\t\t\tif (offset < processedImages[src].offset) {\n\t\t\t\t\t\tprocessedImages[src] = {\n\t\t\t\t\t\t\toffset: offset,\n\t\t\t\t\t\t\tpath: path\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tphantomas.log('lazyLoadableImages: checking %d unique image(s)', Object.keys(processedImages).length);\n\n\t\t\t\tObject.keys(processedImages).forEach(function(src) {\n\t\t\t\t\tvar img = processedImages[src];\n\n\t\t\t\t\tif (img.offset > viewportHeight) {\n\t\t\t\t\t\tphantomas.log('lazyLoadableImages: <%s> image (%s) is below the fold (at %dpx)', src, img.path, img.offset);\n\n\t\t\t\t\t\tphantomas.incrMetric('lazyLoadableImagesBelowTheFold');\n\t\t\t\t\t\tphantomas.addOffender('lazyLoadableImagesBelowTheFold', src);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/localStorage/localStorage.js":"/**\n * localStorage metrics\n */\n/* global window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('localStorageEntries'); // @desc number of entries in local storage\n\n\tphantomas.on('report', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\tvar entries;\n\n\t\t\t\ttry {\n\t\t\t\t\tentries = Object.keys(window.localStorage);\n\n\t\t\t\t\tphantomas.setMetric('localStorageEntries', entries.length);\n\n\t\t\t\t\tentries.forEach(function(entry) {\n\t\t\t\t\t\tphantomas.addOffender('localStorageEntries', entry);\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tphantomas.log('localStorageEntries: not set because ' + ex + '!');\n\t\t\t\t}\n\t\t\t}(window.__phantomas));\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/mainRequest/mainRequest.js":"/**\n * Analyzes bits of data pertaining to the main request only\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tvar isMainRequest = true;\n\tvar statusCodes = [];\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tif (isMainRequest) {\n\t\t\tcaptureStatusCode(statusCodes, res.status);\n\t\t}\n\t});\n\n\tphantomas.on('responseEnd', function(entry, res) {\n\t\tisMainRequest = false;\n\t\tcaptureStatusCode(statusCodes, res.status);\n\n\t\tphantomas.setMetric('statusCodesTrail', statusCodes.join(','), true); // @desc comma-separated list of HTTP status codes that main request followed through (could contain a single element if the main request is a terminal one) [string]\n\t});\n\n\tfunction captureStatusCode(codes, code) {\n\t\tcodes.push(code);\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/redirects/redirects.js":"/**\n * Analyzes HTTP redirects\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('redirects'); // @desc number of HTTP redirects (either 301, 302 or 303)\n\tphantomas.setMetric('redirectsTime'); // @desc time it took to send and receive redirects\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tif (entry.isRedirect) {\n\t\t\tphantomas.incrMetric('redirects');\n\t\t\tphantomas.incrMetric('redirectsTime', entry.timeToLastByte);\n\n\t\t\tphantomas.addOffender('redirects', entry.url + ' is a redirect (HTTP ' + entry.status + ' ' + entry.statusText + ') ' +\n\t\t\t\t'to ' + (res.redirectURL || entry.headers.Location) + ' (took ' + entry.timeToLastByte + ' ms)');\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/repaints/repaints.js":"/**\n * Number of times the current document has been painted to the screen\n *\n * This is a Firefox-specific feature.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.mozPaintCount\n */\n/* global window: true */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('repaints'); // @desc number of repaints of the current document @gecko\n\tphantomas.setMetric('firstPaint'); // @desc time it took to perform the first paint @gecko @unreliable\n\n\tphantomas.on('init', function() {\n\t\tphantomas.evaluate(function() {\n\t\t\t(function(phantomas) {\n\t\t\t\t// feature detection\n\t\t\t\tif (typeof window.mozPaintCount === 'undefined') {\n\t\t\t\t\tphantomas.log('repaints: window.mozPaintCount not available!');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar lastPaintCountValue = 0,\n\t\t\t\t\tINTERVAL = 50;\n\n\t\t\t\tphantomas.log('repaints: the initial value is %j, polling every %d ms', window.mozPaintCount, INTERVAL);\n\n\t\t\t\tsetInterval(function() {\n\t\t\t\t\tif (window.mozPaintCount > lastPaintCountValue) {\n\t\t\t\t\t\tif (lastPaintCountValue === 0) {\n\t\t\t\t\t\t\tphantomas.emit('firstPaint'); // @desc fired on the first paint @desc\n\t\t\t\t\t\t\tphantomas.emit('milestone', 'firstPaint');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastPaintCountValue = window.mozPaintCount;\n\t\t\t\t\t\tphantomas.emit('paint', lastPaintCountValue); // @desc fired each time the document is painted @gecko\n\t\t\t\t\t}\n\t\t\t\t}, INTERVAL);\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n\n\tphantomas.on('firstPaint', function() {\n\t\tphantomas.setMarkerMetric('firstPaint');\n\t});\n\n\tphantomas.on('paint', function(count) {\n\t\tphantomas.log('repaints: %d so far', count);\n\t\tphantomas.setMetric('repaints', count);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/requestsStats/requestsStats.js":"/**\n * Analyzes HTTP requests and generates stats metrics\n *\n * setMetric('smallestResponse') @desc the size of the smallest response @offenders\n * setMetric('biggestResponse') @desc the size of the biggest response @offenders\n * setMetric('fastestResponse') @desc the time to the last byte of the fastest response @offenders\n * setMetric('slowestResponse') @desc the time to the last byte of the slowest response @offenders\n * setMetric('smallestLatency') @desc the time to the first byte of the fastest response @offenders\n * setMetric('biggestLatency') @desc the time to the first byte of the slowest response @offenders\n * setMetric('medianResponse') @desc median value of time to the last byte for all responses @offenders\n * setMetric('medianLatency') @desc median value of time to the first byte for all responses @offenders\n */\n'use strict';\n\nexports.version = '0.3';\n\nvar Stats = require('../../lib/fast-stats').Stats;\n\nexports.module = function(phantomas) {\n\tvar stack = {};\n\n\t// adds given entry under the \"type\" if given check function returns true\n\tfunction pushToStack(type, entry, check) {\n\t\t// no entry of given type\n\t\tif (typeof stack[type] === 'undefined') {\n\t\t\tstack[type] = entry;\n\t\t}\n\t\t// apply check function\n\t\telse if (check(stack[type], entry) === true) {\n\t\t\tstack[type] = entry;\n\t\t}\n\t}\n\n\tfunction getFromStack(type) {\n\t\treturn stack[type];\n\t}\n\n\tvar responseTimes = new Stats(),\n\t\tlatencyTimes = new Stats();\n\n\tphantomas.on('recv', function(entry, res) {\n\t\t// ignore anything different than HTTP 200\n\t\tif (entry.status !== 200) {\n\t\t\treturn;\n\t\t}\n\n\t\t// size\n\t\tpushToStack('smallestResponse', entry, function(stack, entry) {\n\t\t\treturn stack.contentLength > entry.contentLength;\n\t\t});\n\n\t\tpushToStack('biggestResponse', entry, function(stack, entry) {\n\t\t\treturn stack.contentLength < entry.contentLength;\n\t\t});\n\n\t\t// time (from sent to last byte)\n\t\tpushToStack('fastestResponse', entry, function(stack, entry) {\n\t\t\treturn stack.timeToLastByte > entry.timeToLastByte;\n\t\t});\n\n\t\tpushToStack('slowestResponse', entry, function(stack, entry) {\n\t\t\treturn stack.timeToLastByte < entry.timeToLastByte;\n\t\t});\n\n\t\t// latency\n\t\tpushToStack('smallestLatency', entry, function(stack, entry) {\n\t\t\treturn stack.timeToFirstByte > entry.timeToFirstByte;\n\t\t});\n\n\t\tpushToStack('biggestLatency', entry, function(stack, entry) {\n\t\t\treturn stack.timeToFirstByte < entry.timeToFirstByte;\n\t\t});\n\n\t\t// stats\n\t\tresponseTimes.push(entry.timeToLastByte);\n\t\tlatencyTimes.push(entry.timeToFirstByte);\n\t});\n\n\tphantomas.on('report', function() {\n\t\tvar entries = Object.keys(stack).length;\n\n\t\tif (entries === 0) {\n\t\t\tphantomas.log('requestsStats: no requests data gathered!');\n\t\t\treturn;\n\t\t}\n\n\t\t// set metrics and provide offenders with URLs\n\t\t[\n\t\t\t'smallestResponse',\n\t\t\t'biggestResponse',\n\t\t\t'fastestResponse',\n\t\t\t'slowestResponse',\n\t\t\t'smallestLatency',\n\t\t\t'biggestLatency'\n\t\t].forEach(function(metric) {\n\t\t\tvar entry = getFromStack(metric),\n\t\t\t\tdetails = '';\n\n\t\t\tswitch (metric) {\n\t\t\t\tcase 'smallestResponse':\n\t\t\t\tcase 'biggestResponse':\n\t\t\t\t\tphantomas.setMetric(metric, entry.contentLength);\n\t\t\t\t\tdetails = (entry.contentLength / 1024).toFixed(2) + ' kB';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'fastestResponse':\n\t\t\t\tcase 'slowestResponse':\n\t\t\t\t\tphantomas.setMetric(metric, entry.timeToLastByte);\n\t\t\t\t\tdetails = entry.timeToLastByte + ' ms';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'smallestLatency':\n\t\t\t\tcase 'biggestLatency':\n\t\t\t\t\tphantomas.setMetric(metric, entry.timeToFirstByte);\n\t\t\t\t\tdetails = entry.timeToFirstByte + ' ms';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tphantomas.addOffender(metric, entry.url + ' (' + details + ')');\n\t\t});\n\n\t\tphantomas.setMetric('medianResponse', responseTimes.median());\n\t\tphantomas.setMetric('medianLatency', latencyTimes.median());\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/requestsTo/requestsTo.js":"/**\n * Number of requests it took to make the page enter DomContentLoaded and DomComplete states accordingly\n */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tphantomas.setMetric('requestsToFirstPaint'); // @desc number of HTTP requests it took to make the first paint @gecko\n\tphantomas.setMetric('domainsToFirstPaint'); // @desc number of domains used to make the first paint @offenders @gecko @offenders\n\tphantomas.setMetric('requestsToDomContentLoaded'); // @desc number of HTTP requests it took to make the page reach DomContentLoaded state\n\tphantomas.setMetric('domainsToDomContentLoaded'); // @desc number of domains used to make the page reach DomContentLoaded state @offenders\n\tphantomas.setMetric('requestsToDomComplete'); // @desc number of HTTP requests it took to make the page reach DomComplete state\n\tphantomas.setMetric('domainsToDomComplete'); // @desc number of domains used to make the page reach DomComplete state @offenders\n\n\tvar Collection = require('../../lib/collection'),\n\t\tdomains = new Collection(),\n\t\trequests = 0;\n\n\tfunction setDomainMetric(metricName) {\n\t\tphantomas.setMetric(metricName, domains.getLength());\n\t\tdomains.sort().forEach(function(domain, cnt) {\n\t\t\tphantomas.addOffender(metricName, '%s (%d requests)', domain, cnt);\n\t\t});\n\t}\n\n\tphantomas.on('recv', function(entry, res) {\n\t\t//phantomas.log('requestsTo: #%d <%s> / %s', requests, entry.url, entry.domain);\n\n\t\trequests++;\n\n\t\tif (entry.domain) {\n\t\t\tdomains.push(entry.domain);\n\t\t}\n\t});\n\n\tphantomas.on('milestone', function(name) {\n\t\t//phantomas.log('requestsTo: %s (after %d requests)', name, requests);\n\n\t\tswitch (name) {\n\t\t\tcase 'firstPaint':\n\t\t\t\tphantomas.setMetric('requestsToFirstPaint', requests);\n\t\t\t\tsetDomainMetric('domainsToFirstPaint');\n\t\t\t\tbreak;\n\n\t\t\tcase 'domInteractive':\n\t\t\t\tphantomas.setMetric('requestsToDomContentLoaded', requests);\n\t\t\t\tsetDomainMetric('domainsToDomContentLoaded');\n\t\t\t\tbreak;\n\n\t\t\tcase 'domComplete':\n\t\t\t\tphantomas.setMetric('requestsToDomComplete', requests);\n\t\t\t\tsetDomainMetric('domainsToDomComplete');\n\t\t\t\tbreak;\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/staticAssets/staticAssets.js":"/**\n * Analyzes static assets (CSS, JS and images)\n */\n'use strict';\n\nexports.version = '0.5';\n\nexports.module = function(phantomas) {\n\tvar SIZE_THRESHOLD = 2 * 1024;\n\n\t// count requests for each asset\n\tvar Collection = require('../../lib/collection'),\n\t\tassetsReqCounter = new Collection(),\n\t\tcookieDomains = new Collection(),\n\t\t// TODO: use 3pc database with tracking services\n\t\ttrackingUrls = /google-analytics.com\\/__utm.gif|pixel.quantserve.com\\/pixel/;\n\n\tphantomas.setMetric('assetsNotGzipped'); // @desc number of static assets that were not gzipped @unreliable\n\tphantomas.setMetric('assetsWithQueryString'); // @desc number of static assets requested with query string (e.g. ?foo) in URL\n\tphantomas.setMetric('assetsWithCookies'); // @desc number of static assets requested from domains with cookie set\n\tphantomas.setMetric('smallImages'); // @desc number of images smaller than 2 KiB that can be base64 encoded @unreliable\n\tphantomas.setMetric('smallCssFiles'); // @desc number of CSS assets smaller than 2 KiB that can be inlined or merged @unreliable\n\tphantomas.setMetric('smallJsFiles'); // @desc number of JS assets smaller than 2 KiB that can be inlined or merged @unreliable\n\tphantomas.setMetric('multipleRequests'); // @desc number of static assets that are requested more than once\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar isContent = (entry.status === 200),\n\t\t\tsizeFormatted;\n\n\t\t// mark domains with cookie set\n\t\tif (entry.hasCookies) {\n\t\t\tcookieDomains.push(entry.domain);\n\t\t}\n\n\t\t// skip tracking requests\n\t\tif (trackingUrls.test(entry.url)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// check for query string -> foo.css?123\n\t\tif (entry.isImage || entry.isJS || entry.isCSS) {\n\t\t\tif (entry.url.indexOf('?') > -1) {\n\t\t\t\tphantomas.incrMetric('assetsWithQueryString');\n\t\t\t\tphantomas.addOffender('assetsWithQueryString', entry.url + ' (' + entry.type.toUpperCase() + ')');\n\t\t\t}\n\t\t}\n\n\t\t// check for not-gzipped assets (issue #515)\n\t\tif (entry.isJS || entry.isCSS || entry.isHTML || entry.isJSON || entry.isSVG || entry.isTTF || entry.isXML || entry.isFavicon) {\n\t\t\tif (!entry.gzip && isContent) {\n\t\t\t\tphantomas.incrMetric('assetsNotGzipped');\n\t\t\t\tphantomas.addOffender('assetsNotGzipped', entry.url + ' (' + entry.type.toUpperCase() + ')');\n\t\t\t}\n\t\t}\n\n\t\t// small assets can be inlined\n\t\tif (entry.contentLength < SIZE_THRESHOLD) {\n\t\t\tsizeFormatted = (entry.contentLength / 1024).toFixed(2);\n\n\t\t\t// check small images that can be base64 encoded\n\t\t\tif (entry.isImage) {\n\t\t\t\tphantomas.incrMetric('smallImages');\n\t\t\t\tphantomas.addOffender('smallImages', '%s (%s kB)', entry.url, sizeFormatted);\n\t\t\t}\n\t\t\t// CSS / JS that can be inlined\n\t\t\telse if (entry.isCSS) {\n\t\t\t\tphantomas.incrMetric('smallCssFiles');\n\t\t\t\tphantomas.addOffender('smallCssFiles', '%s (%s kB)', entry.url, sizeFormatted);\n\t\t\t} else if (entry.isJS) {\n\t\t\t\tphantomas.incrMetric('smallJsFiles');\n\t\t\t\tphantomas.addOffender('smallJsFiles', '%s (%s kB)', entry.url, sizeFormatted);\n\t\t\t}\n\t\t}\n\n\t\tif (entry.isImage || entry.isJS || entry.isCSS) {\n\t\t\t// count number of requests to each asset\n\t\t\tassetsReqCounter.push(entry.url);\n\n\t\t\t// count static assets requested from domains with cookie set\n\t\t\tif (cookieDomains.has(entry.domain)) {\n\t\t\t\tphantomas.incrMetric('assetsWithCookies');\n\t\t\t\tphantomas.addOffender('assetsWithCookies', '%s (%s)', entry.url, entry.type.toUpperCase());\n\t\t\t}\n\t\t}\n\t});\n\n\tphantomas.on('report', function() {\n\t\tassetsReqCounter.forEach(function(asset, cnt) {\n\t\t\tif (cnt > 1) {\n\t\t\t\tphantomas.incrMetric('multipleRequests');\n\t\t\t\tphantomas.addOffender('multipleRequests', asset);\n\t\t\t}\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/timeToFirst/timeToFirst.js":"/**\n * Provides metrics for time to first image, CSS and JS file\n *\n * setMetric('timeToFirstCss')   @desc time it took to receive the last byte of the first CSS @offenders\n * setMetric('timeToFirstJs')    @desc time it took to receive the last byte of the first JS @offenders\n * setMetric('timeToFirstImage') @desc time it took to receive the last byte of the first image @offenders\n */\n'use strict';\n\nexports.version = '0.1';\n\nexports.module = function(phantomas) {\n\tfunction capitalize(txt) {\n\t\treturn txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n\t}\n\n\tvar types = ['css', 'js', 'image'],\n\t\thasReceived = {},\n\t\ttimestampStart;\n\n\t// init metrics\n\ttypes.forEach(function(key) {\n\t\tphantomas.setMetric('timeToFirst' + capitalize(key));\n\t});\n\n\t// register the timestamp when the request for the page was sent\n\tphantomas.on('pageOpen', function() {\n\t\ttimestampStart = Date.now();\n\t});\n\n\tphantomas.on('recv', function(entry, res) {\n\t\tvar type = entry.type,\n\t\t\ttime = 0,\n\t\t\tmetricName = '';\n\n\t\t// report only the first asset of supported type\n\t\tif ((types.indexOf(type) === -1) || (hasReceived[type] === true)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// calculate relative timestamp\n\t\ttime = Date.now() - timestampStart;\n\n\t\tmetricName = 'timeToFirst' + capitalize(type);\n\n\t\tphantomas.setMetric(metricName, time);\n\t\tphantomas.addOffender(metricName, entry.url + ' received in ' + time + ' ms');\n\n\t\t// set the flag\n\t\thasReceived[type] = true;\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/modules/windowPerformance/windowPerformance.js":"/**\n * Measure when the page reaches certain states\n *\n * @see http://w3c-test.org/webperf/specs/NavigationTiming/#dom-performancetiming-domloading\n * @see https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\t// times below are calculated relative to performance.timing.responseEnd (#117)\n\tphantomas.setMetric('domInteractive'); // @desc time it took to parse the HTML and construct the DOM\n\tphantomas.setMetric('domContentLoaded'); // @desc time it took to construct both DOM and CSSOM, no stylesheets that are blocking JavaScript execution (i.e. onDOMReady)\n\tphantomas.setMetric('domContentLoadedEnd'); // @desc time it took to finish handling of onDOMReady event @unreliable\n\tphantomas.setMetric('domComplete'); // @desc time it took to load all page resources, the loading spinner has stopped spinning\n\n\t// backend vs frontend time\n\tphantomas.setMetric('timeBackend'); // @desc time to the first byte compared to the total loading time [%]\n\tphantomas.setMetric('timeFrontend'); // @desc time to window.load compared to the total loading time [%]\n\n\t// measure dom... metrics from the moment HTML response was fully received\n\tvar responseEndTime = Date.now();\n\n\tphantomas.on('responseEnd', function() {\n\t\tresponseEndTime = Date.now();\n\t\tphantomas.log('Performance timing: responseEnd = %d', responseEndTime);\n\t});\n\n\tphantomas.once('init', function() {\n\t\tphantomas.evaluate(function(responseEndTime) {\n\t\t\t(function(phantomas) {\n\t\t\t\tphantomas.spyEnabled(false, 'installing window.performance metrics');\n\n\t\t\t\t// extend window.performance\n\t\t\t\t// \"init\" event is sometimes fired twice, pass a value set by \"responseEnd\" event handler (fixes #192)\n\t\t\t\tif (typeof window.performance === 'undefined') {\n\t\t\t\t\twindow.performance = {\n\t\t\t\t\t\ttiming: {\n\t\t\t\t\t\t\tresponseEnd: responseEndTime\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tphantomas.log('Performance timing: emulating window.performance');\n\t\t\t\t} else {\n\t\t\t\t\tphantomas.log('Performance timing: using native window.performance');\n\t\t\t\t}\n\n\t\t\t\t// onDOMReady\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", function() {\n\t\t\t\t\tvar time = Date.now() - responseEndTime;\n\n\t\t\t\t\tphantomas.setMetric('domContentLoaded', time, true);\n\t\t\t\t\tphantomas.log('Performance timing: document reached \"DOMContentLoaded\" state after %d ms', time);\n\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t// use NavigationTiming if possible\n\t\t\t\t\t\tvar time = window.performance.timing.domContentLoadedEventEnd ?\n\t\t\t\t\t\t\t(window.performance.timing.domContentLoadedEventEnd - window.performance.timing.responseEnd) :\n\t\t\t\t\t\t\t(Date.now() - responseEndTime);\n\n\t\t\t\t\t\tphantomas.setMetric('domContentLoadedEnd', time, true);\n\t\t\t\t\t\tphantomas.log('Performance timing: document reached \"DOMContentLoadedEnd\" state after %d ms', time);\n\t\t\t\t\t}, 0);\n\t\t\t\t});\n\n\t\t\t\t// emulate Navigation Timing\n\t\t\t\tdocument.addEventListener('readystatechange', function() {\n\t\t\t\t\tvar readyState = document.readyState,\n\t\t\t\t\t\tresponseEndTime = window.performance.timing.responseEnd,\n\t\t\t\t\t\ttime = Date.now() - responseEndTime,\n\t\t\t\t\t\tmetricName;\n\n\t\t\t\t\t// @see http://www.w3.org/TR/html5/dom.html#documentreadystate\n\t\t\t\t\tswitch (readyState) {\n\t\t\t\t\t\t// the browser has finished parsing all of the HTML and DOM construction is complete\n\t\t\t\t\t\tcase 'interactive':\n\t\t\t\t\t\t\tmetricName = 'domInteractive';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// the processing is complete and all of the resources on the page have finished downloading\n\t\t\t\t\t\tcase 'complete':\n\t\t\t\t\t\t\tmetricName = 'domComplete';\n\t\t\t\t\t\t\tphantomas.log('Performance timing: %j', window.performance.timing);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tphantomas.log('Performance timing: unhandled \"%s\" state!', readyState);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tphantomas.setMetric(metricName, time, true);\n\n\t\t\t\t\tphantomas.log('Performance timing: document reached \"%s\" state after %d ms', readyState, time);\n\t\t\t\t});\n\n\t\t\t\tphantomas.spyEnabled(true);\n\t\t\t})(window.__phantomas);\n\t\t}, responseEndTime);\n\t});\n\n\t/**\n\t * Emit metrics with backend vs frontend time\n\t *\n\t * Performance Golden Rule:\n\t * \"80-90% of the end-user response time is spent on the frontend. Start there.\"\n\t *\n\t * @see http://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/\n\t */\n\tphantomas.on('report', function() {\n\t\t//  The “backend” time is the time it takes the server to get the first byte back to the client.\n\t\t//  The “frontend” time is measured from the last byte of the response (responseEnd) until all resources are fetched (domComplete)\n\t\tvar backendTime = parseInt(phantomas.getMetric('timeToFirstByte'), 10),\n\t\t\tfrontendTime = parseInt(phantomas.getMetric('domComplete'), 10),\n\t\t\ttotalTime = backendTime + frontendTime,\n\t\t\tbackendTimePercentage;\n\n\t\tif (totalTime === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tbackendTimePercentage = Math.round(backendTime / totalTime * 100);\n\n\t\tphantomas.setMetric('timeBackend', backendTimePercentage);\n\t\tphantomas.setMetric('timeFrontend', 100 - backendTimePercentage);\n\n\t\tphantomas.log('Performance timing: backend vs frontend time - %d% / %d%', backendTimePercentage, 100 - backendTimePercentage);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/modules/navigationTiming/navigationTiming.js":"/**\n * Emits \"milestone\" event on Navigation Timing related events:\n *\n * - domContentLoaded\n * - domInteractive\n * - domComplete\n *\n * Code taken from windowPerformance module\n */\n/* global document: true, window: true */\n'use strict';\n\nexports.version = '1.0';\n\nexports.module = function(phantomas) {\n\tphantomas.once('init', function() {\n\t\tphantomas.evaluate(function () {\n\t\t\t(function(phantomas) {\n\t\t\t\tfunction emit(eventName) {\n\t\t\t\t\tphantomas.log('Navigation Timing milestone: %s', eventName);\n\t\t\t\t\tphantomas.emit('milestone', eventName);\n\t\t\t\t}\n\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", function() {\n\t\t\t\t\t// both DOM and CSSOM are constructed, no stylesheets are blocking JavaScript execution\n\t\t\t\t\temit('domReady');\n\t\t\t\t});\n\n\t\t\t\t// domInteractive and domComplete\n\t\t\t\tdocument.addEventListener('readystatechange', function() {\n\t\t\t\t\tvar readyState = document.readyState;\n\n\t\t\t\t\t// @see http://www.w3.org/TR/html5/dom.html#documentreadystate\n\t\t\t\t\tswitch (readyState) {\n\t\t\t\t\t\t// the browser has finished parsing all of the HTML and DOM construction is complete\n\t\t\t\t\t\tcase 'interactive':\n\t\t\t\t\t\t\temit('domInteractive');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// the processing is complete and all of the resources on the page have finished downloading\n\t\t\t\t\t\tcase 'complete':\n\t\t\t\t\t\t\temit('domComplete');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})(window.__phantomas);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/modules/requestsMonitor/requestsMonitor.js":"/**\n * Simple HTTP requests monitor and analyzer\n */\n'use strict';\n\nexports.version = '1.2';\n\nexports.module = function(phantomas) {\n\t// imports\n\tvar HTTP_STATUS_CODES = phantomas.require('http').STATUS_CODES,\n\t\tparseUrl = phantomas.require('url').parse;\n\n\tvar requests = [];\n\n\t// register metric\n\tphantomas.setMetric('requests');              // @desc total number of HTTP requests made\n\tphantomas.setMetric('gzipRequests');          // @desc number of gzipped HTTP responses @unreliable\n\tphantomas.setMetric('postRequests');          // @desc number of POST requests\n\tphantomas.setMetric('httpsRequests');         // @desc number of HTTPS requests\n\tphantomas.setMetric('notFound');              // @desc number of HTTP 404 responses\n\tphantomas.setMetric('bodySize');              // @desc size of the uncompressed content of all responses @unreliable\n\tphantomas.setMetric('contentLength');         // @desc size of the content of all responses (based on Content-Length header) @unreliable\n\tphantomas.setMetric('httpTrafficCompleted');  // @desc time it took to receive the last byte of the last HTTP response\n\n\t// parse given URL to get protocol and domain\n\tfunction parseEntryUrl(entry) {\n\t\tvar parsed;\n\n\t\tif (entry.url.indexOf('data:') !== 0) {\n\t\t\t// @see http://nodejs.org/api/url.html#url_url\n\t\t\tparsed = parseUrl(entry.url) || {};\n\n\t\t\tentry.protocol = parsed.protocol.replace(':', '');\n\t\t\tentry.domain = parsed.hostname;\n\t\t\tentry.query = parsed.query;\n\n\t\t\tif (entry.protocol === 'https') {\n\t\t\t\tentry.isSSL = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// base64 encoded data\n\t\t\tentry.domain = false;\n\t\t\tentry.protocol = false;\n\t\t\tentry.isBase64 = true;\n\t\t}\n\t}\n\n\tphantomas.on('onResourceRequested', function(res, request) {\n\t\t// store current request data\n\t\tvar entry = requests[res.id] = {\n\t\t\tid: res.id,\n\t\t\turl: res.url,\n\t\t\tmethod: res.method,\n\t\t\trequestHeaders: {},\n\t\t\tsendTime: res.time,\n\t\t\tbodySize: 0,\n\t\t\tisBlocked: false\n\t\t};\n\n\t\t// allow modules to block requests\n\t\tentry.block = function() {\n\t\t\tthis.isBlocked = true;\n\t\t};\n\n\t\tres.headers.forEach(function(header) {\n\t\t\tentry.requestHeaders[header.name] = header.value;\n\t\t});\n\n\t\tparseEntryUrl(entry);\n\n\t\tif (entry.isBase64) {\n\t\t\treturn;\n\t\t}\n\n\t\t// give modules a chance to block requests using entry.block()\n\t\t// @see https://github.com/ariya/phantomjs/issues/10230\n\t\tphantomas.emitInternal('beforeSend', entry, res); // @desc allows the request to be blocked\n\n\t\tif ( (entry.isBlocked === true) && (typeof request !== 'undefined') ) {\n\t\t\tphantomas.log('Blocked request: <' + entry.url + '>');\n\t\t\trequest.abort();\n\t\t\treturn;\n\t\t}\n\n\t\tphantomas.log('req: <%s>', entry.url);\n\n\t\tphantomas.emit('send', entry, res); // @desc request has been sent\n\t});\n\n\tphantomas.on('onResourceReceived', function(res) {\n\t\t// current request data\n\t\tvar entry = requests[res.id] || {};\n\n\t\t// fix for blocked requests still \"emitting\" onResourceReceived with \"stage\" = 'end' and empty \"status\" (issue #122)\n\t\t// or empty URL (broken in PhantomJS 2.0.1 (PR #573)\n\t\tif (res.status === null || res.url === '' ) {\n\t\t\tif (entry.isBlocked) {\n\t\t\t\treturn;\n\t\t\t} else if (!entry.isBase64) {\n\t\t\t\tphantomas.log('Got a response with no status or URL set: <%s> (%j)', res.url, res);\n\t\t\t\tphantomas.emitInternal('abort', entry, res); // @desc request has been blocked\n\t\t\t}\n\t\t}\n\n\t\tswitch(res.stage) {\n\t\t\t// the beginning of response\n\t\t\tcase 'start':\n\t\t\t\tentry.recvStartTime = res.time;\n\t\t\t\tentry.timeToFirstByte = res.time - entry.sendTime;\n\n\t\t\t\t// FIXME: buggy\n\t\t\t\t// @see https://github.com/ariya/phantomjs/issues/10169\n\t\t\t\tentry.bodySize = res.bodySize || 0;\n\t\t\t\tbreak;\n\n\t\t\t// the end of response\n\t\t\tcase 'end':\n\t\t\t\t// SlimerJS sets res.bodySize at stage = end\n\t\t\t\tentry.bodySize = entry.bodySize || res.bodySize;\n\n\t\t\t\t// timing\n\t\t\t\tentry.recvEndTime = res.time;\n\t\t\t\tentry.timeToLastByte = res.time - entry.sendTime;\n\t\t\t\tentry.receiveTime = entry.recvEndTime - entry.recvStartTime;\n\n\t\t\t\t// issue #295\n\t\t\t\tif (typeof entry.recvStartTime === 'undefined') {\n\t\t\t\t\tphantomas.log('recv: \"start\" stage not registered for <%s>!', res.url);\n\t\t\t\t\tentry.receiveTime = entry.recvEndTime - entry.sendTime;\n\t\t\t\t}\n\n\t\t\t\t// request method\n\t\t\t\tswitch(entry.method) {\n\t\t\t\t\tcase 'POST':\n\t\t\t\t\t\tphantomas.incrMetric('postRequests');\n\t\t\t\t\t\tphantomas.addOffender('postRequests', entry.url);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// asset type\n\t\t\t\tentry.type = 'other';\n\n\t\t\t\t// analyze HTTP headers\n\t\t\t\tentry.headers = {};\n\t\t\t\tres.headers.forEach(function(header) {\n\t\t\t\t\tentry.headers[header.name] = header.value;\n\n\t\t\t\t\tswitch (header.name.toLowerCase()) {\n\t\t\t\t\t\t// TODO: why it's not gzipped?\n\t\t\t\t\t\t// because: https://github.com/ariya/phantomjs/issues/10156\n\t\t\t\t\t\tcase 'content-length':\n\t\t\t\t\t\t\tentry.contentLength = parseInt(header.value, 10);\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\tif (entry.bodySize !== entry.contentLength) {\n\t\t\t\t\t\t\t\tphantomas.log('%s: %j', 'bodySize vs contentLength', {url: entry.url, bodySize: entry.bodySize, contentLength: entry.contentLength});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t**/\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// detect content type\n\t\t\t\t\t\tcase 'content-type':\n\t\t\t\t\t\t\t// parse header value\n\t\t\t\t\t\t\tvar value = header.value.split(';').shift().toLowerCase();\n\t\t\t\t\t\t\tentry.contentType = value;\n\n\t\t\t\t\t\t\tswitch(value) {\n\t\t\t\t\t\t\t\tcase 'text/html':\n\t\t\t\t\t\t\t\t\tentry.type = 'html';\n\t\t\t\t\t\t\t\t\tentry.isHTML = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\t\t\t\tentry.type = 'xml';\n\t\t\t\t\t\t\t\t\tentry.isXML = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'text/css':\n\t\t\t\t\t\t\t\t\tentry.type = 'css';\n\t\t\t\t\t\t\t\t\tentry.isCSS = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'application/x-javascript':\n\t\t\t\t\t\t\t\tcase 'application/javascript':\n\t\t\t\t\t\t\t\tcase 'text/javascript':\n\t\t\t\t\t\t\t\t\tentry.type = 'js';\n\t\t\t\t\t\t\t\t\tentry.isJS = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t\tentry.type = 'json';\n\t\t\t\t\t\t\t\t\tentry.isJSON = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'image/png':\n\t\t\t\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\t\t\t\tcase 'image/svg+xml':\n\t\t\t\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\t\t\t\tentry.type = 'image';\n\t\t\t\t\t\t\t\t\tentry.isImage = true;\n\n\t\t\t\t\t\t\t\t\tif (value === 'image/svg+xml') {\n\t\t\t\t\t\t\t\t\t\tentry.isSVG = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'video/webm':\n\t\t\t\t\t\t\t\t\tentry.type = 'video';\n\t\t\t\t\t\t\t\t\tentry.isVideo = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t// @see http://stackoverflow.com/questions/2871655/proper-mime-type-for-fonts\n\t\t\t\t\t\t\t\tcase 'application/font-wof':\n\t\t\t\t\t\t\t\tcase 'application/font-woff':\n\t\t\t\t\t\t\t\tcase 'application/vnd.ms-fontobject':\n\t\t\t\t\t\t\t\tcase 'application/x-font-opentype':\n\t\t\t\t\t\t\t\tcase 'application/x-font-truetype':\n\t\t\t\t\t\t\t\tcase 'application/x-font-ttf':\n\t\t\t\t\t\t\t\tcase 'application/x-font-woff':\n\t\t\t\t\t\t\t\tcase 'font/opentype':\n\t\t\t\t\t\t\t\tcase 'font/ttf':\n\t\t\t\t\t\t\t\tcase 'font/woff':\n\t\t\t\t\t\t\t\t\tentry.type = 'webfont';\n\t\t\t\t\t\t\t\t\tentry.isWebFont = true;\n\n\t\t\t\t\t\t\t\t\tif (/ttf|truetype$/.test(value)) {\n\t\t\t\t\t\t\t\t\t\tentry.isTTF = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\t\t\tvar ext = (entry.url || '').split('.').pop();\n\n\t\t\t\t\t\t\t\t\tswitch(ext) {\n\t\t\t\t\t\t\t\t\t\t// @see http://stackoverflow.com/questions/2871655/proper-mime-type-for-fonts#comment-8077637\n\t\t\t\t\t\t\t\t\t\tcase 'otf':\n\t\t\t\t\t\t\t\t\t\t\tentry.type = 'webfont';\n\t\t\t\t\t\t\t\t\t\t\tentry.isWebFont = true;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'image/x-icon':\n\t\t\t\t\t\t\t\tcase 'image/vnd.microsoft.icon':\n\t\t\t\t\t\t\t\t\tentry.type = 'favicon';\n\t\t\t\t\t\t\t\t\tentry.isFavicon = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tphantomas.log('Unknown content type found: ' + value + ' for <' + entry.url + '>');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// detect content encoding\n\t\t\t\t\t\tcase 'content-encoding':\n\t\t\t\t\t\t\tif (header.value === 'gzip') {\n\t\t\t\t\t\t\t\tentry.gzip = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// detect cookies (issue #92)\n\t\t\t\t\t\tcase 'set-cookie':\n\t\t\t\t\t\t\tentry.hasCookies = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tparseEntryUrl(entry);\n\n\t\t\t\t// HTTP code\n\t\t\t\tentry.status = res.status || 200 /* for base64 data */;\n\t\t\t\tentry.statusText = HTTP_STATUS_CODES[entry.status];\n\n\t\t\t\tswitch(entry.status) {\n\t\t\t\t\tcase 301: // Moved Permanently\n\t\t\t\t\tcase 302: // Found\n\t\t\t\t\tcase 303: // See Other\n\t\t\t\t\t\tentry.isRedirect = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 404: // Not Found\n\t\t\t\t\t\tphantomas.incrMetric('notFound');\n\t\t\t\t\t\tphantomas.addOffender('notFound', entry.url);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// default value (if Content-Length header is not present in the response or it's base64-encoded)\n\t\t\t\t// see issue #137\n\t\t\t\tif (typeof entry.contentLength === 'undefined') {\n\t\t\t\t\tentry.contentLength = entry.bodySize;\n\t\t\t\t\tphantomas.log('%s: %j', 'contentLength missing', {url: entry.url, bodySize: entry.bodySize});\n\t\t\t\t}\n\n\t\t\t\t// requests stats\n\t\t\t\tif (!entry.isBase64) {\n\t\t\t\t\tphantomas.incrMetric('requests');\n\n\t\t\t\t\tphantomas.incrMetric('bodySize', entry.bodySize);\n\t\t\t\t\tphantomas.incrMetric('contentLength', entry.contentLength);\n\t\t\t\t}\n\n\t\t\t\tif (entry.gzip) {\n\t\t\t\t\tphantomas.incrMetric('gzipRequests');\n\t\t\t\t\tphantomas.addOffender('gzipRequests', '%s (gzip: %s kB / uncompressed: %s kB)', entry.url, (entry.contentLength/1024).toFixed(2), (entry.bodySize/1024).toFixed(2));\n\t\t\t\t}\n\n\t\t\t\tif (entry.isSSL) {\n\t\t\t\t\tphantomas.incrMetric('httpsRequests');\n\t\t\t\t\tphantomas.addOffender('httpsRequests', entry.url);\n\t\t\t\t}\n\n\t\t\t\tif (entry.isBase64) {\n\t\t\t\t\tphantomas.emit('base64recv', entry, res); // @desc base64-encoded \"response\" has been received\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tphantomas.log('recv: HTTP %d <%s> [%s]', entry.status, entry.url, entry.contentType);\n\t\t\t\t\tphantomas.emit('recv' , entry, res); // @desc response has been received\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\t// completion of the last HTTP request\n\tvar loadStartedTime;\n\tphantomas.on('loadStarted', function(res) {\n\t\t// when the monitoring started?\n\t\tloadStartedTime = Date.now();\n\t});\n\n        phantomas.on('recv', function(entry, res) {\n\t\tphantomas.setMetric('httpTrafficCompleted', entry.recvEndTime - loadStartedTime);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-phantomas/node_modules/phantomas/core/modules/timeToFirstByte/timeToFirstByte.js":"/**\n * TTFB / TTLB metrics\n */\n'use strict';\n\nexports.version = '1.1';\n\nexports.module = function(phantomas) {\n\tvar measured = false,\n\t\treqId = 1; // request ID to consider when calculating TTFB / TTLB\n\n\tphantomas.setMetric('timeToFirstByte'); // @desc time it took to receive the first byte of the first response (that was not a redirect)\n\tphantomas.setMetric('timeToLastByte'); // @desc time it took to receive the last byte of the first response (that was not a redirect)\n\n\tphantomas.on('recv', function(entry, res) {\n\t\t// metrics already calculated\n\t\tif (measured) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (entry.isRedirect) {\n\t\t\t// wait for the next request\n\t\t\treqId = entry.id + 1;\n\n\t\t\tphantomas.log('Time to first byte: response #%d <%s> is a redirect (waiting for response #%d)', entry.id, entry.url, reqId);\n\t\t\treturn;\n\t\t}\n\n\t\t// check the first response which is not a redirect (issue #74)\n\t\tif (entry.id === reqId) {\n\t\t\tphantomas.setMetric('timeToFirstByte', entry.timeToFirstByte, true);\n\t\t\tphantomas.setMetric('timeToLastByte', entry.timeToLastByte, true);\n\n\t\t\tmeasured = true;\n\n\t\t\tphantomas.log('Time to first byte: set to %d ms for #%d request to <%s> (HTTP %d)', entry.timeToFirstByte, entry.id, entry.url, entry.status);\n\t\t\tphantomas.log('Time to last byte: set to %d ms', entry.timeToLastByte);\n\n\t\t\tphantomas.emitInternal('responseEnd', entry, res); // @desc the first response (that was not a redirect) fully received\n\t\t\tphantomas.emit('milestone', 'responseEnd');\n\t\t}\n\t});\n};\n"}